<%- include("../partials/user/header") %>
<%- include("../partials/flashMessage") %>


<style>
  .userProfileMain {
    width: 80vw;
    height: 30%;
    margin: 0 auto;
    border-radius: 0px;
    background-color: rgb(0, 0, 0);
  }
  .userProfileH1 {
    width: 50%;
    margin: auto auto;
    font-family: "Baloo", cursive;
    color: white;
    font-size: 7vw;
  }
  .breadcrumbCls {
    border-radius: 0;
    background-color: aliceblue;
  }
</style>

<section>
  <!-- Breadcrumbs -->
  <div class="container">
    <ol class="breadcrumb breadcrumbCls justify-content-right">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/profile">Profile</a></li>
      <li class="breadcrumb-item active">Addressess</li>
    </ol>
  </div>

  <!-- Hero-Content -->
  <div class="pb-5 text-center">
    <div class="card userProfileMain">
      <h1 class="userProfileH1">Addressess</h1>
    </div>
  </div>
</section>

<section>
  <div class="container mb-5">
    <div class="row">
      <%- include('../partials/user/sidebar.ejs') %>
      <!-- Content  -->
      <section class="col-lg-8">
        <!-- Toolbar-->
        <div class="d-none d-lg-flex justify-content-between align-items-center pt-lg-3 pb-4 pb-lg-5 mb-lg-3">
          <h6 class="fs-base fs-5 mb-0">List of your registered addresses:</h6>
        </div>
        <!-- Add New Address Modal-->
        <form class="needs-validation modal fade" action="/address/add-address" method="POST" id="add-address" tabindex="-1" novalidate>
          <div class="modal-dialog modal-lg">
            <div class="modal-content p-4">
              <div class="modal-header">
                <h5 class="modal-title">Add a new address</h5>
                <button class="btn-close" type="button" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <div class="row gx-4 gy-3">
                  <div class="col-sm-6 form-group">
                    <label class="form-label" for="address-fn">Full name</label>
                    <input name="name" class="form-control" type="text" id="address-fn" required />
                    <small></small>
                  </div>
                  <div class="col-sm-6 form-group">
                    <label class="form-label" for="address-ph">Phone</label>
                    <input name="phone" class="form-control" type="tel" id="address-ph" required />
                    <small></small>
                  </div>
                  <div class="col-sm-6 form-group">
                    <label class="form-label" for="address-house-name">House Name</label>
                    <input name="house_name" class="form-control" type="text" id="address-house-name" />
                    <small></small>
                  </div>
                  <div class="col-sm-6 form-group">
                    <label class="form-label" for="address-area">Area/Street</label>
                    <input name="area_street" class="form-control" type="text" id="address-area" />
                    <small></small>
                  </div>
                  <div class="col-sm-6 form-group">
                    <label class="form-label" for="address-locality">locality</label>
                    <input name="locality" class="form-control" type="text" id="address-locality" />
                    <small></small>
                  </div>
                  <div class="col-sm-6 form-group">
                    <label class="form-label" for="address-town">Town</label>
                    <input name="town" class="form-control" type="text" id="address-town" />
                    <small></small>
                  </div>
                  <div class="col-sm-6 form-group">
                    <label class="form-label" for="address-state">State</label>
                    <select class="form-select" name="state" id="address-state">
                      <option value="india">Select State</option>
                      <option value="Andhra Pradesh">Andhra Pradesh</option>
                      <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                      <option value="Assam">Assam</option>
                      <option value="Bihar">Bihar</option>
                      <option value="Chhattisgarh">Chhattisgarh</option>
                      <option value="Goa">Goa</option>
                      <option value="Gujarat">Gujarat</option>
                      <option value="Haryana">Haryana</option>
                      <option value="Himachal Pradesh">Himachal Pradesh</option>
                      <option value="Jharkhand">Jharkhand</option>
                      <option value="Karnataka">Karnataka</option>
                      <option value="Kerala">Kerala</option>
                      <option value="Madhya Pradesh">Madhya Pradesh</option>
                      <option value="Maharashtra">Maharashtra</option>
                      <option value="Manipur">Manipur</option>
                      <option value="Meghalaya">Meghalaya</option>
                      <option value="Mizoram">Mizoram</option>
                      <option value="Nagaland">Nagaland</option>
                      <option value="Odisha">Odisha</option>
                      <option value="Punjab">Punjab</option>
                      <option value="Rajasthan">Rajasthan</option>
                      <option value="Sikkim">Sikkim</option>
                      <option value="Tamil Nadu">Tamil Nadu</option>
                      <option value="Telangana">Telangana</option>
                      <option value="Tripura">Tripura</option>
                      <option value="Uttar Pradesh">Uttar Pradesh</option>
                      <option value="Uttarakhand">Uttarakhand</option>
                      <option value="West Bengal">West Bengal</option>
                      <option value="Andaman and Nicobar Islands">Andaman and Nicobar Islands</option>
                      <option value="Chandigarh">Chandigarh</option>
                      <option value="Dadra and Nagar Haveli and Daman and Diu">Dadra and Nagar Haveli and Daman and Diu</option>
                      <option value="Lakshadweep">Lakshadweep</option>
                      <option value="Delhi">Delhi</option>
                      <option value="Puducherry">Puducherry</option>
                    </select>
                    <small></small>
                  </div>

                  <div class="col-sm-6 form-group">
                    <label class="form-label" for="address-zip">ZIP code</label>
                    <input name="zipcode" class="form-control" type="number" id="address-zip" required />
                    <small></small>
                  </div>
                  <div class="col-sm-6 form-group">
                    <label class="form-label" for="address-landmark">Landmark</label>
                    <input name="landmark" class="form-control" type="text" id="address-landmark" required />
                    <small></small>
                  </div>
                  <div class="col-sm-6 form-group">
                    <label class="form-label" for="alternate-phone">Alternate Phone</label>
                    <input name="alternate_phone" class="form-control" type="tel" id="alternate-phone" required />
                    <small></small>
                    <input name="customer_id" type="hidden" value="<%- user%>" class="form-control" />
                  </div>
                  <div class="col-sm-6 form-group">
                    <label class="form-label" for="form-check">Address Type</label>
                    <div class="form-check">
                      <input class="form-check-input" type="radio" value="HOME" name="address_type" id="flexRadioDefault1" checked />
                      <small></small>
                      <label class="form-check-label" for="flexRadioDefault1"> HOME </label>
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" value="WORK" type="radio" name="address_type" id="flexRadioDefault2" />
                      <label class="form-check-label" for="flexRadioDefault2"> WORK </label>
                    </div>
                  </div>
                </div>
              </div>
              <div class="modal-footer">
                <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Close</button>
                <button class="btn btn-outline-success btn-shadow" type="submit">Add address</button>
              </div>
            </div>
          </div>
        </form>

        <!-- Addresses list-->
        <div class="table table-responsive table-striped fs-md">
          <table class="table table-hover mb-0">
            <thead>
              <tr class="align-middle fs-5">
                <th>Address</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% address.forEach(item => { %>
              <tr>
                <td class="py-3 align-middle text-capitalize fs-5">
                  <%- item.name.toLowerCase() + ', ' + item.house_name + ', ' + item.town + ', ' + item.state + ', PIN: ' + item.zipcode + ', PH:' +
                  item.phone %>
                </td>
                <td class="py-3 btn-group align-middle align-items-center">
                  <div class="">
                    <button
                      class="btn btn-sm btn-outline-warning"
                      id="edit-button"
                      data-address-id="<%- item._id %>"
                      href="#edit-address-modal"
                      data-bs-toggle="modal"
                    >
                      <i class="bi bi-pencil fs-6"></i>
                    </button>
                  </div>
                  <!-- <a class="btn btn-sm btn-info" href="/user/address/edit-address/<%- item._id %>" data-bs-toggle="tooltip" title="Edit"><i class="bi bi-pencil fs-6"></i></a> -->
                  <button
                    class="btn btn-sm btn-danger"
                    onclick="deleteAddress('<%- item._id %>')"
                    type="submit"
                    data-bs-toggle="tooltip"
                    title="Remove"
                  >
                    <i class="bi bi-trash fs-6"></i>
                  </button>
                  <!-- <form id="deleteAddress" action="/user/address/delete-address/<%- item._id %>?_method=DELETE" method="POST">
                  </form> -->
                </td>
              </tr>
              <% }) %>
            </tbody>
          </table>
        </div>
        <div class="text-sm-start pt-4">
          <a class="btn btn-outline-success" href="#add-address" data-bs-toggle="modal"> Add new address </a>
        </div>
      </section>
    </div>
  </div>

  <!-- Edit Address Modal -->
  <div class="modal fade" id="edit-address-modal"  tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content p-4">
        <div class="modal-header">
          <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form method="POST" id="edit-address-form" action="/address"  novalidate>
          <div class="modal-body">
            <div class="row gx-4 gy-3">
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-fn">Full name</label>
                <input name="name" class="form-control" type="text" id="edit-address-fn" required />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-ph">Phone</label>
                <input name="phone" class="form-control" type="text" id="edit-address-ph" required />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-house-name">House Name</label>
                <input name="house_name" class="form-control" type="text" id="edit-address-house-name" />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-area">Area/Street</label>
                <input name="area_street" class="form-control" type="text" id="edit-address-area" />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-locality">Locality</label>
                <input name="locality" class="form-control" type="text" id="edit-address-locality" />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-town">Town</label>
                <input name="town" class="form-control" type="text" id="edit-address-town" />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-state">State</label>
                <select class="form-select" name="state" id="edit-address-state">
                  <option value="india">Select State</option>
                  <option value="Andhra Pradesh">Andhra Pradesh</option>
                  <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                  <option value="Assam">Assam</option>
                  <option value="Bihar">Bihar</option>
                  <option value="Chhattisgarh">Chhattisgarh</option>
                  <option value="Goa">Goa</option>
                  <option value="Gujarat">Gujarat</option>
                  <option value="Haryana">Haryana</option>
                  <option value="Himachal Pradesh">Himachal Pradesh</option>
                  <option value="Jharkhand">Jharkhand</option>
                  <option value="Karnataka">Karnataka</option>
                  <option value="Kerala">Kerala</option>
                  <option value="Madhya Pradesh">Madhya Pradesh</option>
                  <option value="Maharashtra">Maharashtra</option>
                  <option value="Manipur">Manipur</option>
                  <option value="Meghalaya">Meghalaya</option>
                  <option value="Mizoram">Mizoram</option>
                  <option value="Nagaland">Nagaland</option>
                  <option value="Odisha">Odisha</option>
                  <option value="Punjab">Punjab</option>
                  <option value="Rajasthan">Rajasthan</option>
                  <option value="Sikkim">Sikkim</option>
                  <option value="Tamil Nadu">Tamil Nadu</option>
                  <option value="Telangana">Telangana</option>
                  <option value="Tripura">Tripura</option>
                  <option value="Uttar Pradesh">Uttar Pradesh</option>
                  <option value="Uttarakhand">Uttarakhand</option>
                  <option value="West Bengal">West Bengal</option>
                  <option value="Andaman and Nicobar Islands">Andaman and Nicobar Islands</option>
                  <option value="Chandigarh">Chandigarh</option>
                  <option value="Dadra and Nagar Haveli and Daman and Diu">Dadra and Nagar Haveli and Daman and Diu</option>
                  <option value="Lakshadweep">Lakshadweep</option>
                  <option value="Delhi">Delhi</option>
                  <option value="Puducherry">Puducherry</option>
                </select>
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-zip">ZIP code</label>
                <input name="zipcode" class="form-control" type="number" id="edit-address-zip" required />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-landmark">Landmark</label>
                <input name="landmark" class="form-control" type="text" id="edit-address-landmark" required />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-alternate-phone">Alternate Phone</label>
                <input name="alternate_phone" class="form-control" type="text" id="edit-alternate-phone" required />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-form-check">Address Type</label>
                <div class="form-check">
                  <input class="form-check-input" type="radio" value="HOME" name="address_type" id="edit-flexRadioDefault1" checked />
                  <small></small>
                  <label class="form-check-label" for="edit-flexRadioDefault1"> HOME </label>
                </div>
                <div class="form-check">
                  <input class="form-check-input" value="WORK" type="radio" name="address_type" id="edit-flexRadioDefault2" />
                  <small></small>
                  <label class="form-check-label" for="edit-flexRadioDefault2"> WORK </label>
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Save changes</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<%- include("../partials/user/footer") %>


<script>
  const editAddress = document.querySelector("#edit-address-modal");

const editAddressForm = document.querySelector("#edit-address-form");

editAddress.addEventListener("show.bs.modal", async (e) => {
  try {
    const editButton = e.relatedTarget;
    const addressId = editButton.getAttribute("data-address-id");

    const response = await fetch(`/address/edit-address/${addressId}`);
    if (!response.ok) {
      // If the response is not okay, throw an error
      throw new Error("Network response was not ok");
    }

    const data = await response.json();

    const address = data.address;
    console.log(address);

    document.getElementById("edit-address-fn").value = address.name;
    document.getElementById("edit-address-ph").value = address.phone;
    document.getElementById("edit-address-house-name").value =
      address.house_name;
    document.getElementById("edit-address-area").value = address.area_street;
    document.getElementById("edit-address-locality").value = address.locality;
    document.getElementById("edit-address-town").value = address.town;
    document.getElementById("edit-address-state").value = address.state;
    document.getElementById("edit-address-zip").value = address.zipcode;
    document.getElementById("edit-address-landmark").value = address.landmark;
    document.getElementById("edit-alternate-phone").value =
      address.alternate_phone;

    const addressTypeHome = document.getElementById("edit-flexRadioDefault1");
    const addressTypeWork = document.getElementById("edit-flexRadioDefault2");
    if (address.address_type === "HOME") {
      addressTypeHome.checked = true;
      addressTypeWork.checked = false;
    } else if (address.address_type === "WORK") {
      addressTypeHome.checked = false;
      addressTypeWork.checked = true;
    }

    editAddressForm.action = `/address/edit-address/${addressId}`;
    return;
  } catch (error) {
    // Use SweetAlert to display the error message
    Swal.fire({
      icon: "error",
      title: "Oops...",
      text: error.message || "Something went wrong!",
    });
  }
});

async function deleteAddress(addressId) {
  Swal.fire({
    title: "Are you sure?",
    text: "You won't be able to revert this!",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, delete it!",
  }).then(async (result) => {
    if (result.isConfirmed) {
      try {
        const response = await fetch(
          `/address/delete-address/${addressId}`,
          {
            method: "DELETE",
          }
        );

        if (!response.ok) {
          throw new Error("Network response was not ok");
        }

        Swal.fire("Deleted!", "Your address has been deleted.", "success").then(
          () => location.reload()
        );
        // Optionally, refresh the page or remove the address from the DOM here
      } catch (error) {
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "Something went wrong!" + error,
        });
      }
    }
  });
}


const form = document.querySelector("#add-address");

const checkName = () => {
  const nameEl = document.querySelector("#address-fn");
  let valid = false;
  const name = nameEl.value.trim();

  if (!isRequired(name)) {
    showError(nameEl, "Full name cannot be blank.");
  } else if (!/^[a-zA-Z\s]+$/.test(name)) {
    showError(nameEl, "Full name should not contain numbers.");
  } else {
    showSuccess(nameEl);
    valid = true;
  }
  return valid;
};

const checkPhone = () => {
  const phoneEl = document.querySelector("#address-ph");
  let valid = false;
  const phone = phoneEl.value.trim();

  if (!isRequired(phone)) {
    showError(phoneEl, "Phone number cannot be blank.");
  } else if (!isIndianPhoneNumber(phone)) {
    showError(phoneEl, "Phone number is not valid.");
  } else {
    showSuccess(phoneEl);
    valid = true;
  }
  return valid;
};

const checkHouseName = () => {
  const houseNameEl = document.querySelector("#address-house-name");
  let valid = false;
  const houseName = houseNameEl.value.trim();

  if (!isRequired(houseName)) {
    showError(houseNameEl, "House name cannot be blank.");
  } else {
    showSuccess(houseNameEl);
    valid = true;
  }
  return valid;
};

const checkAreaStreet = () => {
  const areaStreetEl = document.querySelector("#address-area");
  let valid = false;
  const areaStreet = areaStreetEl.value.trim();

  if (!isRequired(areaStreet)) {
    showError(areaStreetEl, "Area/Street cannot be blank.");
  } else {
    showSuccess(areaStreetEl);
    valid = true;
  }
  return valid;
};

const checkLocality = () => {
  const localityEl = document.querySelector("#address-locality");
  let valid = false;
  const locality = localityEl.value.trim();

  if (!isRequired(locality)) {
    showError(localityEl, "Locality cannot be blank.");
  } else {
    showSuccess(localityEl);
    valid = true;
  }
  return valid;
};

const checkTown = () => {
  const townEl = document.querySelector("#address-town");
  let valid = false;
  const town = townEl.value.trim();

  if (!isRequired(town)) {
    showError(townEl, "Town cannot be blank.");
  } else {
    showSuccess(townEl);
    valid = true;
  }
  return valid;
};

const checkState = () => {
  const stateEl = document.querySelector("#address-state");
  let valid = false;
  const state = stateEl.value;

  if (state === "india") {
    showError(stateEl, "Please select your state.");
  } else {
    showSuccess(stateEl);
    valid = true;
  }
  return valid;
};

const checkZipcode = () => {
  const zipcodeEl = document.querySelector("#address-zip");
  let valid = false;
  const zipcode = zipcodeEl.value;

  if (!isRequired(zipcode)) {
    showError(zipcodeEl, "ZIP code cannot be blank.");
  } else {
    showSuccess(zipcodeEl);
    valid = true;
  }
  return valid;
};

const checkLandmark = () => {
  const landmarkEl = document.querySelector("#address-landmark");
  let valid = false;
  const landmark = landmarkEl.value.trim();

  if (!isRequired(landmark)) {
    showError(landmarkEl, "Landmark cannot be blank.");
  } else {
    showSuccess(landmarkEl);
    valid = true;
  }
  return valid;
};

const checkAlternatePhone = () => {
  const alternatePhoneEl = document.querySelector("#alternate-phone");
  let valid = false;
  const alternatePhone = alternatePhoneEl.value.trim();

  if (!isRequired(alternatePhone)) {
    showError(alternatePhoneEl, "Alternate phone number cannot be blank.");
  } else if (!isIndianPhoneNumber(alternatePhone)) {
    showError(alternatePhoneEl, "Alternate phone number is not valid.");
  } else {
    showSuccess(alternatePhoneEl);
    valid = true;
  }
  return valid;
};

const checkAddressType = () => {
  const addressTypeEl = document.querySelector(
    'input[name="address_type"]:checked'
  );
  let valid = false;

  if (!addressTypeEl) {
    showError(addressTypeEl, "Please select an address type.");
  } else {
    showSuccess(addressTypeEl);
    valid = true;
  }
  return valid;
};

const isIndianPhoneNumber = (phone) => {
  const re = /^\d{10}$/;
  return re.test(phone);
};

const isRequired = (value) => (value === "" ? false : true);

const showError = (input, message) => {
  const formField = input.parentElement;
  formField.classList.remove("success", "is-valid");
  input.classList.remove("success", "is-valid");
  formField.classList.add("error", "is-invalid");
  input.classList.add("error", "is-invalid");
  const error = formField.querySelector("small");
  error.textContent = message;
};

const showSuccess = (input) => {
  const formField = input.parentElement;
  formField.classList.remove("error", "is-invalid");
  input.classList.remove("error", "is-invalid");
  formField.classList.add("success", "is-valid");
  input.classList.add("success", "is-valid");
  const error = formField.querySelector("small");
  if (error) {
    error.textContent = "";
  }
};



form.addEventListener("submit", function (e) {
  e.preventDefault();

  let isNameValid = checkName(),
    isPhoneValid = checkPhone(),
    isHouseNameValid = checkHouseName(),
    isAreaStreetValid = checkAreaStreet(),
    isLocalityValid = checkLocality(),
    isTownValid = checkTown(),
    isStateValid = checkState(),
    isZipcodeValid = checkZipcode(),
    isLandmarkValid = checkLandmark(),
    isAlternatePhoneValid = checkAlternatePhone(),
    isAddressTypeValid = checkAddressType();

  let isFormValid =
    isNameValid &&
    isPhoneValid &&
    isHouseNameValid &&
    isAreaStreetValid &&
    isLocalityValid &&
    isTownValid &&
    isStateValid &&
    isZipcodeValid &&
    isLandmarkValid &&
    isAlternatePhoneValid &&
    isAddressTypeValid;

  if (isFormValid) {
    form.submit();
  }
});

const debounce = (fn, delay = 500) => {
  let timeoutId;
  return (...args) => {
    // cancel the previous timer
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    // setup a new timer
    timeoutId = setTimeout(() => {
      fn.apply(null, args);
    }, delay);
  };
};

form.addEventListener(
  "input",
  debounce(function (e) {
    switch (e.target.id) {
      case "address-fn": // Assuming this is the full name field
        checkName();
        break;
      case "address-ln": // Assuming this is the phone number field
        checkPhone();
        break;
      case "address-house-name": // Assuming this is the house name field
        checkHouseName();
        break;
      case "address-area": // Assuming this is the area/street field
        checkAreaStreet();
        break;
      case "address-locality": // Assuming this is the locality field
        checkLocality();
        break;
      case "address-town": // Assuming this is the town field
        checkTown();
        break;
      case "address-state": // Assuming this is the state field
        checkState();
        break;
      case "address-zip": // Assuming this is the ZIP code field
        checkZipcode();
        break;
      case "address-landmark": // Assuming this is the landmark field
        checkLandmark();
        break;
      case "alternate-phone": // Assuming this is the alternate phone number field
        checkAlternatePhone();
        break;
      case "address_type": // Assuming this is the address type field
        checkAddressType();
        break;
      // Add more cases as needed for other fields in your form
    }
  })
);

</script>

<script>
 const editForm = document.querySelector("#edit-address-form");

const checkEditName = () => {
  const nameEl = document.querySelector("#edit-address-fn");
  let valid = false;
  const name = nameEl.value.trim();

  if (!isRequired(name)) {
    showError(nameEl, "Full name cannot be blank.");
  } else if (!/^[a-zA-Z\s]+$/.test(name)) {
    showError(nameEl, "Full name should not contain numbers.");
  } else {
    showSuccess(nameEl);
    valid = true;
  }
  return valid;
};

const checkEditPhone = () => {
  const phoneEl = document.querySelector("#edit-address-ph");
  let valid = false;
  const phone = phoneEl.value.trim();

  if (!isRequired(phone)) {
    showError(phoneEl, "Phone number cannot be blank.");
  } else if (!isIndianPhoneNumber(phone)) {
    showError(phoneEl, "Phone number is not valid.");
  } else {
    showSuccess(phoneEl);
    valid = true;
  }
  return valid;
};

const checkEditHouseName = () => {
  const houseNameEl = document.querySelector("#edit-address-house-name");
  let valid = false;
  const houseName = houseNameEl.value.trim();

  if (!isRequired(houseName)) {
    showError(houseNameEl, "House name cannot be blank.");
  } else {
    showSuccess(houseNameEl);
    valid = true;
  }
  return valid;
};

const checkEditAreaStreet = () => {
  const areaStreetEl = document.querySelector("#edit-address-area");
  let valid = false;
  const areaStreet = areaStreetEl.value.trim();

  if (!isRequired(areaStreet)) {
    showError(areaStreetEl, "Area/Street cannot be blank.");
  } else {
    showSuccess(areaStreetEl);
    valid = true;
  }
  return valid;
};

const checkEditLocality = () => {
  const localityEl = document.querySelector("#edit-address-locality");
  let valid = false;
  const locality = localityEl.value.trim();

  if (!isRequired(locality)) {
    showError(localityEl, "Locality cannot be blank.");
  } else {
    showSuccess(localityEl);
    valid = true;
  }
  return valid;
};

const checkEditTown = () => {
  const townEl = document.querySelector("#edit-address-town");
  let valid = false;
  const town = townEl.value.trim();

  if (!isRequired(town)) {
    showError(townEl, "Town cannot be blank.");
  } else {
    showSuccess(townEl);
    valid = true;
  }
  return valid;
};

const checkEditState = () => {
  const stateEl = document.querySelector("#edit-address-state");
  let valid = false;
  const state = stateEl.value;

  if (state === "india") {
    showError(stateEl, "Please select your state.");
  } else {
    showSuccess(stateEl);
    valid = true;
  }
  return valid;
};

const checkEditZipcode = () => {
  const zipcodeEl = document.querySelector("#edit-address-zip");
  let valid = false;
  const zipcode = zipcodeEl.value;

  if (!isRequired(zipcode)) {
    showError(zipcodeEl, "ZIP code cannot be blank.");
  } else {
    showSuccess(zipcodeEl);
    valid = true;
  }
  return valid;
};

const checkEditLandmark = () => {
  const landmarkEl = document.querySelector("#edit-address-landmark");
  let valid = false;
  const landmark = landmarkEl.value.trim();

  if (!isRequired(landmark)) {
    showError(landmarkEl, "Landmark cannot be blank.");
  } else {
    showSuccess(landmarkEl);
    valid = true;
  }
  return valid;
};

const checkEditAlternatePhone = () => {
  const alternatePhoneEl = document.querySelector("#edit-alternate-phone");
  let valid = false;
  const alternatePhone = alternatePhoneEl.value.trim();

  if (!isRequired(alternatePhone)) {
    showError(alternatePhoneEl, "Alternate phone number cannot be blank.");
  } else if (!isIndianPhoneNumber(alternatePhone)) {
    showError(alternatePhoneEl, "Alternate phone number is not valid.");
  } else {
    showSuccess(alternatePhoneEl);
    valid = true;
  }
  return valid;
};

const checkEditAddressType = () => {
  const addressTypeEl = document.querySelector(
    'input[name="address_type"]:checked'
  );
  let valid = false;

  if (!addressTypeEl) {
    showError(addressTypeEl, "Please select an address type.");
  } else {
    showSuccess(addressTypeEl);
    valid = true;
  }
  return valid;
};

editForm.addEventListener("submit", function (e) {
  e.preventDefault();

  console.log(e);
  const formData = new FormData(editForm);

  // Log the form data
  for (let [key, value] of formData.entries()) {
    console.log(`${key}: ${value}`);
  }

  let isNameValid = checkEditName(),
    isPhoneValid = checkEditPhone(),
    isHouseNameValid = checkEditHouseName(),
    isAreaStreetValid = checkEditAreaStreet(),
    isLocalityValid = checkEditLocality(),
    isTownValid = checkEditTown(),
    isStateValid = checkEditState(),
    isZipcodeValid = checkEditZipcode(),
    isLandmarkValid = checkEditLandmark(),
    isAlternatePhoneValid = checkEditAlternatePhone(),
    isAddressTypeValid = checkEditAddressType();

  let isFormValid =
    isNameValid &&
    isPhoneValid &&
    isHouseNameValid &&
    isAreaStreetValid &&
    isLocalityValid &&
    isTownValid &&
    isStateValid &&
    isZipcodeValid &&
    isLandmarkValid &&
    isAlternatePhoneValid &&
    isAddressTypeValid;

  if (isFormValid) {
    editForm.submit();
  }
});



editForm.addEventListener(
  "input",
  debounce((e) => {
    switch (e.target.id) {
      case "edit-address-fn": // Full name
        checkEditName();
        break;
      case "edit-address-ln": // Phone
        checkEditPhone();
        break;
      case "edit-address-house-name": // House Name
        checkEditHouseName();
        break;
      case "edit-address-area": // Area/Street
        checkEditAreaStreet();
        break;
      case "edit-address-locality": // Locality
        checkEditLocality();
        break;
      case "edit-address-town": // Town
        checkEditTown();
        break;
      case "edit-address-state": // State
        checkEditState();
        break;
      case "edit-address-zip": // ZIP code
        checkEditZipcode();
        break;
      case "edit-address-landmark": // Landmark
        checkEditLandmark();
        break;
      case "edit-alternate-phone": // Alternate Phone
        checkEditAlternatePhone();
        break;
      // Assuming there's a function to check the address type, if needed
      case "edit-form-check": // Address Type
        checkAddressType();
        break;
    }
  })
);

</script>

