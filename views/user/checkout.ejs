<!-- checkout.ejs -->

<%- include('../partials/user/header') %>

<style>
 /* General Container Styles */
.userProfileMain {
  width: 90%;
  margin: 0 auto;
  padding: 20px;
  background-color: #000000;
  border-radius: 10px;
}

.userProfileH1 {
  text-align: center;
  font-family: "Baloo", cursive;
  color: white;
  font-size: 6vw;
}

.container {
  padding: 20px 0;
}

/* Checkout Order Summary */
.list-group-item {
  background-color: #ffffff;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 10px;
}

.list-group-item h6 {
  font-size: 1.2rem;
  color: #333;
}

.list-group-item .fs-5 {
  font-size: 1rem;
}

.list-group-item small {
  font-size: 0.9rem;
  color: #777;
}

.text-body-secondary {
  color: #555;
}

/* Grand Total */
.list-group-item:last-child {
  font-weight: bold;
  background-color: #f9f9f9;
}

/* Coupon Section */
.coupon-card {
  background-color: #e7f1e7;
  border: 1px solid #c3d9c3;
  padding: 10px;
  border-radius: 8px;
  margin-bottom: 10px;
}

.coupon-card h4 {
  color: #005500;
  margin-bottom: 10px;
}

.coupon-card p {
  margin: 0;
}

#applyCoupon .input-group input {
  border-radius: 0;
}

#applyCoupon .btn {
  border-radius: 0;
}

/* Accordion Styling for Available Coupons */
.accordion-button {
  background-color: #f1f1f1;
  color: green;
}

.accordion-item {
  border: none;
}

/* Address Table Styling */
.table-responsive {
  border-radius: 10px;
}

.table thead th {
  background-color: #f1f1f1;
  font-weight: bold;
}

.table td {
  vertical-align: middle;
}

.btn-group .btn {
  margin-right: 5px;
}

/* Payment Section */
.block-header {
  background-color: #f8f8f8;
  padding: 10px;
  border-radius: 5px;
  font-weight: bold;
}

.block-body {
  padding: 15px;
}

.accordion-link {
  font-size: 1.1rem;
  color: #333;
}

.accordion-link:hover {
  color: #007bff;
}

/* Buttons */
.btn-outline-success {
  background-color: #fff;
  color: #28a745;
  border-color: #28a745;
}

.btn-outline-success:hover {
  background-color: #28a745;
  color: #fff;
}

.btn-danger {
  color: #fff;
  background-color: #dc3545;
  border-color: #dc3545;
}

.btn-danger:hover {
  background-color: #c82333;
  border-color: #bd2130;
}

/* Tooltip */
.tooltip-inner {
  background-color: #000;
  color: #fff;
  font-size: 0.9rem;
}

.tooltip-arrow {
  display: none;
}

</style>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script
  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
  crossorigin="anonymous"
></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

<!-- Checkout Header -->
<section>
  <div class="pb-5 text-center">
    <div class="card userProfileMain" style="background-color: #000000;">
      <h1 class="userProfileH1">Checkout</h1>
    </div>
  </div>
</section>

<!-- Checkout Section-->
<section>
  <div class="container mb-7">
    <div class="row g-5">


      <!-- Checkout Pricing Panel -->
      <div class="col-md-5 col-lg-4 order-md-last" id="orderDetailsReload">
        <h4 class="block-header bg-secondary-light d-flex justify-content-between align-items-center mb-3">
          <span class="badge bg-secondary rounded-pill d-flex float-end"><%- cartCount %></span>
        </h4>
        <ul class="list-group mb-3 text-capitalize">
          <% cartList.forEach(item => { %>
          <li class="list-group-item d-flex justify-content-between lh-sm">
            <div class="fs-5">
              <h6 class="my-0"><%- item.productId.name %></h6>
              <small class="text-body-secondary">Size: <%- item.sizeId.value %></small> <br />
              <small class="text-body-secondary">Color: <%- item.colorId.name %></small> <br />
              <small class="text-body-secondary">Quantity: <%- item.quantity %></small>
            </div>
            <div class="d-flex flex-column align-items-end lead fs-6">
              <span class="fw-semibold text-body-secondary">Price per item: <span class="text-muted">₹<%- item.price %></span></span>
              <span class="text-body-secondary fw-semibold">Total: ₹<%- item.itemTotal %></span>
            </div>
          </li>
          <% }) %>
          <li class="list-group-item d-flex justify-content-between">
            <span>Grand Total (INR)</span>
            <strong>₹<span id="grandTotal"><%- payable %></span></strong>
          </li>

          <!-- Applied Coupon Section -->
          <li class="list-group-item d-flex justify-content-between bg-body-tertiary d-none" id="appliedCoupon">
            <div class="text-success">
              <h6 class="my-0">Coupon code</h6>
              <small class="text-uppercase" id="coupon"></small>
            </div>
            <span class="text-success" id="discountAmount">−₹</span>
          </li>

          <% if (typeof userCart.coupon !== 'undefined' && userCart.coupon) { %>
          <li class="list-group-item d-flex justify-content-between bg-body-tertiary" id="appliedCoupon">
            <div class="text-success">
              <h6 class="my-0">Coupon code</h6>
              <small class="text-uppercase" id="coupon"><%- userCart.coupon.code %></small>
            </div>
            <span class="text-success" id="discountAmount">−₹<%- userCart.couponDiscount.toFixed(2) %></span>
          </li>
          <% } %>

          <!-- Apply Coupon Form -->
          <form class="card p-2" id="applyCoupon">
            <label class="form-label text-dark" for="couponCode">Apply Coupon Code</label>
            <fieldset>
              <div class="input-group">
                <input <% if (typeof userCart.coupon !== 'undefined' && userCart.coupon) { %> disabled="disabled" 
                <% } %> id="couponCode" name="code" type="text" class="form-control text-uppercase" placeholder="Coupon code" 
                <% if (typeof userCart.coupon !== 'undefined' && userCart.coupon) { %> value="<%- userCart.coupon.code %>" <% } %>> 
                <button <% if (typeof userCart.coupon !== 'undefined' && userCart.coupon) { %> disabled="disabled" <% } %> 
                type="submit" class="btn btn-outline-primary <%- (typeof userCart.coupon !== 'undefined' && userCart.coupon) ? 'd-none' : '' %>"> Apply

                <button
                  onclick="removeCoupon()"
                  type="button"
                  class="btn btn-outline-warning <%- (typeof userCart.coupon !== 'undefined' && userCart.coupon) ? '' : 'd-none' %>"
                >
                  Remove Coupon
                </button>
              </div>
            </fieldset>
          </form>

          <!-- Available Coupons Accordion -->
          <div id="couponsAccordion" class="text-capitalize accordion mt-4">
            <h6 class="mb-3 fs-5">Available Coupons</h6>

            <% if (typeof coupons !== 'undefined' && coupons.length > 0) { %> <% coupons.forEach(function(coupon, index) { %>
            <div class="accordion-item">
              <h2 class="accordion-header" id="heading<%= index %>">
                <button
                  class="accordion-button collapsed text-uppercase text-success"
                  type="button"
                  data-bs-toggle="collapse"
                  data-bs-target="#collapse<%= index %>"
                  aria-expanded="false"
                  aria-controls="collapse<%= index %>"
                >
                  <%= coupon.code %>
                </button>
              </h2>
              <div
                id="collapse<%= index %>"
                class="accordion-collapse collapse"
                aria-labelledby="heading<%= index %>"
                data-bs-parent="#couponsAccordion"
              >
                <div class="accordion-body">
                  <!-- Coupon Card -->
                  <div class="coupon-card">
                    <h4 class="coupon-title"><%= coupon.Description %></h4>
                    <p>Discount: <%= coupon.rateOfDiscount + '%' %></p>
                    <p>Min Order Amount: <%= coupon.minPurchaseAmount %></p>
                    <p>Expiry Date: <%= coupon.expiringDate.toDateString() %></p>
                    <button type="button" onclick="copyCode('<%= coupon.code %>')" class="btn btn-primary btn-sm">Copy Code</button>
                  </div>
                </div>
              </div>
            </div>
            <% }); %> <% } else { %>
            <p class="lead text-warning">No Coupons Available</p>
            <% } %>
          </div>
        </ul>
      </div>



      
      <div class="col-md-7 col-lg-8">
        <div class="row">
          <div class="col-12">
            <div class="block-header bg-secondary-light"><strong class="text-uppercase">Billing & Shipping Address</strong></div>
            <br />
          </div>
        </div>
        <form class="needs-validation" id="orderForm">
          <div class="row g-3">
            <section class="col-lg-12">
              <% if (address.length > 0) { %>
              <!-- Addresses list-->
              <div class="table table-responsive table-striped mt-0">
                <table class="table table-hover mb-0">
                  <thead>
                    <tr class="align-middle fs-5">
                      <th>Select Billing Address</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% address.forEach((item,index) => { %>
                    <tr class="align-middle fs-5">
                      <td class="py-3 align-middle text-capitalize">
                        <div class="d-flex align-items-center">
                          <input autocomplete="false" required class="mx-2" type="radio" <% if (index === 0) { %> checked <% } %> id="address-<%=
                          index %>" name="address" value="<%= item._id %>">
                          <label class="" for="address-<%= index %>">
                            <%- item.name.toLowerCase() + ', ' + item.houseName + ', ' + item.town + ', ' + item.state + ', PIN: ' + item.zipcode + 
                            ',PH:' + item.phone %>
                          </label>
                        </div>
                      </td>
                      <td class="py-3 btn-group align-middle align-items-center">
                        <div class="">
                          <button
                            type="button"
                            class="btn btn-sm btn-outline-warning"
                            id="edit-button"
                            data-address-id="<%- item._id %>"
                            href="#edit-address-modal"
                            data-bs-toggle="modal"
                          >
                            <i class="bi bi-pencil fs-6"></i>
                          </button>
                        </div>
                        <button
                          type="button"
                          class="btn btn-sm btn-danger"
                          id="deleteAddressButton"
                          data-bs-toggle="tooltip"
                          title="Remove"
                          onclick="deleteAddress('<%- item._id %>')"
                        >
                          <i class="bi bi-trash fs-6"></i>
                        </button>
                      </td>
                    </tr>
                    <% }) %>
                  </tbody>
                </table>
              </div>
              <% } else { %>
              <!-- Toolbar-->
              <div class="d-none d-lg-flex justify-content-between align-items-center pt-lg-3 pb-3">
                <h6 class="fs-base mb-0">Add Address</h6>
              </div>
              <% } %>

              <div class="text-sm-start pt-4">
                <a class="btn btn-outline-success" href="#add-address" data-bs-toggle="modal"> Add new address </a>
              </div>
            </section>
          </div>

          <hr class="my-4" />

          <div class="row">
            <div class="col-12">
              <div class="block-header bg-secondary-light"><strong class="text-uppercase">Payment</strong></div>
              <br />
            </div>
          </div>

          <div class="mb-5">
            <div id="accordion" role="tablist">
              <div class="block mb-3">
                <div class="block-header" id="headingThree" role="tab">
                  <strong
                    ><a
                      class="accordion-link collapsed"
                      data-bs-toggle="collapse"
                      href="#collapseThree"
                      aria-expanded="false"
                      aria-controls="collapseThree"
                      >Offline</a
                    ></strong
                  >
                </div>
                <div class="collapse show" id="collapseThree" role="tabpanel" aria-labelledby="headingThree" data-parent="#accordion">
                  <div class="block-body py-5 d-flex align-items-center">
                    <input type="radio" name="paymentMethod" id="payment-method-1" value="COD" <% if (isCOD) { %> checked <% } else { %> disabled <%
                    } %>>
                    <label class="ms-3" for="payment-method-1">
                      <strong class="d-block text-uppercase mb-2"> Pay on delivery</strong>
                      <% if (!isCOD) { %>
                      <span class="text-muted text-danger text-sm">Pay on delivery is not available for orders above ₹1000.</span>
                      <% } %>
                    </label>
                  </div>
                </div>
              </div>
              <div class="block mb-3">
                <div class="block-header" id="headingTwo" role="tab">
                  <strong
                    ><a
                      class="accordion-link collapsed"
                      data-bs-toggle="collapse"
                      href="#collapseTwo"
                      aria-expanded="false"
                      aria-controls="collapseTwo"
                      >Online</a
                    ></strong
                  >
                </div>
                <div class="collapse show" id="collapseTwo" role="tabpanel" aria-labelledby="headingTwo" data-parent="#accordion">
                  <% wallet.forEach(item => { %> <% if (isInsufficient == true) { %>

                  <div class="block-body pt-5 d-flex align-items-center">
                    <input type="radio" name="paymentMethod" id="payment-method-2" value="Wallet" disabled />
                    <label class="ms-3" for="payment-method-2"
                      ><strong class="d-block text-uppercase mb-2"> Pay using Wallet</strong>
                      <span class="text-muted fw-semibold text-sm">Your Wallet Balance: </span
                      ><span class="text-muted text-success fw-semibold text-sm">₹<%= item.balance %> </span>
                      <br />
                      <span class="text-muted text-danger text-sm">Your wallet has insufficient balance.</span>
                    </label>
                  </div>
                  <% }else{ %>
                  <div class="block-body pt-5 d-flex align-items-center">
                    <input type="radio" name="paymentMethod" id="payment-method-2" value="Wallet" />
                    <label class="ms-3" for="payment-method-2"
                      ><strong class="d-block text-uppercase mb-2"> Pay using Wallet</strong>
                      <span class="text-muted fw-semibold text-sm">Your Wallet Balance: </span
                      ><span class="text-muted text-success fw-semibold text-sm">₹<%= item.balance %> </span>
                      <br />
                    </label>
                  </div>
                  <% } %> <% }) %>
                  <div class="block-body pt-2 d-flex align-items-center">
                    <input type="radio" name="paymentMethod" id="payment-method-3" value="Online" />
                    <label class="ms-3" for="payment-method-3">
                      <strong class="d-block text-uppercase mb-1"> Pay with Razorpay</strong>
                      <span class="text-muted text-sm">Pay upto 2 lakh using Razorpay</span>
                      <br />
                      <span class="text-muted text-warning text-sm">Will reduce your wallet balance.</span>
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <button id="submitOrder" class="btn btn-primary btn-lg mb-5" type="submit">Place Order</button>
        </form>
      </div>
    </div>
  </div>
</section>

<section>
  <!-- Add New Address Modal-->
  <form class="needs-validation modal fade" action="/address/add-address" method="POST" id="add-address" tabindex="-1" novalidate>
    <div class="modal-dialog modal-lg">
      <div class="modal-content p-4">
        <div class="modal-header">
          <h5 class="modal-title">Add a new address</h5>
          <button class="btn-close" type="button" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="row gx-4 gy-3">
            <div class="col-sm-6 form-group">
              <label class="form-label" for="address-fn">Full name</label>
              <input name="name" class="form-control" type="text" id="address-fn" required />
              <small></small>
            </div>
            <div class="col-sm-6 form-group">
              <label class="form-label" for="address-ph">Phone</label>
              <input name="phone" class="form-control" type="tel" id="address-ph" required />
              <small></small>
            </div>
            <div class="col-sm-6 form-group">
              <label class="form-label" for="address-house-name">House Name</label>
              <input name="houseName" class="form-control" type="text" id="address-house-name" />
              <small></small>
            </div>
            <div class="col-sm-6 form-group">
              <label class="form-label" for="address-area">Area/Street</label>
              <input name="areaStreet" class="form-control" type="text" id="address-area" />
              <small></small>
            </div>
            <div class="col-sm-6 form-group">
              <label class="form-label" for="address-locality">locality</label>
              <input name="locality" class="form-control" type="text" id="address-locality" />
              <small></small>
            </div>
            <div class="col-sm-6 form-group">
              <label class="form-label" for="address-town">Town</label>
              <input name="town" class="form-control" type="text" id="address-town" />
              <small></small>
            </div>
            <div class="col-sm-6 form-group">
              <label class="form-label" for="address-state">State</label>
              <select class="form-select" name="state" id="address-state">
                <option value="india">Select State</option>
                <option value="Andhra Pradesh">Andhra Pradesh</option>
                <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                <option value="Assam">Assam</option>
                <option value="Bihar">Bihar</option>
                <option value="Chhattisgarh">Chhattisgarh</option>
                <option value="Goa">Goa</option>
                <option value="Gujarat">Gujarat</option>
                <option value="Haryana">Haryana</option>
                <option value="Himachal Pradesh">Himachal Pradesh</option>
                <option value="Jharkhand">Jharkhand</option>
                <option value="Karnataka">Karnataka</option>
                <option value="Kerala">Kerala</option>
                <option value="Madhya Pradesh">Madhya Pradesh</option>
                <option value="Maharashtra">Maharashtra</option>
                <option value="Manipur">Manipur</option>
                <option value="Meghalaya">Meghalaya</option>
                <option value="Mizoram">Mizoram</option>
                <option value="Nagaland">Nagaland</option>
                <option value="Odisha">Odisha</option>
                <option value="Punjab">Punjab</option>
                <option value="Rajasthan">Rajasthan</option>
                <option value="Sikkim">Sikkim</option>
                <option value="Tamil Nadu">Tamil Nadu</option>
                <option value="Telangana">Telangana</option>
                <option value="Tripura">Tripura</option>
                <option value="Uttar Pradesh">Uttar Pradesh</option>
                <option value="Uttarakhand">Uttarakhand</option>
                <option value="West Bengal">West Bengal</option>
                <option value="Andaman and Nicobar Islands">Andaman and Nicobar Islands</option>
                <option value="Chandigarh">Chandigarh</option>
                <option value="Dadra and Nagar Haveli and Daman and Diu">Dadra and Nagar Haveli and Daman and Diu</option>
                <option value="Lakshadweep">Lakshadweep</option>
                <option value="Delhi">Delhi</option>
                <option value="Puducherry">Puducherry</option>
              </select>
              <small></small>
            </div>

            <div class="col-sm-6 form-group">
              <label class="form-label" for="address-zip">ZIP code</label>
              <input name="zipcode" class="form-control" type="number" id="address-zip" required />
              <small></small>
            </div>
            <div class="col-sm-6 form-group">
              <label class="form-label" for="address-landmark">Landmark</label>
              <input name="landmark" class="form-control" type="text" id="address-landmark" required />
              <small></small>
            </div>
            <div class="col-sm-6 form-group">
              <label class="form-label" for="alternate-phone">Alternate Phone</label>
              <input name="alternativePhone" class="form-control" type="tel" id="alternate-phone" required />
              <small></small>
              <input name="customerId" type="hidden" id="customerId" value="<%- user._id%>" class="form-control" />
            </div>
            <div class="col-sm-6 form-group">
              <label class="form-label" for="form-check">Address Type</label>
              <div class="form-check">
                <input class="form-check-input" type="radio" value="HOME" name="addressType" id="flexRadioDefault1" checked />
                <small></small>
                <label class="form-check-label" for="flexRadioDefault1"> HOME </label>
              </div>
              <div class="form-check">
                <input class="form-check-input" value="WORK" type="radio" name="addressType" id="flexRadioDefault2" />
                <small></small>
                <label class="form-check-label" for="flexRadioDefault2"> WORK </label>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Close</button>
          <button class="btn btn-outline-success btn-shadow" type="submit">Add address</button>
        </div>
      </div>
    </div>
  </form>

  <!-- Edit Address Modal -->
  <div class="modal fade" id="edit-address-modal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content p-4">
        <div class="modal-header">
          <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form method="POST" id="edit-address-form" action="/address" novalidate>
          <div class="modal-body">
            <div class="row gx-4 gy-3">
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-fn">Full name</label>
                <input name="name" class="form-control" type="text" id="edit-address-fn" required />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-ph">Phone</label>
                <input name="phone" class="form-control" type="text" id="edit-address-ph" required />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-house-name">House Name</label>
                <input name="houseName" class="form-control" type="text" id="edit-address-house-name" />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-area">Area/Street</label>
                <input name="areaStreet" class="form-control" type="text" id="edit-address-area" />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-locality">Locality</label>
                <input name="locality" class="form-control" type="text" id="edit-address-locality" />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-town">Town</label>
                <input name="town" class="form-control" type="text" id="edit-address-town" />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-state">State</label>
                <select class="form-select" name="state" id="edit-address-state">
                  <option value="india">Select State</option>
                  <option value="Andhra Pradesh">Andhra Pradesh</option>
                  <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                  <option value="Assam">Assam</option>
                  <option value="Bihar">Bihar</option>
                  <option value="Chhattisgarh">Chhattisgarh</option>
                  <option value="Goa">Goa</option>
                  <option value="Gujarat">Gujarat</option>
                  <option value="Haryana">Haryana</option>
                  <option value="Himachal Pradesh">Himachal Pradesh</option>
                  <option value="Jharkhand">Jharkhand</option>
                  <option value="Karnataka">Karnataka</option>
                  <option value="Kerala">Kerala</option>
                  <option value="Madhya Pradesh">Madhya Pradesh</option>
                  <option value="Maharashtra">Maharashtra</option>
                  <option value="Manipur">Manipur</option>
                  <option value="Meghalaya">Meghalaya</option>
                  <option value="Mizoram">Mizoram</option>
                  <option value="Nagaland">Nagaland</option>
                  <option value="Odisha">Odisha</option>
                  <option value="Punjab">Punjab</option>
                  <option value="Rajasthan">Rajasthan</option>
                  <option value="Sikkim">Sikkim</option>
                  <option value="Tamil Nadu">Tamil Nadu</option>
                  <option value="Telangana">Telangana</option>
                  <option value="Tripura">Tripura</option>
                  <option value="Uttar Pradesh">Uttar Pradesh</option>
                  <option value="Uttarakhand">Uttarakhand</option>
                  <option value="West Bengal">West Bengal</option>
                  <option value="Andaman and Nicobar Islands">Andaman and Nicobar Islands</option>
                  <option value="Chandigarh">Chandigarh</option>
                  <option value="Dadra and Nagar Haveli and Daman and Diu">Dadra and Nagar Haveli and Daman and Diu</option>
                  <option value="Lakshadweep">Lakshadweep</option>
                  <option value="Delhi">Delhi</option>
                  <option value="Puducherry">Puducherry</option>
                </select>
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-zip">ZIP code</label>
                <input name="zipcode" class="form-control" type="number" id="edit-address-zip" required />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-address-landmark">Landmark</label>
                <input name="landmark" class="form-control" type="text" id="edit-address-landmark" required />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-alternate-phone">Alternate Phone</label>
                <input name="alternativePhone" class="form-control" type="text" id="edit-alternate-phone" required />
                <small></small>
              </div>
              <div class="col-sm-6 form-group">
                <label class="form-label" for="edit-form-check">Address Type</label>
                <div class="form-check">
                  <input class="form-check-input" type="radio" value="HOME" name="addressType" id="edit-flexRadioDefault1" checked />
                  <small></small>
                  <label class="form-check-label" for="edit-flexRadioDefault1"> HOME </label>
                </div>
                <div class="form-check">
                  <input class="form-check-input" value="WORK" type="radio" name="addressType" id="edit-flexRadioDefault2" />
                  <small></small>
                  <label class="form-check-label" for="edit-flexRadioDefault2"> WORK </label>
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Save changes</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<%- include('../../views/partials/user/footer') %>
<script defer src="/public/js/user/checkout.js"></script>

<script>
  const copyCode = async (code) => {
    await navigator.clipboard.writeText(code);
    Swal.fire({
      icon: "success",
      title: "Coupon Code Copied!",
    });
  };


  document.addEventListener("DOMContentLoaded", function () {
    document.querySelector("#applyCoupon").addEventListener("submit", async function (event) {
      event.preventDefault();

      const couponCodeInput = document.getElementById("couponCode");
      const couponCodeVal = couponCodeInput.value.trim().toLowerCase();

      if (!couponCodeVal) {
        Swal.fire("Error", "Please enter a valid coupon code.", "error");
        return;
      }

      Swal.fire({
        title: "Are you sure?",
        text: `Do you want to apply this coupon? ${couponCodeVal.toUpperCase()}`,
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, apply it!",
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            Swal.fire({
              icon: "info",
              title: "Applying Coupon",
              html: "Please wait while we verify and apply the coupon...",
              allowOutsideClick: false,
              didOpen: () => {
                Swal.showLoading();
              },
            });

            const response = await fetch("/checkout/verify-coupon", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ code: couponCodeVal }),
            });

            Swal.close();

            if (response.ok) {
              const data = await response.json();
              const { discountAmount, coupon } = data;

              // Update DOM elements
              document.getElementById("appliedCoupon").classList.remove("d-none");
              document.getElementById("coupon").innerText = coupon.code;
              document.getElementById("discountAmount").innerText = `-₹${discountAmount.toFixed(0)}`; // Round to 2 decimal places

              // Update grand total and round it
              const grandTotalElement = document.getElementById("grandTotal");
              let grandTotal = parseFloat(grandTotalElement.innerHTML);
              grandTotal -= discountAmount;
              grandTotalElement.innerHTML = grandTotal.toFixed(0); // Round to 2 decimal places

              // Disable coupon input and apply button after applying
              couponCodeInput.disabled = true;
              document.querySelector(".btn.btn-outline-primary").disabled = true;

              // Show the remove button
              document.querySelector(".btn.btn-outline-warning").classList.remove("d-none");

              Swal.fire("Coupon Applied!", `You saved ₹${discountAmount.toFixed(0)}`, "success");
            } else {
              const errorData = await response.json();
              Swal.fire("Error!", errorData.message || "Failed to apply coupon.", "error");
            }
          } catch (error) {
            console.error("Error:", error);
            Swal.fire("Error!", "There was an error applying the coupon.", "error");
          }
        }
      });
    });

    // Function to remove coupon
    window.removeCoupon = async function () {
      Swal.fire({
        title: "Are you sure?",
        text: "Do you want to remove this coupon?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, remove it!",
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            Swal.fire({
              icon: "info",
              title: "Removing Coupon",
              html: "Please wait while we remove the coupon...",
              allowOutsideClick: false,
              didOpen: () => {
                Swal.showLoading();
              },
            });

            const response = await fetch("/checkout/remove-coupon", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            });

            Swal.close();

            if (response.ok) {
              const data = await response.json();
              
              // Extract the new grand total from the response
              const newGrandTotal = parseFloat(data.newGrandTotal);

              // Update DOM after coupon removal
              document.getElementById("appliedCoupon").classList.add("d-none");
              const couponCodeInput = document.getElementById("couponCode");
              couponCodeInput.disabled = false;
              couponCodeInput.value = "";

              // Update the grand total with backend-calculated value
              const grandTotalElement = document.getElementById("grandTotal");
              grandTotalElement.innerHTML = newGrandTotal.toFixed(0); // Ensure it is properly rounded

              const discountElement = document.getElementById("discountAmount");
              discountElement.innerText = `-₹`; 

              // Re-enable the apply button
              document.querySelector(".btn.btn-outline-primary").disabled = false;

              // Hide the remove button
              document.querySelector(".btn.btn-outline-warning").classList.add("d-none");

              Swal.fire("Removed!", data.message, "success");
            } else {
              const errorData = await response.json();
              Swal.fire("Error!", errorData.message || "Failed to remove the coupon.", "error");
            }
          } catch (error) {
            console.error("Error:", error);
            Swal.fire("Error!", "There was an error removing the coupon.", "error");
          }
        }
      });
    };
  });

</script>

<script>
  const editAddress = document.querySelector("#edit-address-modal");

  const editAddressForm = document.querySelector("#edit-address-form");

  editAddress.addEventListener("show.bs.modal", async (e) => {
    try {
      const editButton = e.relatedTarget;
      const addressId = editButton.getAttribute("data-address-id");

      const response = await fetch(`/address/edit-address/${addressId}`);
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      const data = await response.json();
      const address = data.address;

      document.getElementById("edit-address-fn").value = address.name;
      document.getElementById("edit-address-ph").value = address.phone;
      document.getElementById("edit-address-house-name").value = address.houseName;
      document.getElementById("edit-address-area").value = address.areaStreet;
      document.getElementById("edit-address-locality").value = address.locality;
      document.getElementById("edit-address-town").value = address.town;
      document.getElementById("edit-address-state").value = address.state;
      document.getElementById("edit-address-zip").value = address.zipcode;
      document.getElementById("edit-address-landmark").value = address.landmark;
      document.getElementById("edit-alternate-phone").value = address.alternativePhone;

      const addressTypeHome = document.getElementById("edit-flexRadioDefault1");
      const addressTypeWork = document.getElementById("edit-flexRadioDefault2");
      if (address.address_type === "HOME") {
        addressTypeHome.checked = true;
        addressTypeWork.checked = false;
      } else if (address.address_type === "WORK") {
        addressTypeHome.checked = false;
        addressTypeWork.checked = true;
      }

      editAddressForm.action = `/address/edit-address/${addressId}`;
      return;
    } catch (error) {
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: error.message || "Something went wrong!",
      });
    }
  });

  async function deleteAddress(addressId) {
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch(`/address/delete-address/${addressId}`, {
            method: "DELETE",
          });

          if (!response.ok) {
            throw new Error("Network response was not ok");
          }

          Swal.fire("Deleted!", "Your address has been deleted.", "success").then(() => location.reload());
        } catch (error) {
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "Something went wrong!" + error,
          });
        }
      }
    });
  }

  const form = document.querySelector("#add-address");

  const checkName = () => {
    const nameEl = document.querySelector("#address-fn");
    let valid = false;
    const name = nameEl.value.trim();

    if (!isRequired(name)) {
      showError(nameEl, "Full name cannot be blank.");
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
      showError(nameEl, "Full name should not contain numbers.");
    } else {
      showSuccess(nameEl);
      valid = true;
    }
    return valid;
  };

  const checkPhone = () => {
    const phoneEl = document.querySelector("#address-ph");
    let valid = false;
    const phone = phoneEl.value.trim();

    if (!isRequired(phone)) {
      showError(phoneEl, "Phone number cannot be blank.");
    } else if (!isIndianPhoneNumber(phone)) {
      showError(phoneEl, "Phone number is not valid.");
    } else {
      showSuccess(phoneEl);
      valid = true;
    }
    return valid;
  };

  const checkHouseName = () => {
    const houseNameEl = document.querySelector("#address-house-name");
    let valid = false;
    const houseName = houseNameEl.value.trim();

    if (!isRequired(houseName)) {
      showError(houseNameEl, "House name cannot be blank.");
    } else {
      showSuccess(houseNameEl);
      valid = true;
    }
    return valid;
  };

  const checkAreaStreet = () => {
    const areaStreetEl = document.querySelector("#address-area");
    let valid = false;
    const areaStreet = areaStreetEl.value.trim();

    if (!isRequired(areaStreet)) {
      showError(areaStreetEl, "Area/Street cannot be blank.");
    } else {
      showSuccess(areaStreetEl);
      valid = true;
    }
    return valid;
  };

  const checkLocality = () => {
    const localityEl = document.querySelector("#address-locality");
    let valid = false;
    const locality = localityEl.value.trim();

    if (!isRequired(locality)) {
      showError(localityEl, "Locality cannot be blank.");
    } else {
      showSuccess(localityEl);
      valid = true;
    }
    return valid;
  };

  const checkTown = () => {
    const townEl = document.querySelector("#address-town");
    let valid = false;
    const town = townEl.value.trim();

    if (!isRequired(town)) {
      showError(townEl, "Town cannot be blank.");
    } else {
      showSuccess(townEl);
      valid = true;
    }
    return valid;
  };

  const checkState = () => {
    const stateEl = document.querySelector("#address-state");
    let valid = false;
    const state = stateEl.value;

    if (state === "india") {
      showError(stateEl, "Please select your state.");
    } else {
      showSuccess(stateEl);
      valid = true;
    }
    return valid;
  };

  const checkZipcode = () => {
    const zipcodeEl = document.querySelector("#address-zip");
    let valid = false;
    const zipcode = zipcodeEl.value;

    if (!isRequired(zipcode)) {
      showError(zipcodeEl, "ZIP code cannot be blank.");
    } else {
      showSuccess(zipcodeEl);
      valid = true;
    }
    return valid;
  };

  const checkLandmark = () => {
    const landmarkEl = document.querySelector("#address-landmark");
    let valid = false;
    const landmark = landmarkEl.value.trim();

    if (!isRequired(landmark)) {
      showError(landmarkEl, "Landmark cannot be blank.");
    } else {
      showSuccess(landmarkEl);
      valid = true;
    }
    return valid;
  };

  const checkAlternatePhone = () => {
    const alternatePhoneEl = document.querySelector("#alternate-phone");
    let valid = false;
    const alternatePhone = alternatePhoneEl.value.trim();

    if (!isRequired(alternatePhone)) {
      showError(alternatePhoneEl, "Alternate phone number cannot be blank.");
    } else if (!isIndianPhoneNumber(alternatePhone)) {
      showError(alternatePhoneEl, "Alternate phone number is not valid.");
    } else {
      showSuccess(alternatePhoneEl);
      valid = true;
    }
    return valid;
  };

  const checkAddressType = () => {
    const addressTypeEl = document.querySelector('input[name="addressType"]:checked');
    let valid = false;

    if (!addressTypeEl) {
      showError(addressTypeEl, "Please select an address type.");
    } else {
      showSuccess(addressTypeEl);
      valid = true;
    }
    return valid;
  };

  const isIndianPhoneNumber = (phone) => {
    const re = /^\d{10}$/;
    return re.test(phone);
  };

  const isRequired = (value) => (value === "" ? false : true);

  const showError = (input, message) => {
    const formField = input.parentElement;
    formField.classList.remove("success", "is-valid");
    input.classList.remove("success", "is-valid");
    formField.classList.add("error", "is-invalid");
    input.classList.add("error", "is-invalid");
    const error = formField.querySelector("small");
    error.textContent = message;
  };

  const showSuccess = (input) => {
    const formField = input.parentElement;
    formField.classList.remove("error", "is-invalid");
    input.classList.remove("error", "is-invalid");
    formField.classList.add("success", "is-valid");
    input.classList.add("success", "is-valid");
    const error = formField.querySelector("small");
    if (error) {
      error.textContent = "";
    }
  };

  form.addEventListener("submit", async function (e) {
    e.preventDefault();

    let isNameValid = checkName(),
      isPhoneValid = checkPhone(),
      isHouseNameValid = checkHouseName(),
      isAreaStreetValid = checkAreaStreet(),
      isLocalityValid = checkLocality(),
      isTownValid = checkTown(),
      isStateValid = checkState(),
      isZipcodeValid = checkZipcode(),
      isLandmarkValid = checkLandmark(),
      isAlternatePhoneValid = checkAlternatePhone(),
      isAddressTypeValid = checkAddressType();

    let isFormValid =
      isNameValid &&
      isPhoneValid &&
      isHouseNameValid &&
      isAreaStreetValid &&
      isLocalityValid &&
      isTownValid &&
      isStateValid &&
      isZipcodeValid &&
      isLandmarkValid &&
      isAlternatePhoneValid &&
      isAddressTypeValid;

    const customerId = document.querySelector("#customerId").value;

    if (isFormValid) {
      try {
        const response = await fetch("/address/add-address", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: document.querySelector("#address-fn").value,
            phone: document.querySelector("#address-ph").value,
            houseName: document.querySelector("#address-house-name").value,
            areaStreet: document.querySelector("#address-area").value,
            locality: document.querySelector("#address-locality").value,
            town: document.querySelector("#address-town").value,
            state: document.querySelector("#address-state").value,
            zipcode: document.querySelector("#address-zip").value,
            landmark: document.querySelector("#address-landmark").value,
            alternativePhone: document.querySelector("#alternate-phone").value,
            addressType: document.querySelector('input[name="addressType"]:checked').value,
            customerId,
          }),
        });

        const result = await response.json();
        if (result.success) {
          Swal.fire({
            icon: "success",
            title: "Success",
            text: "Address added successfully!",
          }).then(() => location.reload());
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Failed to add address.",
          });
        }
      } catch (error) {
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "An unexpected error occurred.",
        });
      }
    }
  });

  const debounce = (fn, delay = 500) => {
    let timeoutId;
    return (...args) => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      timeoutId = setTimeout(() => {
        fn.apply(null, args);
      }, delay);
    };
  };

  form.addEventListener(
    "input",
    debounce(function (e) {
      switch (e.target.id) {
        case "address-fn": 
          checkName();
          break;
        case "address-ln": 
          checkPhone();
          break;
        case "address-house-name": 
          checkHouseName();
          break;
        case "address-area": 
          checkAreaStreet();
          break;
        case "address-locality": 
          checkLocality();
          break;
        case "address-town": 
          checkTown();
          break;
        case "address-state": 
          checkState();
          break;
        case "address-zip": 
          checkZipcode();
          break;
        case "address-landmark": 
          checkLandmark();
          break;
        case "alternate-phone": 
          checkAlternatePhone();
          break;
        case "address_type": 
          checkAddressType();
          break;
      }
    })
  );
</script>

<script defer>
  const editForm = document.querySelector("#edit-address-form");

  const checkEditName = () => {
    const nameEl = document.querySelector("#edit-address-fn");
    let valid = false;
    const name = nameEl.value.trim();

    if (!isRequired(name)) {
      showError(nameEl, "Full name cannot be blank.");
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
      showError(nameEl, "Full name should not contain numbers.");
    } else {
      showSuccess(nameEl);
      valid = true;
    }
    return valid;
  };

  const checkEditPhone = () => {
    const phoneEl = document.querySelector("#edit-address-ph");
    let valid = false;
    const phone = phoneEl.value.trim();

    if (!isRequired(phone)) {
      showError(phoneEl, "Phone number cannot be blank.");
    } else if (!isIndianPhoneNumber(phone)) {
      showError(phoneEl, "Phone number is not valid.");
    } else {
      showSuccess(phoneEl);
      valid = true;
    }
    return valid;
  };

  const checkEditHouseName = () => {
    const houseNameEl = document.querySelector("#edit-address-house-name");
    let valid = false;
    const houseName = houseNameEl.value.trim();

    if (!isRequired(houseName)) {
      showError(houseNameEl, "House name cannot be blank.");
    } else {
      showSuccess(houseNameEl);
      valid = true;
    }
    return valid;
  };

  const checkEditAreaStreet = () => {
    const areaStreetEl = document.querySelector("#edit-address-area");
    let valid = false;
    const areaStreet = areaStreetEl.value.trim();

    if (!isRequired(areaStreet)) {
      showError(areaStreetEl, "Area/Street cannot be blank.");
    } else {
      showSuccess(areaStreetEl);
      valid = true;
    }
    return valid;
  };

  const checkEditLocality = () => {
    const localityEl = document.querySelector("#edit-address-locality");
    let valid = false;
    const locality = localityEl.value.trim();

    if (!isRequired(locality)) {
      showError(localityEl, "Locality cannot be blank.");
    } else {
      showSuccess(localityEl);
      valid = true;
    }
    return valid;
  };

  const checkEditTown = () => {
    const townEl = document.querySelector("#edit-address-town");
    let valid = false;
    const town = townEl.value.trim();

    if (!isRequired(town)) {
      showError(townEl, "Town cannot be blank.");
    } else {
      showSuccess(townEl);
      valid = true;
    }
    return valid;
  };

  const checkEditState = () => {
    const stateEl = document.querySelector("#edit-address-state");
    let valid = false;
    const state = stateEl.value;

    if (state === "india") {
      showError(stateEl, "Please select your state.");
    } else {
      showSuccess(stateEl);
      valid = true;
    }
    return valid;
  };

  const checkEditZipcode = () => {
    const zipcodeEl = document.querySelector("#edit-address-zip");
    let valid = false;
    const zipcode = zipcodeEl.value;

    if (!isRequired(zipcode)) {
      showError(zipcodeEl, "ZIP code cannot be blank.");
    } else {
      showSuccess(zipcodeEl);
      valid = true;
    }
    return valid;
  };

  const checkEditLandmark = () => {
    const landmarkEl = document.querySelector("#edit-address-landmark");
    let valid = false;
    const landmark = landmarkEl.value.trim();

    if (!isRequired(landmark)) {
      showError(landmarkEl, "Landmark cannot be blank.");
    } else {
      showSuccess(landmarkEl);
      valid = true;
    }
    return valid;
  };

  const checkEditAlternatePhone = () => {
    const alternatePhoneEl = document.querySelector("#edit-alternate-phone");
    let valid = false;
    const alternatePhone = alternatePhoneEl.value.trim();

    if (!isRequired(alternatePhone)) {
      showError(alternatePhoneEl, "Alternate phone number cannot be blank.");
    } else if (!isIndianPhoneNumber(alternatePhone)) {
      showError(alternatePhoneEl, "Alternate phone number is not valid.");
    } else {
      showSuccess(alternatePhoneEl);
      valid = true;
    }
    return valid;
  };

  const checkEditAddressType = () => {
    const addressTypeEl = document.querySelector('input[name="addressType"]:checked');
    let valid = false;

    if (!addressTypeEl) {
      showError(addressTypeEl, "Please select an address type.");
    } else {
      showSuccess(addressTypeEl);
      valid = true;
    }
    return valid;
  };

  const editAddressModal = document.querySelector("#edit-address-modal");

  // Show modal event to fetch and populate address data
  editAddressModal.addEventListener("show.bs.modal", async (e) => {
    try {
      const editButton = e.relatedTarget; 
      const addressId = editButton.getAttribute("data-address-id"); 

      console.log("this is addressId", addressId);
      const response = await fetch(`/address/edit-address/${addressId}`);
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      const data = await response.json();
      const address = data.address;

      // Populate the form with the retrieved address data
      document.getElementById("edit-address-fn").value = address.name;
      document.getElementById("edit-address-ph").value = address.phone;
      document.getElementById("edit-address-house-name").value = address.houseName;
      document.getElementById("edit-address-area").value = address.areaStreet;
      document.getElementById("edit-address-locality").value = address.locality;
      document.getElementById("edit-address-town").value = address.town;
      document.getElementById("edit-address-state").value = address.state;
      document.getElementById("edit-address-zip").value = address.zipcode;
      document.getElementById("edit-address-landmark").value = address.landmark;
      document.getElementById("edit-alternate-phone").value = address.alternativePhone;

      const addressTypeHome = document.getElementById("edit-flexRadioDefault1");
      const addressTypeWork = document.getElementById("edit-flexRadioDefault2");
      if (address.addressType === "HOME") {
        addressTypeHome.checked = true;
        addressTypeWork.checked = false;
      } else if (address.addressType === "WORK") {
        addressTypeHome.checked = false;
        addressTypeWork.checked = true;
      }

      editAddressForm.action = `/address/edit-address/${addressId}`;
    } catch (error) {
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: error.message || "Something went wrong!",
      });
    }
  });

  editAddressForm.addEventListener("submit", async function (e) {
    e.preventDefault();

    const isFormValid =
      checkEditName() &&
      checkEditPhone() &&
      checkEditHouseName() &&
      checkEditAreaStreet() &&
      checkEditLocality() &&
      checkEditTown() &&
      checkEditState() &&
      checkEditZipcode() &&
      checkEditLandmark() &&
      checkEditAlternatePhone() &&
      checkEditAddressType();

    if (isFormValid) {
      try {
        const response = await fetch(editAddressForm.action, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: document.querySelector("#edit-address-fn").value,
            phone: document.querySelector("#edit-address-ph").value,
            houseName: document.querySelector("#edit-address-house-name").value,
            areaStreet: document.querySelector("#edit-address-area").value,
            locality: document.querySelector("#edit-address-locality").value,
            town: document.querySelector("#edit-address-town").value,
            state: document.querySelector("#edit-address-state").value,
            zipcode: document.querySelector("#edit-address-zip").value,
            landmark: document.querySelector("#edit-address-landmark").value,
            alternativePhone: document.querySelector("#edit-alternate-phone").value,
            addressType: document.querySelector('input[name="addressType"]:checked').value,
          }),
        });

        const result = await response.json();

        if (result.success) {
          Swal.fire({
            icon: "success",
            title: "Success",
            text: "Address updated successfully!",
          }).then(() => location.reload()); 
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Failed to update address.",
          });
        }
      } catch (error) {
        Swal.fire({
          icon: "error",
          title: "Error",
          text: `An unexpected error occurred: ${error.message}`,
        });
      }
    }
  });

  editForm.addEventListener(
    "input",
    debounce((e) => {
      switch (e.target.id) {
        case "edit-address-fn": 
          checkEditName();
          break;
        case "edit-address-ln":
          checkEditPhone();
          break;
        case "edit-address-house-name": 
          checkEditHouseName();
          break;
        case "edit-address-area": 
          checkEditAreaStreet();
          break;
        case "edit-address-locality": 
          checkEditLocality();
          break;
        case "edit-address-town": 
          checkEditTown();
          break;
        case "edit-address-state": 
          checkEditState();
          break;
        case "edit-address-zip": 
          checkEditZipcode();
          break;
        case "edit-address-landmark": 
          checkEditLandmark();
          break;
        case "edit-alternate-phone": 
          checkEditAlternatePhone();
          break;
        case "edit-form-check": 
          checkAddressType();
          break;
      }
    })
  );
</script>
