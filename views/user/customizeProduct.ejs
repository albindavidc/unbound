<%- include('../partials/user/header') %>

<style>
  /* Modal Styles */
  .modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5); /* Black with opacity */
  }

  /* Modal Content */
  .modal-content {
    background-color: #fff;
    margin: 15% auto; /* 15% from the top and centered */
    padding: 20px;
    border: 1px solid #888;
    width: 50%; /* Could be more or less, depending on screen size */
  }

  /* Close Button */
  .closeBtn {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
  }

  .closeBtn:hover,
  .closeBtn:focus {
    color: #000;
    text-decoration: none;
    cursor: pointer;
  }

  button {
    padding: 10px 20px;
    font-size: 16px;
  }
  #canvas {
    position: relative;
  }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>

<section class="p-5">
  <div class="d-flex d-row">
    <div class="tab-pane active" id="tabs-primary" role="tabpanel">
      <div class="product__details__pic__item p-0">
        <canvas id="canvas" width="500" height="500" style="border: 1px solid #d3d3d3"></canvas>
      </div>
    </div>
    <div class="m-3">
      <div class="mb-5">
        <button class="btn btn-dark" id="frontImage">Front</button>
        <button class="btn btn-dark" id="backImage">Back</button>
        <button class="btn btn-dark" id="leftImage">Left</button>
        <button class="btn btn-dark" id="rightImage">Right</button>
      </div>
      <button class="btn btn-outline-dark mb-5" id="addCustomImage">Add Image</button>
      <input type="file" id="customImageInput" accept="image/*" style="display: none" />
      <textarea name="customModalTextArea" id="customTextArea" class="form-control mb-2" placeholder="Add Text"></textarea>
      <button class="btn btn-outline-dark mb-5" id="addCustomText">Text Area Button</button>
      <div>
        <button class="btn btn-outline-danger mb-5" id="deleteButton">Delete Layers</button>
      </div>
    </div>
    <div class="m-3 pl-5" id="layers-container">
      <h3>Layers</h3>
      <ul id="layers-list" style="list-style-type: none"></ul>
    </div>
  </div>
</section>

<script>

  document.getElementById("addCustomImage").addEventListener("click", () => {
    document.getElementById("customImageInput").click();
  });

  const product = <%- JSON.stringify(product) %>;

  const canvas = new fabric.Canvas("canvas");
  canvas.selection = true;


  //Front, Back, Left, Right Side Swap.
  const frontImage = document.getElementById("frontImage")
  const backImage = document.getElementById("backImage");
  const leftImage = document.getElementById("leftImage");
  const rightImage = document.getElementById("rightImage");

  let states = {
    'front': {content: [], backgroundImage: null},
    'back': {content: [], backgroundImage: null},
    'left': {content: [], backgroundImage: null},
    'right': {content: [], backgroundImage: null},
  }
  let currentSide = 'front';
  
  function saveState() {
    states[currentSide].content = canvas.toJSON();
    states[currentSide].backgroundImage = canvas.backgroundImage ? canvas.backgroundImage.src : null;
  }
  function clearCanvas(){
    canvas.clear();
    canvas.setBackgroundImage(null, canvas.renderAll.bind(canvas))
  }
  
  fabric.Image.fromURL("/uploads/images/<%= product.secondaryImages[0]?.name || product.primaryImages[0]?.name  %>", function(img) {
      img.scaleToWidth(canvas.width);
      canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
      states.front.backgroundImage = "/uploads/images/<%= product.secondaryImages[0]?.name || product.primaryImages[0]?.name  %>";
      saveState();
  });


 

  function loadState(side) {
    clearCanvas();
      canvas.loadFromJSON(states[side].content, canvas.renderAll.bind(canvas));
    
      fabric.Image.fromURL(states[side].backgroundImage, function(img) {
        img.scaleToWidth(canvas.width);
        canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas))
      })
    
  }

  frontImage.addEventListener('click', () =>{
    saveState();
    currentSide = 'front';

    if(!states.front.content.length){
      fabric.Image.fromURL("/uploads/images/<%= product.secondaryImages[0]?.name || product.primaryImages[0]?.name  %>", function(img) {
        img.scaleToWidth(canvas.width);
        canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
        states.front.backgroundImage = "/uploads/images/<%= product.secondaryImages[0]?.name || product.primaryImages[0]?.name  %>"
      });
    }else{
      loadState(currentSide)
    }
  })

  backImage.addEventListener('click', () => {
    saveState();
    currentSide = 'back'

    if(!states.back.content.length){
        fabric.Image.fromURL("/uploads/images/<%=  product.secondaryImages[1]?.name || product.primaryImages[0]?.name %>", function(img) {
        img.scaleToWidth(canvas.width);
        canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
        states.back.backgroundImage = "/uploads/images/<%= product.secondaryImages[1]?.name || product.primaryImages[0]?.name %>";

      });
    }else{
      loadState(currentSide)
    }
  })


  leftImage.addEventListener('click', () =>{
    saveState();
    currentSide = 'left';

    if(!states.left.content.length){
        fabric.Image.fromURL("/uploads/images/<%=  product.secondaryImages[2]?.name || product.primaryImages[0]?.name %>", function(img) {
        img.scaleToWidth(canvas.width);
        canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
        states.left.backgroundImage = "/uploads/images/<%=  product.secondaryImages[2]?.name || product.primaryImages[0]?.name %>"
      });
    }else{
      loadState(currentSide)
    }
  })

  rightImage.addEventListener('click', () =>{
    saveState();
    currentSide = 'right';

    if(!states.right.content.length){
        fabric.Image.fromURL("/uploads/images/<%= product.secondaryImages[3]?.name || product.primaryImages[0]?.name %>", function(img) {
        img.scaleToWidth(canvas.width);
        canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
        states.right.backgroundImage = "/uploads/images/<%= product.secondaryImages[3]?.name || product.primaryImages[0]?.name %>"
      });
    }else{
      loadState(currentSide)
    }
  })

  console.log(states, "this is states")


  document.getElementById("customImageInput").addEventListener("change", function (e) {
    const reader = new FileReader();
    reader.onload = function (event) {
      const imgObj = new Image();
      imgObj.src = event.target.result;

      imgObj.onload = function () {
        const img = new fabric.Image(imgObj);
        img.set({
          left: 50,
          top: 50,
          hasControls: true,
          selectable: true,
          lockScalingFlip: true,
        });
        img.scaleToWidth(canvas.width / 2);
        canvas.add(img);
        canvas.setActiveObject(img);
        canvas.renderAll();
      };
    };
    reader.readAsDataURL(e.target.files[0]);
  });


    // Add custom text to the canvas
    document.getElementById("addCustomText").addEventListener("click", () => {
      const textValue = document.getElementById("customTextArea").value;
      if (textValue.trim() !== "") {
        const text = new fabric.Text(textValue, {
      left: 100,
      top: 100,
      fill: "#000",
      fontSize: 20,
      editable: true,
      hasControls: true,
      hasBorders: true,
      selectable: true,
      lockUniScaling: false,
      lockRotation: false,
      lockScalingFlip: true,
      cornerColor: 'blue',
      cornerStyle: 'circle'
    });


        text.setControlsVisibility({
          mt: true, mb: true, ml: true, mr: true, tr: true,
        });

        text.set({ lockScalingFlip: true });
        canvas.add(text);
        canvas.setActiveObject(text);
        updateLayerList();
      }
    });

    //Delete the selected Layers
    const deleteButton = document.getElementById("deleteButton");

    canvas.on('selected:created', function(){
      deleteButton.style.display = "block";
    })

    canvas.on('selected:cleared', function() {
      deleteButton.style.display = "none";
    })

    deleteButton.addEventListener('click', function() {
      const activeObject = canvas.getActiveObject();
      if(activeObject){
        canvas.remove(activeObject);
        canvas.discardActiveObject();
        canvas.renderAll();
      }
    })

    function updateLayerList() {
      const layerContainer = document.getElementById("layers-list");
      layerContainer.innerHTML = "";

      const objects = canvas.getObjects();

      objects.forEach((object, index) => {
        let layerItem = document.createElement("li");

        let moveUpBtn = document.createElement("button");
        moveUpBtn.innerText = "▲";
        moveUpBtn.style.cssText = "border: .5px solid; border-radius: 4px; background-color: white;";
        moveUpBtn.classList.add("p-1", "m-1");
        moveUpBtn.onclick = () => moveLayerUp(index, objects);

        let moveDownBtn = document.createElement("button");
        moveDownBtn.innerHTML = "▼";
        moveDownBtn.style.cssText = "border: .5px solid; border-radius: 4px; background-color: white;";
        moveDownBtn.classList.add("p-1", "m-1");
        moveDownBtn.onclick = () => moveLayerDown(index, objects);

        layerItem.appendChild(moveUpBtn);
        layerItem.appendChild(moveDownBtn);
        layerItem.appendChild(document.createTextNode(`Layer ${index + 1}: ${object.type}`));

        layerContainer.appendChild(layerItem);
      });

      function moveLayerUp(index, objects) {
        if (index > 0) {
          const obj = objects[index];
          obj.moveTo(index - 1);
          canvas.renderAll();
          updateLayerList();
        }
      }

      // Move layer down in the stack
      function moveLayerDown(index, objects) {
        if (index < objects.length - 1) {
          const obj = objects[index];
          obj.moveTo(index + 1);
          canvas.renderAll();
          updateLayerList();
        }
      }
    }

    // Listen for changes to update layer list
    canvas.on("object:modified", updateLayerList);  // Update when an object is modified
    canvas.on("object:added", updateLayerList);  // Update when an object is added
    canvas.on("object:removed", updateLayerList);  // Update when an object is removed
</script>
