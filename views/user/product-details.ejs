<!-- product-details.ejs -->

<%- include('../../views/partials/user/header') %>

<style>
  .product__details__pic__item {
    max-width: 500px;
    height: auto;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .product__details__pic__item img {
    width: 100%;
    height: auto;
    max-height: 100%;
    object-fit: cover;
  }

  .imgSize {
    width: 10%;
  }

  * {
    box-sizing: border-box;
  }

  .img-zoom-container {
    position: relative;
  }

  .img-zoom-lens {
    display: none;
    position: absolute;
    border: 2px dotted rgba(0, 0, 0, 0.8);
    width: 160px;
    height: 160px;
    pointer-events: none;
    background-image: repeating-linear-gradient(45deg, rgba(0, 0, 0, 0.8) 0, rgba(0, 0, 0, 0.8) 1px, transparent 0, transparent 20px);
    background-size: 10px 10px;
  }

  .img-zoom-container:hover img {
    cursor: zoom-in;
  }

  .img-zoom-container:hover .img-zoom-lens {
    display: block;
  }

  .img-zoom-result {
    display: none;
    position: absolute;
    top: 0;
    margin-left: -100px;
    width: 700px;
    height: 500px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .img-zoom-container:hover .img-zoom-result {
    display: block;
  }

  #productQuantity {
    width: 80px;
    padding: 8px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 16px;
    text-align: center;
  }
</style>

<!-- Shop Details Section Begin -->
<section class="shop-details">
  <div class="product__details__pic">
    <div class="container">
      <div class="d-flex flex-row">
        <div class="d-flex flex-col">
          <div class="row">
            <div class="col-lg-9 col-md-9">
              <div class="tab-content img-zoom-container">
                <div class="tab-pane active" id="tabs-primary" role="tabpanel">
                  <div class="product__details__pic__item p-0">
                    <img
                      id="main-product-image"
                      class="img-fluid"
                      src="/uploads/images/<%= product.primaryImages[0] ? product.primaryImages[0].name : product.secondaryImages[0].name %>"
                      alt="<%= product.name %>"
                    />
                  </div>
                </div>
                <% product.secondaryImages.forEach((image, index) => { %>
                <div class="tab-pane" id="tabs-<%= index + 1 %>" role="tabpanel">
                  <div class="product__details__pic__item">
                    <img
                      id="secondary-product-image-<%= index %>"
                      class="img-fluid"
                      src="/uploads/images/<%= image.name %>"
                      alt="<%= product.name %>"
                    />
                  </div>
                </div>
                <% }); %>
              </div>

              <ul class="nav nav-tabs justify-content-center flex-row mt-3" role="tablist">
                <% product.primaryImages.forEach((image, index) => { %>
                <li class="nav-item pt-2">
                  <a
                    class="nav-link <%= index === 0 ? 'active' : '' %>"
                    data-toggle="tab"
                    href="#tabs-primary"
                    role="tab"
                    data-image-url="/uploads/images/<%= image.name %>"
                  >
                    <img class="img-thumbnail" src="/uploads/images/<%= image.name %>" alt="<%= product.name %>" style="width: 60px; height: 60px" />
                  </a>
                </li>
                <% }); %> <% product.secondaryImages.forEach((image, index) => { %>
                <li class="nav-item p-2">
                  <a class="nav-link" data-toggle="tab" href="#tabs-<%= index + 1 %>" role="tab" data-image-url="/uploads/images/<%= image.name %>">
                    <img class="img-thumbnail" src="/uploads/images/<%= image.name %>" alt="<%= product.name %>" style="width: 60px; height: 60px" />
                  </a>
                </li>
                <% }); %>
              </ul>

              <div class="mt-4">
                <a href="/customizeProduct/<%=product._id%>" class="btn btn-dark mb-4"> Customize the <%= product.category.name %></a>

                <% if (customProduct === false) { %>
                <button class="btn btn-outline-success d-felx align-items-center" style="margin: auto" id="customDesignConfirm">
                  Use Custom Design
                </button>
                <% }else{ %>
                <button class="btn btn-success d-felx align-items-center" style="margin: auto" id="customDesignConfirm">Using Custom Design</button>
                <% } %>
              </div>
            </div>
          </div>

          <!-- Zoom Lens and Result Container -->
          <div class="img-zoom-container" style="z-index: 10;">
            <div class="img-zoom-lens"></div>
            <div id="myresult" class="img-zoom-result"></div>
          </div>

          <div class="row m-0" style="margin: 0">
            <div class="col-lg-12">
              <div class="product__details__text">
                <h4><%= product.name %></h4>

                <div class="rating">
                  <% for (let i = 0; i < product.rating; i++) { %>
                  <i class="fa fa-star"></i>
                  <% } %> <% for (let i = product.rating; i < 5; i++) { %>
                  <i class="fa fa-star-o"></i>
                  <% } %>
                </div>

                <h3 id="productPrice"></h3>
                <div class="row d-flex align-items-center">
                  <div class="product__details__option">
                    <div class="mt-3 d-flex d-col">
                      <div class="col-6 detail-option mb-3">
                        <h6 class="detail-option-heading">Colour <span>(required)</span></h6>
                        <ul class="list-inline mb-0 colours-wrapper">
                          <% let renderedColors = {}; %> <% product.variants.forEach((variant, index) => { %> 
                          <% if (variant.color && !renderedColors[variant.color.hex]) { %> <% renderedColors[variant.color.hex] = true; %>
                          <li class="list-inline-item">
                            <label
                              onclick="selectColor('<%= variant.color.hex %>', '<%= variant.color._id %>', '<%= variant.size._id %>')"
                              class="btn-colour <%= index === 0 ? 'active' : '' %> variant_id"
                              for="colour_<%= variant.color.name %>"
                              data-color-hex="<%= variant.color.hex %>"
                              data-color-id="<%= variant.color._id %>"
                              data-size-id="<%= variant.size._id %>"
                              data-variant-id="<%=variant._id%>"
                            ></label>

                            <input
                              class="input-invisible"
                              type="radio"
                              name="colour"
                              value="<%= variant.color._id %>"
                              id="colour_<%= variant.color.name %>"
                              required
                            />
                          </li>
                          <% } %> <% }); %>
                        </ul>
                      </div>
                      <div class="col-6 detail-option mb-3">
                        <h6 class="detail-option-heading">Size <span>(required)</span></h6>
                        <ul class="list-inline mb-0 sizes-wrapper">
                          <% let renderedSizes = {}; %> <% product.variants.forEach((variant, index) => { %> 
                            <% if (variant.size && !renderedSizes[variant.size.value]) { %> <% renderedSizes[variant.size.value] = true; %>
                          <li class="list-inline-item">
                            <label
                              onclick="selectSize('<%= variant.size.value %>', '<%= variant.size._id %>', '<%= variant.color._id %>')"
                              class="btn btn-sm btn-outline-secondary detail-option-btn-label size-option <%= index === 0 ? 'active' : '' %>"
                              for="size_<%= variant.size.value %>"
                              data-size-value="<%= variant.size.value %>"
                              data-size-id="<%= variant.size._id %>"
                              data-color-id="<%= variant.color._id %>"
                            >
                              <%= variant.size.value %>
                              <input
                                class="input-invisible"
                                type="radio"
                                name="size"
                                value="<%= variant.size._id %>"
                                id="size_<%= variant.size.value %>"
                                required
                              />
                            </label>
                          </li>
                          <% } %> <% }); %>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="pb-3">
                  <% product.variants.forEach(variant => { %>

                  <h6>Total number of stocks: <%= variant.stock %></h6>
                  <% }) %>
                </div>

                <div class="product__details__cart__option">
                  <% let totalStock = 0; %> <% product.variants.forEach(variant => { %> <% totalStock += variant.stock; %> <% }); %> 
                  <% if (totalStock>0){ %>
                  <div class="d-flex d-row justify-content-center">
                    <input class="m-3" name="quantity" type="number" id="productQuantity" value="1" data-stock="<% stocks %>" autocomplete="off" />

                    <div class="" style="margin-top: auto; margin-bottom: auto;">
                      <button
                        class="btn primary-btn btn-outline-secondary btn-md"
                        onclick="addToCart('<%= product._id %>')"
                        style="padding: 0% 5%; height: 50px; width: 200px"
                      >
                        Add to Cart
                      </button>
                    </div>
                  </div>
                  <% } else { %>
                  <a href="#" class="btn btn-danger">Out of Stock</a>
                  <% } %>
                </div>

                <div class="col product__details__btns__option">
                  <% if (product.wishlist === true) { %>

                  <a
                    href="javascript:void(0);"
                    onclick="deleteWishlist(event, '<%= product._id %>',this)"
                    id="wishlist_delete"
                    aria-label="Add to Wishlist"
                  >
                    <button class="btn btn-outline-danger">
                      <img src="../../public/img/red_heart.svg" id="wishlist_img_filled" alt="" />
                    </button>
                  </a>
                  <% }else{ %>

                  <a
                    href="javascript:void(0);"
                    onclick="addWishlist(event, '<%= product._id %>',this)"
                    id="wishlist_add"
                    aria-label="Add to Wishlist"
                  >
                    <button class="btn btn-outline-secondary">
                      <img src="../../public/img/icon/heart.png" id="wishlist_img_notfilled" alt="" />
                    </button>
                  </a>

                  <% } %>

                  <a href="#"><i class="fa fa-exchange"></i> Add To Compare</a>
                </div>

                <div class="product__details__last__option">
                  <h5><span>Guaranteed Safe Checkout</span></h5>
                  <img src="../../public/img/shop-details/details-payment.png" alt="" />
                  <ul>
                    <li>
                      <span>Categories:</span>
                      <%= product.category.name %>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="product__details__content">
    <div class="container">
      <div class="tab-style3">
        <ul class="nav nav-tabs text-uppercase">
          <li class="nav-item">
            <a class="nav-link active" id="Description-tab" data-bs-toggle="tab" href="#Description">Description</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="Reviews-tab" data-bs-toggle="tab" href="#Reviews">Reviews</a>
          </li>
        </ul>

        <div class="tab-content shop_info_tab entry-main-content">
          <!-- Description Tab -->
          <div class="tab-pane fade show active" id="Description">
            <div><%= product.description %></div>
          </div>

          <!-- Reviews Tab -->
          <div class="tab-pane fade" id="Reviews">
            <div class="comments-area">
              <div class="row">
                <div class="col-lg-8">
                  <% product.ratings.forEach(rating => { %>

                  <div class="rating mt-4" id="starRating" data-product-id="" data-order-id="">
                    <%=rating.user.name%> <% for( let i = 1; i <= 5; i++ ) { %>
                    <strong> <i class="fa fa-star <%= i <= rating.rating ? 'text-warning': 'disabled' %>" data-value="<%= i %>"></i></strong>
                    <% } %>
                  </div>

                  <p class="">Review: <%= rating.review %></p>
                  <%})%>

                  <div class="comment-list"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- Shop Details Section End -->

<!-- Related Section Begin -->
<section class="related spad">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <h3 class="related-title">Related Product</h3>
      </div>
    </div>
    <div class="row">
      <% relatedProducts.forEach(product => { %>
      <div class="col-lg-3 col-md-6 col-sm-6 mb-4">
        <div class="product__item">
          <div class="product__item__pic set-bg">
            <a href="/user/product-list/<%= product._id %>">
              <img
                src="/uploads/images/<%= product.primaryImages[0] ? product.primaryImages[0].name : product.secondaryImages[0].name %>"
                alt="<%= product.productName %>"
              />
            </a>
            <span class="label"><%= product.sale ? 'Sale' : 'New' %></span>
            <ul class="product__hover">
              <li>
                <a href="#"><img src="/img/icon/heart.png" alt="" /></a>
              </li>
              <li>
                <a href="#"><img src="/img/icon/compare.png" alt="" /><span>Compare</span></a>
              </li>
              <li>
                <a href="#"><img src="/img/icon/search.png" alt="" /></a>
              </li>
            </ul>
          </div>
          <div class="product__item__text">
            <h6><%= product.name %></h6>
            <% let totalStock = 0; %> <% product.variants.forEach(variant => { %> <% totalStock += variant.stock; %> <% }); %> 
            <% if (totalStock > 0){%>
            <a href="/user/add-to-cart" class="add-cart">+ Add To Cart</a>
            <% } else { %>
            <a href="#" class="out-of-stock">Out of Stock</a>
            <% } %>
            <div class="rating">
              <% for (let i = 0; i < 5; i++) { %>
              <i class="fa fa-star<%= i < product.rating ? '' : '-o' %>"></i>
              <% } %>
            </div>
            <h5>₹<%= product.sellingPrice %></h5>
            <% if (Number(product.sellingPrice) < Number(product.actualPrice)) { %>

            <h6 style="text-decoration: line-through">₹<%= product.actualPrice %>.00</h6>
            <% } %>
          </div>
        </div>
      </div>
      <% }); %>
    </div>
  </div>
</section>
<!-- Related Section End -->

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<%- include('../../views/partials/user/footer') %>

<script>
  async function customizeProductConfirm() {
    const customDesignConfirm = document.getElementById("customDesignConfirm");
    const productId = "<%= product._id %>";

    let status = false;
    if (customDesignConfirm.classList.contains("btn-outline-success")) {
      customDesignConfirm.classList.remove("btn-outline-success");
      customDesignConfirm.classList.add("btn-success");
      customDesignConfirm.innerHTML = "Using Custom Design";
      status = true;
    } else {
      customDesignConfirm.classList.remove("btn-success");
      customDesignConfirm.classList.add("btn-outline-success");
      customDesignConfirm.innerHTML = "Use Custom Design";
      status = false;
    }

    try {
      const response = await fetch("/product-details-customization", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          productId: productId,
          status: status,
        }),
      });

      if (response.ok) {
        window.location.reload();
      } else {
        console.error("Failed to update customization status.");
      }
    } catch (error) {
      console.error("Error occurred while sending data to backend:", error);
    }
  }

  document.getElementById("customDesignConfirm").addEventListener("click", () => {
    customizeProductConfirm();
  });

  const customizeModalButton = document.getElementById("customizeModalButton");
  const modal = document.getElementById("openCustomizeModal");
  const closeBtn = document.getElementsByClassName("closeBtn")[0];

  customizeModalButton.addEventListener("click", function () {
    modal.style.display = "block";
  });

  closeBtn.addEventListener("click", function () {
    modal.style.display = "none";
  });

  async function addWishlist(event, productId, element) {
    event.preventDefault();

    console.log("these are the updates", event, productId, element);
    try {
      const response = await fetch(`/wishlist/${productId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ productId }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      if (result.success) {
        Swal.fire({
          icon: "success",
          title: "Success",
          text: "You have successfully added this product to wishlist",
          timer: 3000, 
          showConfirmButton: false, 
        }).then(() => {
          location.reload();
        });
      } else {
        Swal.fire("Error", result.message || "Failed to add product to wishlist", "error").then(() => {
          location.reload();
        });
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire("Error", "An error occurred while adding the product to the wishlist", "error");
    }
  }

  async function deleteWishlist(event, productId, element) {
    event.preventDefault();

    console.log("these are the updates", event, productId, element);

    try {
      const response = await fetch(`/wishlist/${productId}`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ productId }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      if (result.success) {
        Swal.fire({
          icon: "success",
          title: "Success",
          text: "You have successfully removed this product from the wishlist",
          timer: 3000,
          showConfirmButton: false, 
        }).then(() => {
          location.reload();
        });
      } else {
        Swal.fire("Error", result.message || "Failed to remove product from the wishlist", "error").then(() => {
          location.reload();
        });
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire("Error", "An error occurred while removing the product from the wishlist", "error");
    }
  }
</script>
<script>
  function imageZoom(imgID, resultID) {
    const img = document.getElementById(imgID);
    const result = document.getElementById(resultID);
    const lens = document.createElement("DIV");
    lens.setAttribute("class", "img-zoom-lens");

    img.parentElement.insertBefore(lens, img);

    img.addEventListener("mouseenter", function () {
      lens.style.display = "block";
      result.style.display = "block";
      const cx = result.offsetWidth / lens.offsetWidth;
      const cy = result.offsetHeight / lens.offsetHeight;
      result.style.backgroundImage = `url('${img.src}')`;
      result.style.backgroundSize = `${img.width * cx}px ${img.height * cy}px`;

      function moveLens(e) {
        e.preventDefault();
        const pos = getCursorPos(e);
        let x = pos.x - lens.offsetWidth / 2;
        let y = pos.y - lens.offsetHeight / 2;

        if (x > img.width - lens.offsetWidth) x = img.width - lens.offsetWidth;
        if (x < 0) x = 0;
        if (y > img.height - lens.offsetHeight) y = img.height - lens.offsetHeight;
        if (y < 0) y = 0;

        lens.style.left = x + "px";
        lens.style.top = y + "px";
        result.style.backgroundPosition = `-${x * cx}px -${y * cy}px`;
      }

      let animationFrame;
      function onMouseMove(e) {
        if (animationFrame) {
          cancelAnimationFrame(animationFrame);
        }
        animationFrame = requestAnimationFrame(() => moveLens(e));
      }

      img.addEventListener("mousemove", onMouseMove);
      img.addEventListener("touchmove", onMouseMove);

      img.addEventListener("mouseleave", function () {
        lens.style.display = "none";
        result.style.display = "none";
        img.removeEventListener("mousemove", onMouseMove);
        img.removeEventListener("touchmove", onMouseMove);
        cancelAnimationFrame(animationFrame);
      });
    });

    function getCursorPos(e) {
      const a = img.getBoundingClientRect();
      const x = e.pageX - a.left - window.pageXOffset;
      const y = e.pageY - a.top - window.pageYOffset;
      return { x: x, y: y };
    }
  }

  imageZoom("main-product-image", "myresult");
  imageZoom("secondary-product-image-0", "myresult");
  imageZoom("secondary-product-image-1", "myresult");
  imageZoom("secondary-product-image-2", "myresult");
  imageZoom("secondary-product-image-3", "myresult");
</script>

<script defer>
  document.addEventListener("DOMContentLoaded", function () {
    const buttons = document.querySelectorAll(".btn-colour");
    buttons.forEach((btn) => {
      const hex = btn.getAttribute("data-color-hex");
      btn.style.backgroundColor = hex;
    });
  });

  let selectedColorId = null;
  let selectedSizeId = null;

  const price = document.getElementById("productPrice").textContent;
  const quantity = document.getElementById("productQuantity").value;

  function selectColor(hex, colorId, sizeId) {
    document.querySelectorAll(".btn-colour").forEach((el) => el.classList.remove("active"));
    document.querySelector(`.btn-colour[data-color-hex="${hex}"]`).classList.add("active");
    selectedColorId = colorId;
    selectedSizeId = sizeId;
  }

  function selectSize(sizeValue, sizeId, colorId) {
    document.querySelectorAll(".size-option").forEach((el) => el.classList.remove("active"));
    document.querySelector(`.size-option[data-size-value="${sizeValue}"]`).classList.add("active");
    selectedSizeId = sizeId;
    selectedColorId = colorId;
  }

  const sellingPrice = `<%- JSON.stringify(product.sellingPrice) %>`;
  const bundleQuantity = `<%- JSON.stringify(product.bundleQuantity)%>`;
  const bundlePrice = `<%- JSON.stringify(product.bundlePrice)%>`;

  console.log("Testing bundle quantities and price", quantity, sellingPrice, bundlePrice, bundleQuantity);

  // Function to update price dynamically
  function updatePrice(quantity) {
    const priceDisplayElement = document.getElementById("productPrice"); 

    const sellingPrice = `<%= product.sellingPrice %>`;
    const actualPrice = `<%= product.actualPrice %>`;
    if (quantity >= bundleQuantity) {
      priceDisplayElement.innerHTML = `
      <h3>₹${bundlePrice} <span style="font-size: 24px; font-weight: bold;">₹<%= product.sellingPrice %>.00</span> <span>₹<%= product.actualPrice %>.00</span></h3>
      `;
    } else if (sellingPrice < actualPrice) {
      priceDisplayElement.innerHTML = `<h3>₹${sellingPrice} <span>₹<%= product.actualPrice %>.00</span></h3>`;
    } else {
      priceDisplayElement.innerHTML = `<h3>₹${sellingPrice} </h3>`;
    }
  }

  
  // Attach an event listener to the quantity input field to update price dynamically
  const quantityInput = document.getElementById("productQuantity");
  quantityInput.addEventListener("input", function () {
    const quantity = parseInt(this.value, 10); 
    console.log("this is quantity", quantity);
    updatePrice(quantity); 
  });

  // Initial price setting for the default quantity
  updatePrice(parseInt(quantityInput.value, 10));

  function addToCart(productId) {
    const quantity = document.getElementById("productQuantity").value;

    console.log("this is details page", quantity);

    if (!selectedColorId || !selectedSizeId) {
      Swal.fire({
        icon: "error",
        title: "Select a Color & Size",
        text: "Kindly select a color and size",
        showConfirmButton: true,
      });
      return;
    }

    const quantityPerPerson = `<%- JSON.stringify(product.quantity)%>`;

    console.log(quantityPerPerson);

    if (quantity > Number(quantityPerPerson)) {
      Swal.fire({
        icon: "error",
        title: "Quantity Exceeded",
        text: "You have entered the maximum quantity per order",
        showConfirmButton: false,
        timer: 1500,
      });
      return;
    }

    if (quantity == 0) {
      Swal.fire({
        icon: "error",
        title: "Quantity cannot be zero",
        text: "You have entered invalid quantity",
        showConfirmButton: false,
        timer: 1500,
      });
      return;
    }

    const totalStock = `<%- JSON.stringify(stocks) %>`;
    console.log("this is the total stocks available: ", totalStock);

    if (quantity > Number(totalStock)) {
      Swal.fire({
        icon: "error",
        title: "Limited Stock",
        text: `This product has only ${totalStock} stock left`,
        showConfirmButton: true,
      });
      return;
    }

    const existingQuantityInCart = `<%- JSON.stringify(existingQuantity) %>`;
    if (Number(existingQuantityInCart) + Number(quantity) > Number(totalStock)) {
      Swal.fire({
        icon: "error",
        title: "Limited Stock",
        text: `This product has only ${totalStock} stocks left`,
        showConfirmButton: true,
      });
      return;
    }

    const variantElement = document.querySelector(".variant_id");
    const variantId = variantElement.getAttribute("data-variant-id");

    if (selectedColorId && selectedSizeId) {
      fetch("/user/add-to-cart", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          productId,
          // variantId: variantId,
          colorId: selectedColorId,
          sizeId: selectedSizeId,
          quantity, 
          price,
        }),
      })
        .then((response) => {
          if (response.ok) {
            console.log("Product added to cart!");
          } else {
            console.error("Error adding product to cart");
          }
        })
        .then((data) => {
          Swal.fire({
            icon: "success",
            title: "Added to Cart",
            text: "The item has been successfully added to your cart!",
            showCancelButton: true,
            confirmButtonText: "Go to Cart",
            cancelButtonText: "Continue Shopping",
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = "/cart";
            }
          });
        })

        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "Something went wrong!",
          });
        });
    }
  }
</script>

<!-- <script>
  document.addEventListener('DOMContentLoaded', function () {
    const buttons = document.querySelectorAll('.btn-colour');
    buttons.forEach(btn => {
      const hex = btn.getAttribute('data-color-hex');
      btn.style.backgroundColor = hex;
    });
  });
</script> -->
