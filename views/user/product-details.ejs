<%- include('../../views/partials/user/header') %>

<style>
  /* Container for the main product image */
  .product__details__pic__item {
    max-width: 500px; /* Set maximum width for the image container */
    height: auto; /* Fixed height for the container */
    overflow: hidden; /* Hide any overflow */
    display: flex;
    align-items: center; /* Center image vertically */
    justify-content: center; /* Center image horizontally */
  }

  /* Main product image styling */
  .product__details__pic__item img {
    width: 100%; /* Image takes up full width of the container */
    height: auto; /* Maintain the aspect ratio */
    max-height: 100%; /* Ensure image does not exceed container height */
    object-fit: cover; /* Cover the container without distorting the image */
  }

  /* Thumbnail images styling */
  .imgSize {
    width: 10%; /* Set width for thumbnails */
  }

  /* Apply border-box sizing to all elements */
  * {
    box-sizing: border-box;
  }

  /* Container for the zoom functionality */
  .img-zoom-container {
    position: relative; /* Position relative for absolute children */
  }

  /* Styling for the zoom lens */
  .img-zoom-lens {
    display: none; /* Initially hide the zoom lens */
    position: absolute; /* Position within the container */
    border: 2px dotted rgba(0, 0, 0, 0.8); /* Dotted border for the lens */
    width: 160px; /* Set lens width */
    height: 160px; /* Set lens height */
    pointer-events: none; /* Prevent the lens from interfering with mouse events */
    background-image: repeating-linear-gradient(45deg, rgba(0, 0, 0, 0.8) 0, rgba(0, 0, 0, 0.8) 1px, transparent 0, transparent 20px);
    background-size: 10px 10px; /* Size of the dots */
  }

  /* Change cursor to zoom-in when hovering over the image */
  .img-zoom-container:hover img {
    cursor: zoom-in; /* Display a plus sign cursor */
  }

  /* Show the zoom lens on hover */
  .img-zoom-container:hover .img-zoom-lens {
    display: block; /* Make the lens visible */
  }

  /* Styling for the zoom result */
  .img-zoom-result {
    display: none; /* Initially hide the zoom result */
    position: absolute; /* Position relative to the container */
    top: 0; /* Align to the top of the container */
    margin-left: -100px; /* Adjust horizontal positioning */
    width: 700px; /* Set width of the zoomed area */
    height: 500px; /* Set height of the zoomed area */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Optional: Add shadow for better visibility */
  }

  /* Show the zoom result when hovering over the image */
  .img-zoom-container:hover .img-zoom-result {
    display: block; /* Display the zoom result */
  }
</style>

<!-- Shop Details Section Begin -->
<section class="shop-details">
  <div class="product__details__pic">
    <div class="container">
      <div class="row">
        <div class="col-lg-12">
          <div class="product__details__breadcrumb">
            <a href="/">Home</a>
            <a href="/shop">Shop</a>
            <span>Product Details</span>
          </div>
        </div>
      </div>

      <div class="d-flex flex-row">
        <div class="row">
          <!-- Main Image and Thumbnails Column -->
          <div class="col-lg-9 col-md-9">
            <div class="tab-content img-zoom-container">
              <!-- Main Image Container -->
              <div class="tab-pane active" id="tabs-primary" role="tabpanel">
                <div class="product__details__pic__item p-0">
                  <img
                    id="main-product-image"
                    class="img-fluid"
                    src="/uploads/images/<%= product.primaryImages[0] ? product.primaryImages[0].name : product.secondaryImages[0].name %>"
                    alt="<%= product.name %>"
                  />
                </div>
              </div>
              <% product.secondaryImages.forEach((image, index) => { %>
              <div class="tab-pane" id="tabs-<%= index + 1 %>" role="tabpanel">
                <div class="product__details__pic__item">
                  <img
                    id="secondary-product-image-<%= index %>"
                    class="img-fluid"
                    src="/uploads/images/<%= image.name %>"
                    alt="<%= product.name %>"
                  />
                </div>
              </div>
              <% }); %>
            </div>

            <ul class="nav nav-tabs justify-content-center flex-row mt-3" role="tablist">
              <!-- Primary Images -->
              <% product.primaryImages.forEach((image, index) => { %>
              <li class="nav-item pt-2">
                <a
                  class="nav-link <%= index === 0 ? 'active' : '' %>"
                  data-toggle="tab"
                  href="#tabs-primary"
                  role="tab"
                  data-image-url="/uploads/images/<%= image.name %>"
                >
                  <img class="img-thumbnail" src="/uploads/images/<%= image.name %>" alt="<%= product.name %>" style="width: 60px; height: 60px" />
                </a>
              </li>
              <% }); %>

              <!-- Secondary Images -->
              <% product.secondaryImages.forEach((image, index) => { %>
              <li class="nav-item p-2">
                <a class="nav-link" data-toggle="tab" href="#tabs-<%= index + 1 %>" role="tab" data-image-url="/uploads/images/<%= image.name %>">
                  <img class="img-thumbnail" src="/uploads/images/<%= image.name %>" alt="<%= product.name %>" style="width: 60px; height: 60px" />
                </a>
              </li>
              <% }); %>
            </ul>
          </div>
        </div>

        <!-- Zoom Lens and Result Container -->
        <div class="img-zoom-container">
          <div class="img-zoom-lens"></div>
          <div id="myresult" class="img-zoom-result"></div>
        </div>
      </div>
    </div>
  </div>

  <div class="product__details__content">
    <div class="container">
      <div class="row d-flex justify-content-center">
        <div class="col-lg-8">
          <div class="product__details__text">
            <h4><%= product.name %></h4>

            <div class="rating">
              <% for (let i = 0; i < product.rating; i++) { %>
              <i class="fa fa-star"></i>
              <% } %> <% for (let i = product.rating; i < 5; i++) { %>
              <i class="fa fa-star-o"></i>
              <% } %>
            </div>
            <h3 id="productPrice"></h3>

            <div class="row d-flex align-items-center">
              <div class="product__details__option">
                <div class="mt-3">
                  <div class="col-12 detail-option mb-3">
                    <h6 class="detail-option-heading">Colour <span>(required)</span></h6>
                    <ul class="list-inline mb-0 colours-wrapper">
                      <% let renderedColors = {}; %> <% product.variants.forEach((variant, index) => { %> <% if (variant.color &&
                      !renderedColors[variant.color.hex]) { %> <% renderedColors[variant.color.hex] = true; %>
                      <li class="list-inline-item">
                        <label
                          onclick="selectColor('<%= variant.color.hex %>', '<%= variant.color._id %>', '<%= variant.size._id %>')"
                          class="btn-colour <%= index === 0 ? 'active' : '' %>"
                          for="colour_<%= variant.color.name %>"
                          data-color-hex="<%= variant.color.hex %>"
                          data-color-id="<%= variant.color._id %>"
                          data-size-id="<%= variant.size._id %>"
                        ></label>

                        <input
                          class="input-invisible"
                          type="radio"
                          name="colour"
                          value="<%= variant.color._id %>"
                          id="colour_<%= variant.color.name %>"
                          required
                        />
                      </li>
                      <% } %> <% }); %>
                    </ul>
                  </div>
                  <div class="col-12 detail-option mb-3">
                    <h6 class="detail-option-heading">Size <span>(required)</span></h6>
                    <ul class="list-inline mb-0 sizes-wrapper">
                      <% let renderedSizes = {}; %> <% product.variants.forEach((variant, index) => { %> <% if (variant.size &&
                      !renderedSizes[variant.size.value]) { %> <% renderedSizes[variant.size.value] = true; %>
                      <li class="list-inline-item">
                        <label
                          onclick="selectSize('<%= variant.size.value %>', '<%= variant.size._id %>', '<%= variant.color._id %>')"
                          class="btn btn-sm btn-outline-secondary detail-option-btn-label size-option <%= index === 0 ? 'active' : '' %>"
                          for="size_<%= variant.size.value %>"
                          data-size-value="<%= variant.size.value %>"
                          data-size-id="<%= variant.size._id %>"
                          data-color-id="<%= variant.color._id %>"
                        >
                          <%= variant.size.value %>
                          <input
                            class="input-invisible"
                            type="radio"
                            name="size"
                            value="<%= variant.size._id %>"
                            id="size_<%= variant.size.value %>"
                            required
                          />
                        </label>
                      </li>
                      <% } %> <% }); %>
                    </ul>
                  </div>
                </div>
              </div>
            </div>

            <div class="pb-3">
              <% product.variants.forEach(variant => { %>

              <h6>Total number of stocks: <%= variant.stock %></h6>
              <% }) %>
            </div>

            <input class="m-3" name="quantity" type="number" id="productQuantity" value="1" data-stock="<% stocks %>" autocomplete="off" />
            <div class="product__details__cart__option">
              <% let totalStock = 0; %> <% product.variants.forEach(variant => { %> <% totalStock += variant.stock; %> <% }); %> <% if (totalStock >0)
              { %>
              <button class="btn primary-btn btn-outline-secondary" onclick="addToCart('<%= product._id %>')">
                <i class="bi bi-cart me-2"></i>
                Add to Cart
              </button>
              <% } else { %>
              <a href="#" class="btn btn-danger">Out of Stock</a>
              <% } %>
            </div>

            <div class="col product__details__btns__option">
              <% if (product.wishlist === true) { %>

              <a
                href="javascript:void(0);"
                onclick="deleteWishlist(event, '<%= product._id %>',this)"
                id="wishlist_delete"
                aria-label="Add to Wishlist"
              >
                <button class="btn btn-outline-danger">
                  <img src="../../public/img/red_heart.svg" id="wishlist_img_filled" alt="" />
                </button>
              </a>
              <% }else{ %>

              <a href="javascript:void(0);" onclick="addWishlist(event, '<%= product._id %>',this)" id="wishlist_add" aria-label="Add to Wishlist">
                <button class="btn btn-outline-secondary">
                  <img src="../../public/img/icon/heart.png" id="wishlist_img_notfilled" alt="" />
                </button>
              </a>

              <% } %>

              <a href="#"><i class="fa fa-exchange"></i> Add To Compare</a>
            </div>

            <div class="product__details__last__option">
              <h5><span>Guaranteed Safe Checkout</span></h5>
              <img src="../../public/img/shop-details/details-payment.png" alt="" />
              <ul>
                <li>
                  <span>Categories:</span>
                  <%= product.category.name %>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>

      <div class="tab-style3">
        <ul class="nav nav-tabs text-uppercase">
          <li class="nav-item">
            <a class="nav-link active" id="Description-tab" data-bs-toggle="tab" href="#Description">Description</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="Additional-info-tab" data-bs-toggle="tab" href="#Additional-info">Additional info</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="Reviews-tab" data-bs-toggle="tab" href="#Reviews">Reviews</a>
          </li>
        </ul>

        <div class="tab-content shop_info_tab entry-main-content">
          <!-- Description Tab -->
          <div class="tab-pane fade show active" id="Description">
            <div><%= product.description %></div>
          </div>

          <!-- Additional-info Tab -->
          <div class="tab-pane fade" id="Additional-info">
            <table class="font-md">
              <tbody>
                <tr class="stand-up">
                  <th>Brand</th>
                  <td></td>
                </tr>
                <tr class="folded-wo-wheels">
                  <th>Colour</th>
                  <td></td>
                </tr>
              </tbody>
            </table>
          </div>

          <!-- Reviews Tab -->
          <div class="tab-pane fade" id="Reviews">
            <div class="comments-area">
              <div class="row">
                <div class="col-lg-8">
                  <h4 class="mb-30">Customer questions & answers</h4>
                  <div class="comment-list"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- Shop Details Section End -->

<!-- Related Section Begin -->
<section class="related spad">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <h3 class="related-title">Related Product</h3>
      </div>
    </div>
    <div class="row">
      <% relatedProducts.forEach(product => { %>
      <div class="col-lg-3 col-md-6 col-sm-6 mb-4">
        <div class="product__item">
          <div class="product__item__pic set-bg">
            <a href="/user/product-list/<%= product._id %>">
              <img
                src="/uploads/images/<%= product.primaryImages[0] ? product.primaryImages[0].name : product.secondaryImages[0].name %>"
                alt="<%= product.productName %>"
              />
            </a>
            <span class="label"><%= product.sale ? 'Sale' : 'New' %></span>
            <ul class="product__hover">
              <li>
                <a href="#"><img src="/img/icon/heart.png" alt="" /></a>
              </li>
              <li>
                <a href="#"><img src="/img/icon/compare.png" alt="" /><span>Compare</span></a>
              </li>
              <li>
                <a href="#"><img src="/img/icon/search.png" alt="" /></a>
              </li>
            </ul>
          </div>
          <div class="product__item__text">
            <h6><%= product.name %></h6>
            <% let totalStock = 0; %> <% product.variants.forEach(variant => { %> <% totalStock += variant.stock; %> <% }); %> <% if (totalStock > 0)
            { %>
            <a href="/user/add-to-cart" class="add-cart">+ Add To Cart</a>
            <% } else { %>
            <a href="#" class="out-of-stock">Out of Stock</a>
            <% } %>
            <div class="rating">
              <% for (let i = 0; i < 5; i++) { %>
              <i class="fa fa-star<%= i < product.rating ? '' : '-o' %>"></i>
              <% } %>
            </div>
            <h5>$<%= product.actualPrice %></h5>
          </div>
        </div>
      </div>
      <% }); %>
    </div>
  </div>
</section>
<!-- Related Section End -->

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<%- include('../../views/partials/user/footer') %>

<script>
  async function addWishlist(event, productId, element) {
    event.preventDefault();

    console.log("these are the updates", event, productId, element);
    try {
      const response = await fetch(`/wishlist/${productId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        // You can include productId in the body if needed
        body: JSON.stringify({ productId }),
      });

      // Check if the response is OK (status 200-299)
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Ensure the response is JSON
      const result = await response.json();
      if (result.success) {
        Swal.fire({
          icon: "success",
          title: "Success",
          text: "You have successfully added this product to wishlist",
          timer: 3000, // 3-second timer
          showConfirmButton: false, // Optionally hide the confirm button
        }).then(() => {
          location.reload();
        });
      } else {
        Swal.fire("Error", result.message || "Failed to add product to wishlist", "error").then(() => {
          location.reload();
        });
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire("Error", "An error occurred while adding the product to the wishlist", "error");
    }
  }

  async function deleteWishlist(event, productId, element) {
    event.preventDefault();

    console.log("these are the updates", event, productId, element);

    try {
      const response = await fetch(`/wishlist/${productId}`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        // You can include productId in the body if needed
        body: JSON.stringify({ productId }),
      });

      // Check if the response is OK (status 200-299)
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Ensure the response is JSON
      const result = await response.json();
      if (result.success) {
        Swal.fire({
          icon: "success",
          title: "Success",
          text: "You have successfully removed this product from the wishlist",
          timer: 3000, // 3-second timer
          showConfirmButton: false, // Optionally hide the confirm button
        }).then(() => {
          location.reload();
        });
      } else {
        Swal.fire("Error", result.message || "Failed to remove product from the wishlist", "error").then(() => {
          location.reload();
        });
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire("Error", "An error occurred while removing the product from the wishlist", "error");
    }
  }
</script>
<script>
  function imageZoom(imgID, resultID) {
    const img = document.getElementById(imgID);
    const result = document.getElementById(resultID);
    const lens = document.createElement("DIV");
    lens.setAttribute("class", "img-zoom-lens");

    img.parentElement.insertBefore(lens, img);

    img.addEventListener("mouseenter", function () {
      lens.style.display = "block";
      result.style.display = "block";
      const cx = result.offsetWidth / lens.offsetWidth;
      const cy = result.offsetHeight / lens.offsetHeight;
      result.style.backgroundImage = `url('${img.src}')`;
      result.style.backgroundSize = `${img.width * cx}px ${img.height * cy}px`;

      function moveLens(e) {
        e.preventDefault();
        const pos = getCursorPos(e);
        let x = pos.x - lens.offsetWidth / 2;
        let y = pos.y - lens.offsetHeight / 2;

        if (x > img.width - lens.offsetWidth) x = img.width - lens.offsetWidth;
        if (x < 0) x = 0;
        if (y > img.height - lens.offsetHeight) y = img.height - lens.offsetHeight;
        if (y < 0) y = 0;

        lens.style.left = x + "px";
        lens.style.top = y + "px";
        result.style.backgroundPosition = `-${x * cx}px -${y * cy}px`;
      }

      let animationFrame;
      function onMouseMove(e) {
        if (animationFrame) {
          cancelAnimationFrame(animationFrame);
        }
        animationFrame = requestAnimationFrame(() => moveLens(e));
      }

      img.addEventListener("mousemove", onMouseMove);
      img.addEventListener("touchmove", onMouseMove);

      img.addEventListener("mouseleave", function () {
        lens.style.display = "none";
        result.style.display = "none";
        img.removeEventListener("mousemove", onMouseMove);
        img.removeEventListener("touchmove", onMouseMove);
        cancelAnimationFrame(animationFrame);
      });
    });

    function getCursorPos(e) {
      const a = img.getBoundingClientRect();
      const x = e.pageX - a.left - window.pageXOffset;
      const y = e.pageY - a.top - window.pageYOffset;
      return { x: x, y: y };
    }
  }

  imageZoom("main-product-image", "myresult");
  imageZoom("secondary-product-image-0", "myresult");
  imageZoom("secondary-product-image-1", "myresult");
  imageZoom("secondary-product-image-2", "myresult");
  imageZoom("secondary-product-image-3", "myresult");
</script>

<script defer>
  document.addEventListener("DOMContentLoaded", function () {
    const buttons = document.querySelectorAll(".btn-colour");
    buttons.forEach((btn) => {
      const hex = btn.getAttribute("data-color-hex");
      btn.style.backgroundColor = hex;
    });
  });

  let selectedColorId = null;
  let selectedSizeId = null;

  const price = document.getElementById("productPrice").textContent;
  const quantity = document.getElementById("productQuantity").value;

  function selectColor(hex, colorId, sizeId) {
    document.querySelectorAll(".btn-colour").forEach((el) => el.classList.remove("active"));
    document.querySelector(`.btn-colour[data-color-hex="${hex}"]`).classList.add("active");
    selectedColorId = colorId;
    selectedSizeId = sizeId;
  }

  function selectSize(sizeValue, sizeId, colorId) {
    document.querySelectorAll(".size-option").forEach((el) => el.classList.remove("active"));
    document.querySelector(`.size-option[data-size-value="${sizeValue}"]`).classList.add("active");
    selectedSizeId = sizeId;
    selectedColorId = colorId;
  }

  const sellingPrice = `<%- JSON.stringify(product.sellingPrice) %>`;
  const bundleQuantity = `<%- JSON.stringify(product.bundleQuantity)%>`;
  const bundlePrice = `<%- JSON.stringify(product.bundlePrice)%>`;

  console.log("Testing bundle quantities and price", quantity, sellingPrice, bundlePrice, bundleQuantity);

  // Function to update price dynamically
  function updatePrice(quantity) {
    const priceDisplayElement = document.getElementById("productPrice"); // The element to update price dynamically

    // Check if the quantity exceeds the bundleQuantity to apply bundle price
    if (quantity >= bundleQuantity) {
      // Apply the bundle price
      priceDisplayElement.innerHTML = `
      <h3>₹${bundlePrice}</h3>
      <h3 ><span style="font-size: 24px; font-weight: bold;">₹<%= product.sellingPrice %>.00</span> <span>₹<%= product.actualPrice %>.00</span></h3>
      `;
    } else {
      priceDisplayElement.innerHTML = `<h3>₹${sellingPrice}</h3>`;
    }
  }

  // Attach an event listener to the quantity input field to update price dynamically
  const quantityInput = document.getElementById("productQuantity");
  quantityInput.addEventListener("input", function () {
    const quantity = parseInt(this.value, 10); // Get the current quantity from the input field
    console.log("this is quantity", quantity);
    updatePrice(quantity); // Call the updatePrice function with the new quantity
  });

  // Initial price setting for the default quantity
  updatePrice(parseInt(quantityInput.value, 10));

  function addToCart(productId) {
    const quantity = document.getElementById("productQuantity").value;

    console.log("this is details page", quantity);

    if (!selectedColorId || !selectedSizeId) {
      Swal.fire({
        icon: "error",
        title: "Select a Color & Size",
        text: "Kindly select a color and size",
        showConfirmButton: true,
      });
      return;
    }

    const quantityPerPerson = `<%- JSON.stringify(product.quantity)%>`;

    if (quantity > quantityPerPerson) {
      Swal.fire({
        icon: "error",
        title: "Quantity Exceeded",
        text: "You have entered the maximum quantity per order",
        showConfirmButton: false,
        timer: 1500,
      });
      return;
    }

    if (quantity == 0) {
      Swal.fire({
        icon: "error",
        title: "Quantity cannot be zero",
        text: "You have entered invalid quantity",
        showConfirmButton: false,
        timer: 1500,
      });
      return;
    }

    const totalStock = `<%- JSON.stringify(stocks) %>`;
    console.log("this is the total stocks available: ", totalStock);

    if (quantity > totalStock) {
      Swal.fire({
        icon: "error",
        title: "Limited Stock",
        text: `This product has only ${totalStock} stock left`,
        showConfirmButton: true,
      });
      return;
    }

    const existingQuantityInCart = `<%- JSON.stringify(existingQuantity) %>`;
    if (Number(existingQuantityInCart) + Number(quantity) > Number(totalStock)) {
      Swal.fire({
        icon: "error",
        title: "Limited Stock",
        text: `This product has only ${totalStock} stocks left`,
        showConfirmButton: true,
      });
      return;
    }
    console.log("this is the total stocks available: ", existingQuantityInCart);

    if (selectedColorId && selectedSizeId) {
      fetch("/user/add-to-cart", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          productId,
          // variantId: variantId,
          colorId: selectedColorId,
          sizeId: selectedSizeId,
          quantity, // Send the quantity
          price,
        }),
      })
        .then((response) => {
          if (response.ok) {
            console.log("Product added to cart!");
          } else {
            console.error("Error adding product to cart");
          }
        })
        .then((data) => {
          Swal.fire({
            icon: "success",
            title: "Added to Cart",
            text: "The item has been successfully added to your cart!",
            showCancelButton: true,
            confirmButtonText: "Go to Cart",
            cancelButtonText: "Continue Shopping",
          }).then((result) => {
            if (result.isConfirmed) {
              // Redirect to the cart page
              window.location.href = "/cart";
            }
          });
        })

        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "Something went wrong!",
          });
        });
    } else {
      // Handle case where no variant is selected
      // alert("Please select a color and size.");
    }
  }
</script>

<!-- <script>
  document.addEventListener('DOMContentLoaded', function () {
    const buttons = document.querySelectorAll('.btn-colour');
    buttons.forEach(btn => {
      const hex = btn.getAttribute('data-color-hex');
      btn.style.backgroundColor = hex;
    });
  });
</script> -->
