<%- include('../partials/user/header') %>

<style>
  .userProfileMain {
    width: 80vw;
    height: 30%;
    margin: 0 auto;
    border-radius: 0px;
    background-color: rgb(0, 0, 0);
  }
  .userProfileH1 {
    width: 50%;
    margin: auto auto;
    font-family: "Baloo", cursive;
    color: white;
    font-size: 7vw;
  }

  .order-summary,
  .shipping-info,
  .order-item {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .order-summary h4,
  .items-list h5,
  .shipping-info h5 {
    border-bottom: 2px solid #000000;
    padding-bottom: 8px;
    margin-bottom: 16px;
  }

  .order-actions button {
    margin-right: 10px;
  }
</style>

<!-- Bootstrap 5 CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />
<!-- Bootstrap 5 JS (necessary for modal functionality) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<section>
  <!-- Hero-Content -->
  <div class="pb-5 text-center">
    <div class="card userProfileMain" style="background-color: #000000">
      <h1 class="userProfileH1">Orders</h1>
    </div>
  </div>
</section>

<section>
  <div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-12 col-md-10">
        <!-- Iterate over each order -->
        <% order.forEach(singleOrder => { %>
        <!-- Check if the order ID matches the selected orderId -->
        <% if (singleOrder._id.toString() === orderId.toString()) { %> <% singleOrder.items.forEach((item, index) => { %>
        <!-- Order Summary -->
        <div class="order-summary mb-4 p-4 border rounded bg-light shadow">
          <h4 class="mb-3">Order Details</h4>
          <button
            class="btn btn-outline-success ms-auto d-flex justify-content-end align-items-center"
            onclick="downloadPdf('<%= singleOrder._id %>')"
            id="downloadPdf"
          >
            Download Invoice
          </button>
          <p><strong>Order Number:</strong> <%= singleOrder._id %></p>

          <p><strong>Order Date:</strong> <%= new Date(singleOrder.createdAt).toLocaleDateString() %></p>
          <p><strong>Total(Including delivery charge) : </strong> ₹<%= singleOrder.totalPrice %></p>
        </div>

        <!-- Items List -->
        <div class="items-list mb-4">
          <h5 class="mb-3">Items in Your Order</h5>
          <div class="order-item p-3 mb-3 border rounded shadow">
            <div class="row align-items-center">
              <div class="col-md-4">
                <% let imagePath = ''; %> <% if (item.productId.primaryImages && item.productId.primaryImages.length > 0) { %> <% imagePath =
                item.productId.primaryImages[0].name; %> <% } %>
                <img class="img-fluid rounded shadow-sm" src="/uploads/images/<%= imagePath %>" alt="<%= item.productId.name %>" />
              </div>
              <div class="col-md-8">
                <p><strong>Name:</strong> <%= item.productId.name %></p>
                <p><strong>Quantity:</strong> <%= item.quantity %></p>
                <p><strong>Price:</strong> ₹<%= item.itemTotal %></p>
                <p>
                  <strong>Delivery Status:</strong>
                  <span
                    class="badge <%= item.status === 'Delivered' ? 'badge-success' : item.status === 'Cancelled' ? 'badge-danger' : 'badge-warning' %>"
                  >
                    <%= item.status %>
                  </span>
                </p>

                <p><strong>PaymentStatus:</strong>
                  <span class="badge <%= item.paymentStatus === "Pending" ? "badge-warning" : "badge-success" %>">
                  <%= item.paymentStatus %>
                </span></p>
                <% if (item.cancelRefundMethod) { %>
                <p><strong>Refund method: </strong> <%= item.cancelRefundMethod %></p>
                <% } %>

                <!-- Delivery & Return Dates -->
                <% if (item.status === 'Delivered') { %>
                <p><strong>Delivery Date:</strong> <%= new Date(singleOrder.createdAt).toLocaleDateString() %></p>
                <% const returnByDate = new Date(singleOrder.createdAt); returnByDate.setDate(returnByDate.getDate() + 7); %>
                <p><strong>Return By:</strong> <%= returnByDate.toLocaleDateString() %></p>
                <% } else { %>
                <p><strong>Delivery Date:</strong> --</p>
                <p><strong>Return By:</strong> --</p>
                <% } %> <% if (item.paymentStatus === "Pending") { %>
                <div class="d-flex d-row align-items-center">
                  <div class="">
                    <button class="btn btn-outline-success complete_payment_button mr-4">Complete payment</button>
                  </div>
                  <div id="timer"></div>
                </div>
                <% } %>

                <!-- Actions -->
                <div class="order-actions mt-3 d-flex">
                  <% if (item.status === "Delivered") { %>
                  <button class="btn btn-outline-primary return-btn mr-2" data-bs-toggle="modal" data-bs-target="#orderReturnModal-<%=item.orderID%>">
                    Return Order
                  </button>

                  <!-- Return Modal -->
                  <div
                    class="modal fade"
                    id="orderReturnModal-<%=item.orderID%>"
                    tabindex="-1"
                    aria-labelledby="orderReturnModalLabel-<%=item.orderID%>"
                    aria-hidden="true"
                  >
                    <div class="modal-dialog">
                      <div class="modal-content">
                        <div class="modal-header">
                          <h5 class="modal-title" id="orderReturnModalLabel-<%=item.orderID%>">Return Item: <%= item.productId.name %></h5>
                          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                          <form id="orderActionForm" class="return-form" data-order-id="<%= item.orderID %>">
                            <div class="mb-3">
                              <label for="orderReturn-<%=item.orderID%>" class="form-label">Reason for Return</label>
                              <textarea
                                class="form-control"
                                id="orderReturn-<%=item.orderID%>"
                                rows="3"
                                placeholder="Please describe the reason"
                                required
                              ></textarea>
                              <!-- Word count display -->
                              <small id="wordCount-<%= item.orderID %>">0/1000 words</small>
                            </div>

                            <div class="mb-3 row mt-4">
                              <label for="orderReturnRefundMethod-<%= item.orderID%>" class="form-label">Refund method</label>
                              <select name="orderReturnRefundMethod" id="orderReturnRefundMethod-<%= item.orderID%>">
                                <option value="RefundToBankAccount">Refund to the bank</option>
                                <option value="RefundToWallet">Refund to the wallet</option>
                              </select>
                            </div>
                          </form>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                          <button
                            type="button"
                            class="btn btn-primary"
                            data-order-id="<%=item.orderID%>"
                            onclick="confirmAction('<%=item.orderID%>', 'return')"
                          >
                            Return Product
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>

                  <% } else if (item.status !== "Cancelled" && item.status !== "Return") { %>
                  <button class="btn btn-outline-danger cancel-btn" data-bs-toggle="modal" data-bs-target="#orderCancelModal-<%= item.orderID %>">
                    Cancel Order
                  </button>

                  <!-- Cancel Modal (Unique for each product) -->
                  <div
                    class="modal fade"
                    id="orderCancelModal-<%= item.orderID %>"
                    tabindex="-1"
                    aria-labelledby="orderActionModalLabel-<%= item.orderID %>"
                    aria-hidden="true"
                  >
                    <div class="modal-dialog">
                      <div class="modal-content">
                        <div class="modal-header">
                          <h5 class="modal-title" id="orderActionModalLabel-<%= item.orderID %>">Cancel Item: <%= item.productId.name %></h5>
                          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                          <form id="orderActionForm" class="cancel-form" data-order-id="<%= item.orderID %>">
                            <div class="mb-3">
                              <label for="orderCancel-<%= item.orderID %>" class="form-label">Reason for Cancel</label>
                              <textarea
                                class="form-control"
                                id="orderCancel-<%= item.orderID %>"
                                rows="3"
                                placeholder="Please describe the reason"
                                required
                              ></textarea>
                              <!-- Word count display -->
                              <small id="wordCount-<%= item.orderID %>">0/1000 words</small>
                            </div>

                            <%= console.log(item) %> <% if (item.paymentStatus.toString() === "Paid") { %>

                            <div class="mb-3 row mt-4">
                              <label for="orderCancelRefundMethod-<%= item.orderID%>" class="form-label">Refund method</label>
                              <select name="orderCancelRefundMethod" id="orderCancelRefundMethod-<%= item.orderID%>">
                                <option value="RefundToBankAccount">Refund to the bank</option>
                                <option value="RefundToWallet">Refund to the wallet</option>
                              </select>
                            </div>
                            <% }%>

                            <div class="mb-3 row mt-4 d-none">
                              <label for="orderCancelRefundMethod-<%= item.orderID%>" class="form-label">Refund method</label>
                              <select name="orderCancelRefundMethod" id="orderCancelRefundMethod-<%= item.orderID%>">
                                <option value="RefundToBankAccount">Refund to the bank</option>
                                <option value="RefundToWallet">Refund to the wallet</option>
                              </select>
                            </div>
                          </form>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                          <button
                            type="button"
                            class="btn btn-primary"
                            data-order-id="<%= item.orderID %>"
                            onclick="confirmAction('<%= item.orderID %>', 'cancel')"
                          >
                            Cancel Product
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                  <% } %>
                </div>
              </div>
            </div>
          </div>
          <% }) %>
        </div>

        <!-- Shipping Information -->
        <div class="shipping-info mb-4 p-4 border rounded bg-light shadow">
          <h5>Shipping Information</h5>
          <p>
            <strong>Address:</strong> <%= singleOrder.shippingAddress.address %>, <%= singleOrder.shippingAddress.city %>, <%=
            singleOrder.shippingAddress.zip %>
          </p>
          <p><strong>Phone:</strong> <%= singleOrder.shippingAddress.phone %></p>
          <% if (singleOrder.trackingNumber) { %>
          <p><strong>Tracking Number:</strong> <%= singleOrder.trackingNumber %></p>
          <% } %>
        </div>

        <% } %>
        <!-- End of order ID check -->
        <% }) %>
        <!-- End of orders loop -->
      </div>
    </div>
  </div>
</section>

<script>
  let countTimer = 60;

  function startCount() {
    const timerId = document.getElementById("timer");
    const cancelButton = document.querySelector(".cancel-btn");
    const continueButton = document.querySelector(".complete_payment_button");

    const countdownIntervel = setInterval(() => {
      let minutes = Math.floor(countTimer / 60);
      let seconds = countTimer % 60;

      minutes = minutes < 10 ? "0" + minutes : minutes;
      seconds = seconds < 10 ? "0" + seconds : seconds;

      timerId.textContent = `Make the payment before the time ${minutes}:${seconds}`;

      if (countTimer <= 0) {
        clearInterval(countdownIntervel);
        timerId.textContent = `Your time is over for making the payments`;
        cancelButton.style.display = "none";
        continueButton.style.display = "none";
        continueButton.style.margin = "0";
      }

      countTimer--;
    }, 1000);
  }

  startCount();
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const completePayment = document.querySelector(".complete_payment_button");
    if (completePayment) {
      const orders = <%- JSON.stringify(orders) %>;
      const user = <%- JSON.stringify(user) %>;
      console.log( orders,orders.totalPrice, "this is the order page order and user" )

      completePayment.addEventListener("click", async function (e) {
        e.preventDefault();

       const response = await fetch("/continueOrder",{
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({order: orders, user: user}),
       })

       Swal.close();

       const data = await response.json();

       if(data.status){
         showRazorpay(data.order, data.user);
       }
       if(data.success){
        Swal.fire({
          icon: "success",
          title: "Order Successfull",
          text: data.message,
        }).then(() =>{
          location.assign("/orders")
        })
       }

      });
    }
  });

  const showRazorpay = (order, user) => {
    console.log(order, user);

    var options = {
      key: "rzp_test_FGSvpGKo4JrSBW",
      amount: order.amount,
      currency: "INR",
      name: "Unbound",
      description: "Test Transaction",
      order_id: order.id, // Corrected 'orderId' to 'order_id' to match Razorpay's API
      handler: async function (response) {
        await verifyPayment(response); // Pass correct 'response'
      },
      prefill: {
        name: user.name,
        email: user.email,
        contact: user.phone,
      },
      notes: {
        address: "Razorpay Corporate Office",
      },
      theme: {
        color: "#06373A",
      },
    };

    var rzp1 = new Razorpay(options);

    rzp1.open();
    rzp1.on("payment.failed", function (response) {
      swal.fire("Failed!", response.error.description, "error").then(() => {
        location.assign("/");
      });
    });
  };

  const verifyPayment = async (response) => {
    try {
      console.log("Verifying payment with response:", response);

      const res = await fetch("/user/verify-payment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ response }),
      });

      const data = await res.json();
      console.log("Verification result:", data);

      if (data.success) {
        location.assign("/orders");
      } else {
        swal.fire("Payment Verification Failed!", "Please try again.", "error").then(() => {
          location.assign("/");
        });
      }
    } catch (error) {
      console.error("Payment verification failed", error);
      swal.fire("Error!", "Payment verification could not be completed.", "error");
    }
  };
</script>

<script>
  const downloadPdf = async (orderId) => {
    try {
      const response = await fetch(`/downloadInvoicePdf?orderId=${orderId}`, {
        method: "GET",
      });

      if (!response.ok) {
        throw new Error("Failed to download the invoice.");
      }

      const blob = await response.blob(); // Handle the response as a blob (binary data)
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "Order_Invoice.pdf"; // You can customize the filename
      document.body.appendChild(a);
      a.click();
      a.remove();

      Swal.fire({
        icon: "success",
        title: "Success",
        text: "You have successfully downloaded the PDF",
        showConfirmButton: false,
        timer: 2000,
      });
    } catch (error) {
      Swal.fire({
        icon: "error",
        title: "Error",
        text: `An error occurred while downloading the invoice. ${error.message}`,
        showConfirmButton: false,
        timer: 2000,
      });
    }
  };

  const MAX_WORDS = 1000;

  document.addEventListener("DOMContentLoaded", function () {
    const cancelForms = document.querySelectorAll(".cancel-form");

    cancelForms.forEach((form) => {
      const orderId = form.dataset.orderId;
      const textarea = document.getElementById(`orderCancel-${orderId}`);
      const orderCancelRefundMethod = document.getElementById(`orderCancelRefundMethod-${orderCancelRefundMethod}`);
      const wordCountEl = document.getElementById(`wordCount-${orderId}`);

      const updateWordCount = () => {
        const words = textarea.value.trim().split(/\s+/);
        const wordCount = words.filter((word) => word.length > 0).length;

        // If word count exceeds the max limit, truncate the extra words
        if (wordCount > MAX_WORDS) {
          textarea.value = words.slice(0, MAX_WORDS).join(" ");
        }

        // Update the word count display
        wordCountEl.textContent = `${Math.min(wordCount, MAX_WORDS)}/${MAX_WORDS} words`;
      };

      // Listen to textarea input and call updateWordCount
      textarea.addEventListener("input", updateWordCount);

      // Initial word count update
      updateWordCount();
    });
  });

  document.addEventListener("DOMContentLoaded", function () {
    const returnForms = document.querySelectorAll(".return-form");

    returnForms.forEach((form) => {
      const orderId = form.dataset.orderId;
      const textarea = document.getElementById(`orderReturn-${orderId}`);
      const orderReturnRefundMethod = document.getElementById(`orderReturnRefundMethod-${orderReturnRefundMethod}`);

      const wordCountEl = document.getElementById(`wordCount-${orderId}`);

      const updateWordCount = () => {
        const words = textarea.value.trim().split(/\s+/);
        const wordCount = words.filter((word) => word.length > 0).length;

        // If word count exceeds the max limit, truncate the extra words
        if (wordCount > MAX_WORDS) {
          textarea.value = words.slice(0, MAX_WORDS).join(" ");
        }

        // Update the word count display
        wordCountEl.textContent = `${Math.min(wordCount, MAX_WORDS)}/${MAX_WORDS} words`;
      };

      // Listen to textarea input and call updateWordCount
      textarea.addEventListener("input", updateWordCount);

      // Initial word count update
      updateWordCount();
    });
  });

  const confirmAction = (orderId, action) => {
    let actionText, confirmButtonText;

    switch (action) {
      case "return":
        actionText = "return";
        confirmButtonText = "Yes, Return the Order!";
        break;
      case "cancel":
        actionText = "cancel";
        confirmButtonText = "Yes, Cancel the Order!";
        break;
      default:
        return;
    }

    Swal.fire({
      title: "Are you sure?",
      text: `Do you want to ${actionText} this order?`,
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: confirmButtonText,
      cancelButtonText: "No, Keep the Order",
      reverseButtons: true,
    }).then((result) => {
      if (result.isConfirmed) {
        if (action === "return") {
          returnTheOrder(orderId);
        } else if (action === "cancel") {
          cancelTheOrder(orderId);
        }
      }
    });
  };

  const returnTheOrder = async (orderId) => {
    const orderReturn = document.getElementById(`orderReturn-${orderId}`).value;
    const orderReturnRefundMethod = document.getElementById(`orderReturnRefundMethod-${orderId}`).value;

    try {
      let isReturnValid = checkReturnReason(orderId);
      if (!isReturnValid) {
        throw new Error("Form is not valid");
      }

      const response = await fetch(`/order/${orderId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ action: "return", returnReason: orderReturn, orderReturnRefundMethod }),
      });
      const result = await response.json();
      if (result.success) {
        Swal.fire("Returned!", "Your order has been returned.", "success").then(() => {
          location.reload();
        });
      }
    } catch (error) {
      Swal.fire("Error", "An error occurred while returning the order.", "error");
    }
  };

  const cancelTheOrder = async (orderId) => {
    const orderCancel = document.getElementById(`orderCancel-${orderId}`).value;
    const orderCancelRefundMethod = document.getElementById(`orderCancelRefundMethod-${orderId}`).value;

    try {
      let isCancelValid = checkCancelReason(orderId); // Pass orderId here
      if (!isCancelValid) {
        throw new Error("Form is not valid");
      }

      const response = await fetch(`/order/${orderId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ action: "cancel", cancelReason: orderCancel, orderCancelRefundMethod }),
      });
      const result = await response.json();
      if (result.success) {
        Swal.fire("Cancelled!", "Your order has been cancelled.", "success").then(() => {
          location.reload();
        });
      }
    } catch (error) {
      Swal.fire("Error", "An error occurred while cancelling the order.", "error");
    }
  };

  // const form = document.getElementById("orderActionForm");

  const isRequired = (value) => (value === "" ? false : true);

  const checkCancelReason = (orderId) => {
    const cancelReason = document.getElementById(`orderCancel-${orderId}`);
    const cancelProduct = cancelReason.value.trim();
    let isValid = false;

    if (!isRequired(cancelProduct)) {
      showError(cancelReason, "Reason cannot be blank.");
    } else if (cancelProduct.split(" ").length < 5) {
      showError(cancelReason, "Reason should be a minimum of 5 words.");
    } else {
      showSuccess(cancelReason);
      isValid = true;
    }
    return isValid;
  };

  const checkReturnReason = (orderId) => {
    const returnEl = document.getElementById(`orderReturn-${orderId}`);
    const returnProduct = returnEl.value.trim();
    let isValid = false;

    if (!isRequired(returnProduct)) {
      showError(returnEl, "Reason cannot be blank.");
    } else if (returnProduct.split(" ").length < 5) {
      showError(returnEl, "Reason should be a minimum of 5 words");
    } else {
      showSuccess(returnEl);
      isValid = true;
    }
    return isValid;
  };

  const showError = (input, message) => {
    const formField = input.parentElement;
    formField.classList.remove("success", "is-valid");
    formField.classList.add("error", "is-invalid");
    input.classList.add("error", "is-invalid");

    const error = formField.querySelector("small");
    if (error) {
      error.textContent = message;
    }
  };

  const showSuccess = (input) => {
    const formField = input.parentElement;
    formField.classList.remove("error", "is-invalid");
    input.classList.remove("error", "is-invalid");

    formField.classList.add("success", "is-valid");
    input.classList.add("success", "is-valid");

    const error = formField.querySelector("small");
    if (error) {
      error.textContent = "";
    }
  };
</script>

<%- include('../partials/user/footer') %>
