<%- include('../partials/user/header') %>

<style>
  .userProfileMain {
    width: 80vw;
    height: 30%;
    margin: 0 auto;
    border-radius: 0px;
    background-color: rgb(0, 0, 0);
  }
  .userProfileH1 {
    width: 50%;
    margin: auto auto;
    font-family: "Baloo", cursive;
    color: white;
    font-size: 7vw;
  }

  .order-summary,
  .shipping-info,
  .order-item {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .order-summary h4,
  .items-list h5,
  .shipping-info h5 {
    border-bottom: 2px solid #007bff;
    padding-bottom: 8px;
    margin-bottom: 16px;
  }

  .order-actions button {
    margin-right: 10px;
  }
</style>

<section>
  <!-- Hero-Content -->
  <div class="pb-5 text-center">
    <div class="card userProfileMain">
      <h1 class="userProfileH1">Order</h1>
    </div>
  </div>
</section>

<section>
  <div class="container mt-5">
    <div class="row">
      <div class="col-12 col-md-8 offset-md-2">
        <!-- Iterate over each order -->
        <% order.forEach(singleOrder => { %>
        <!-- Check if the order ID matches the selected orderId -->
        <% if (singleOrder._id.toString() === orderId.toString()) { %>

        <!-- Order Summary -->
        <div class="order-summary mb-4 p-4 border rounded bg-light">
          <h4>Order Details</h4>
          <p><strong>Order Number:</strong> <%= singleOrder._id %></p>
          <p>
            <strong>Status:</strong>
            <span
              class="badge <%= singleOrder.status === 'Delivered' ? 'badge-success' : singleOrder.status === 'Cancelled' ? 'badge-danger' : 'badge-warning' %>"
            >
              <%= singleOrder.status %>
            </span>
          </p>
          <p><strong>Order Date:</strong> <%= new Date(singleOrder.createdAt).toLocaleDateString() %></p>
          <p><strong>Total:</strong> ₹<%= singleOrder.totalPrice %></p>
        </div>

        <!-- Items List -->
        <div class="items-list mb-4">
          <h5>Items in Your Order</h5>
          <% singleOrder.items.forEach(item => { %>
          <div class="order-item p-3 mb-3 border rounded">
            <div class="d-flex justify-content-between">
              <div>
                <p><strong>Quantity:</strong> <%= item.quantity %></p>
                <p><strong>Price:</strong> ₹<%= item.itemTotal %></p>
              </div>
            </div>
          </div>
          <% }) %>
          <!-- End of items loop -->
        </div>

        <!-- Shipping Information -->
        <div class="shipping-info mb-4 p-4 border rounded bg-light">
          <h5>Shipping Information</h5>
          <p>
            <strong>Address:</strong> <%= singleOrder.shippingAddress.address %>, <%= singleOrder.shippingAddress.city %>, <%=
            singleOrder.shippingAddress.zip %>
          </p>
          <p><strong>Phone:</strong> <%= singleOrder.shippingAddress.phone %></p>
          <% if (singleOrder.trackingNumber) { %>
          <p><strong>Tracking Number:</strong> <%= singleOrder.trackingNumber %></p>
          <% } %>
        </div>

        <!-- Actions -->
        <div class="order-actions p-5 d-flex justify-content-center">
          <% if (singleOrder.canReturn) { %>

          <button
            class="btn btn-outline-primary return-btn"
            data-order-id="<%= singleOrder._id %>"
            onclick="confirmAction('<%- singleOrder._id %>','return')"
          >
            Return
          </button>
          <% } else if (singleOrder.canCancel) { %>
          <button
            class="btn btn-outline-danger cancel-btn"
            data-order-id="<%= singleOrder._id %>"
            onclick="confirmAction('<%- singleOrder._id %>','cancel')"
          >
            Cancel Order
          </button>
          <% } %>
        </div>

        <% } %>
        <!-- End of order ID check -->
        <% }) %>
        <!-- End of orders loop -->
      </div>
    </div>
  </div>
</section>

<%- include("../partials/user/footer") %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  const confirmAction = (orderId, action) => {
    let actionText, confirmButtonText;

    switch (action) {
      case "return":
        actionText = "return";
        confirmButtonText = "Yes, Return the order !";
        break;
      case "cancel":
        actionText = "cancel";
        confirmButtonText = "Yes, Cancel the order !"
        break;
      default:
        return;
    }

    Swal.fire({
      title: "Are you sure ?",
      text: `Do you want to  ${actionText} the order`,
      icon: "warning",
      showCancelButton: true,
      cancelButtonText: "No, Cancel",
      showConfirmButton: true,
      confirmButtonText: confirmButtonText,
      reverseButtons: true,
      timer: 5000,
      timerProgressBar: true,
    }).then((result) => {
      if (result.isConfirmed) {
        if (action === "return") {
          returnTheOrder(orderId, action);
        }else if(action === "cancel"){
          cancelTheOrder(orderId, action);
        }
      }
    });
  };

  const returnTheOrder = async (orderId, action) => {
    try {
      const response = await fetch(`/order/${orderId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ orderId, action }),
      });
      const result = await response.json();
      if (result.success) {
        Swal.fire({
          title: "Return Accepted",
          text: "The order has been successfully returned",
          icon: "success",
          showConfirmButton: false,
          timer: 1500,
        }).then(() => {
          location.reload();
        });
      } else {
        Swal.fire({
          title: "Error returning the product",
          text: "Something went wrong, kindly do again later",
          icon: "error",
          showConfirmButton: false,
          timer: 1500,
        });
      }
    } catch (error) {
      Swal.fire({
        title: "Error",
        text: "Your facing some internal error while returning the order",
        icon: "error",
        showConfirmButton: false,
        timer: 1500,
      }).then(() => {
        location.reload();
      });
    }
  };

  const cancelTheOrder = async (orderId, action) => {
  try {
    const response = await fetch(`/order/${orderId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ orderId, action }),
    });
    const result = await response.json();

    if (response.ok && result.success) { // Ensure both the response and success are true
      Swal.fire({
        title: "Cancel Accepted",
        text: "The order has been successfully cancelled",
        icon: "success",
        showConfirmButton: false,
        timer: 1500,
      }).then(() => {
        location.reload();
      });
    } else {
      Swal.fire({
        title: "Error cancelling the order",
        text: result.message || "The order is not cancelled, try cancelling later",
        icon: "error",
        showConfirmButton: false,
        timer: 1500,
      });
    }
  } catch (error) {
    Swal.fire({
      title: "Error",
      text: "You're facing some internal error while cancelling the order",
      icon: "error",
      showConfirmButton: false,
      timer: 1500,
    }).then(() => {
      location.reload();
    });
  }
};


 
</script>

<%- include('../partials/user/footer') %>
