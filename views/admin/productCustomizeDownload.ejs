<%- include('../partials/admin/header') %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>

<style>
  .image-container {
    display: flex;
    flex-direction: column;
    align-items: center; /* To center the button below the image */
  }

  .download-btn {
    margin-top: 10px; /* Adds some spacing between the image and the button */
  }

  .userProfileMain {
    width: 100%;
    height: 30%;
    margin: 0 auto;
    background-color: rgb(0, 0, 0);
  }

  .userProfileH1 {
    width: 100%;
    margin: 10px;
    font-family: "Baloo", cursive;
    color: white;
    font-size: 6vw;
  }

  .breadcrumbCls {
    background-color: rgb(0, 0, 0);
  }

  .custom-table thead th {
    text-align: center;
    vertical-align: middle;
    padding: 15px;
    color: #ffffff;
  }
</style>

<section>
  <div class="pb-5 text-center">
    <div class="card userProfileMain rounded">
      <h1 class="userProfileH1">Download Custom Design</h1>
    </div>
  </div>
</section>

<section>
  <div class="p-2">
    <table class="table">
      <thead class="table">
        <tr>
          <th scope="col">Product Name</th>
          <th scope="col">Front Image</th>
          <th scope="col">Back Image</th>
          <th scope="col">Left Image</th>
          <th scope="col">Right Image</th>
        </tr>
      </thead>
      <tbody>
        <% if ( customDesign.productId = checkProductId) { %>
        <tr>
          <td style="vertical-align: middle">
            <div class="d-flex justify-content-center align-items-center flex-column">
              <div class="mb-4"><%= products.name %></div>
              <div class="mb-4">
                <button class="btn btn-dark" onclick="downloadAllDesigns()">Download All Designs</button>
              </div>
              <div>
                <button class="btn btn-dark" onclick="downloadCustomAllDesigns()">Download Custom Designs</button>
              </div>
            </div>
          </td>
          <td class="col">
            <div class="image-container">
              <img id="frontImage" width="250" />
            </div>
          </td>
          <td class="col">
            <div class="image-container">
              <img id="backImage" width="250" />
            </div>
          </td>
          <td class="col">
            <div class="image-container">
              <img id="leftImage" width="250" />
            </div>
          </td>
          <td class="col">
            <div class="image-container">
              <img id="rightImage" width="250" />
            </div>
          </td>
        </tr>
        <% } else { %>
        <tr>
          <td colspan="5">No custom design found for this product.</td>
        </tr>
        <% } %>
      </tbody>
    </table>
  </div>
  <canvas id="canvasElement" style="display: none" height="0px"></canvas>
</section>

<%- include('../partials/admin/footer') %>
<script src="https://unpkg.com/idb@5.0.8/build/iife/index-min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script>

<script>
    let frontImage = document.getElementById("frontImage");
    let backImage = document.getElementById("backImage");
    let leftImage = document.getElementById("leftImage");
    let rightImage = document.getElementById("rightImage");

    let canvasElement = document.getElementById("canvasElement");
    const canvasData = <%- JSON.stringify(customDesign.canvasData) %>;

    const sides = ['front', 'back', 'left', 'right'];

    sides.forEach((item) => {
      const backgroundImageUrl = canvasData[item].backgroundImage;

      fabric.util.loadImage(backgroundImageUrl, function (img) {
        const image = new fabric.Image(img);

        canvasElement.width = image.width;
        canvasElement.height = image.height;

        const canvas = new fabric.Canvas(canvasElement);

        canvas.setBackgroundImage(image, canvas.renderAll.bind(canvas), {
          scaleX: canvasElement.width / image.width,
          scaleY: canvasElement.height / image.height,
        });

        canvas.loadFromJSON(canvasData[item].content, () => {
          canvas.renderAll();

          const imageUrl = canvas.toDataURL({
            format: "png",
            multiplier: 2,
          });

          if (item === 'front') {
            frontImage.src = imageUrl;
          } else if (item === 'back') {
            backImage.src = imageUrl;
          } else if (item === 'left') {
            leftImage.src = imageUrl;
          } else if (item === 'right') {
            rightImage.src = imageUrl;
          }
        });
      });
    });

    function downloadAllDesigns() {
      const sides = ['front', 'back', 'left', 'right'];
      const zip = new JSZip();

      let promises = sides.map((side) => {
        return new Promise((resolve, reject) => {
          const canvasElement = document.createElement("canvas");
          const ctx = canvasElement.getContext("2d");

          const backgroundImageUrl = canvasData[side].backgroundImage;

          fabric.util.loadImage(backgroundImageUrl, function (img) {
            const image = new fabric.Image(img);

            canvasElement.width = image.width;
            canvasElement.height = image.height;

            const canvas = new fabric.Canvas(canvasElement);

            canvas.setBackgroundImage(image, canvas.renderAll.bind(canvas), {
              scaleX: canvasElement.width / image.width,
              scaleY: canvasElement.height / image.height,
            });

            canvas.loadFromJSON(canvasData[side].content, () => {
              canvas.renderAll();

              const imageUrl = canvas.toDataURL({
                format: "png",
                multiplier: 2,
              });

              fetch(imageUrl)
                .then(res => res.blob())
                .then(blob => {
                  zip.file(`${side}-custom-design.png`, blob);
                  resolve();
                })
                .catch(err => reject(err));
            });
          });
        });
      });

      Promise.all(promises)
        .then(() => {
          zip.generateAsync({ type: 'blob' })
            .then((content) => {
              const link = document.createElement("a");
              link.href = URL.createObjectURL(content);
              link.download = 'custom-designs.zip';
              link.click();
            });
        })
        .catch(err => {
          console.error("Error generating zip file:", err);
        });
    }

    function downloadCustomAllDesigns() {
    const sides = ['front', 'back', 'left', 'right'];
    const zip = new JSZip();

    let promises = sides.map((side) => {
      return new Promise((resolve, reject) => {
        const canvasElement = document.createElement("canvas");
        const ctx = canvasElement.getContext("2d");

        const canvasWidth = 800;
        const canvasHeight = 1000;

        canvasElement.width = canvasWidth /2 ;
        canvasElement.height = canvasHeight /2;

        const canvas = new fabric.Canvas(canvasElement);

        canvas.loadFromJSON(canvasData[side].content, () => {
        canvas.setBackgroundImage(null, canvas.renderAll.bind(canvas));

          canvas.renderAll();

          const imageUrl = canvas.toDataURL({
            format: "png",
            multiplier: 4,
          });

          fetch(imageUrl)
            .then(res => res.blob())
            .then(blob => {
              zip.file(`${side}-custom-design.png`, blob);
              resolve();
            })
            .catch(err => reject(err));
        });
      });
    });

    Promise.all(promises)
      .then(() => {
        zip.generateAsync({ type: 'blob' })
          .then((content) => {
            const link = document.createElement("a");
            link.href = URL.createObjectURL(content);
            link.download = 'custom-designs.zip';
            link.click();
          });
      })
      .catch(err => {
        console.error("Error generating zip file:", err);
      });
  }
</script>
