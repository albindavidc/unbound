<%- include('../partials/admin/header') %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>

<style>
  .image-container {
    display: flex;
    flex-direction: column;
    align-items: center; /* To center the button below the image */
  }

  .download-btn {
    margin-top: 10px; /* Adds some spacing between the image and the button */
  }

  .userProfileMain {
    width: 100%;
    height: 30%;
    margin: 0 auto;
    background-color: rgb(0, 0, 0);
  }

  .userProfileH1 {
    width: 100%;
    margin: 10px;
    font-family: "Baloo", cursive;
    color: white;
    font-size: 6vw;
  }

  .breadcrumbCls {
    background-color: rgb(0, 0, 0);
  }

  .custom-table thead th {
    text-align: center;
    vertical-align: middle;
    padding: 15px;
    color: #ffffff;
  }
</style>

<section>
  <div class="pb-5 text-center">
    <div class="card userProfileMain rounded">
      <h1 class="userProfileH1">Download Custom Design</h1>
    </div>
  </div>
</section>

<section>
  <div class="p-2">
    <table class="table">
      <thead class="table">
        <tr>
          <th scope="col">Product Name</th>
          <th scope="col">Front Image</th>
          <th scope="col">Back Image</th>
          <th scope="col">Left Image</th>
          <th scope="col">Right Image</th>
        </tr>
      </thead>
      <tbody>
        <% if ( customDesign.productId = checkProductId) { %>
        <tr>
          <td ><%= products.name %></td>
          <td class="col">
            <div class="image-container">
              <img id="frontImage" width="250" />

              <button class="btn btn-dark download-btn" onclick="downloadCanvas('front')">Download Front</button>
            </div>
          </td>
          <td class="col">
            <div class="image-container">
              <img id="backImage" width="250" />

              <button class="btn btn-dark download-btn" onclick="downloadCanvas('back')">Download Front</button>
            </div>
          </td>
          <td class="col">
            <div class="image-container">
              <img id="leftImage" width="250" />

              <button class="btn btn-dark download-btn" onclick="downloadCanvas('left')">Download Front</button>
            </div>
          </td>
          <td class="col">
            <div class="image-container">
              <img id="rightImage" width="250" />

              <button class="btn btn-dark download-btn" onclick="downloadCanvas('right')">Download Front</button>
            </div>
          </td>
        </tr>
        <% } else { %>
        <tr>
          <td colspan="5">No custom design found for this product.</td>
        </tr>
        <% } %>
      </tbody>
    </table>
  </div>
  <canvas id="canvasElement" style="display: none" height="0px"></canvas>
</section>

<%- include('../partials/admin/footer') %>
<script src="https://unpkg.com/idb@5.0.8/build/iife/index-min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  let frontImage = document.getElementById("frontImage");
  let backImage = document.getElementById("backImage");
  let leftImage = document.getElementById("leftImage");
  let rightImage = document.getElementById("rightImage");

  let canvasElement = document.getElementById("canvasElement");
  const canvasData = <%- JSON.stringify(customDesign.products[0].canvasData) %>;

  const sides = ['front', 'back', 'left', 'right'];

  sides.forEach((item) => {
    const backgroundImageUrl = canvasData[item].backgroundImage;

    fabric.util.loadImage(backgroundImageUrl, function (img) {
      const image = new fabric.Image(img);

      // Adjust the canvas size to match the image dimensions
      canvasElement.width = image.width;
      canvasElement.height = image.height;

      // Create a new Fabric.js canvas
      const canvas = new fabric.Canvas(canvasElement);

      // Set the background image and scale it to fit the canvas dimensions
      canvas.setBackgroundImage(image, canvas.renderAll.bind(canvas), {
        scaleX: canvasElement.width / image.width,
        scaleY: canvasElement.height / image.height,
      });

      // Load the canvas content from canvasData and fit it to the canvas
      canvas.loadFromJSON(canvasData[item].content, () => {
        canvas.renderAll();

        // Convert the canvas to an image
        const imageUrl = canvas.toDataURL({
          format: "png",
          multiplier: 2,
        });

        // Assign the image to the appropriate img tag
        if (item === 'front') {
          frontImage.src = imageUrl;
        } else if (item === 'back') {
          backImage.src = imageUrl;
        } else if (item === 'left') {
          leftImage.src = imageUrl;
        } else if (item === 'right') {
          rightImage.src = imageUrl;
        }
      });
    });
  });


      function downloadCanvas(side) {
        const canvasElement = document.createElement("canvas");
        const canvasData = <%- JSON.stringify(customDesign.products[0].canvasData) %>; // Ensure products array has data

        const ctx = canvasElement.getContext("2d");

        const backgroundImageUrl = canvasData[side].backgroundImage;

        // Load the image using fabric.util.loadImage and set the canvas size to match the image
        fabric.util.loadImage(backgroundImageUrl, function (img) {
          const image = new fabric.Image(img);

          // Adjust the canvas size to match the image dimensions
          canvasElement.width = image.width;
          canvasElement.height = image.height;

          // Create a new Fabric.js canvas
          const canvas = new fabric.Canvas(canvasElement);

          // Set the background image and scale it to fit the canvas dimensions
          canvas.setBackgroundImage(image, canvas.renderAll.bind(canvas), {
            scaleX: canvasElement.width / image.width,
            scaleY: canvasElement.height / image.height,
          });

          // Load the canvas content from canvasData and fit it to the canvas
          canvas.loadFromJSON(canvasData[side].content, () => {
            // Ensure the canvas is rendered with proper dimensions and scaling
            canvas.renderAll();

            // Convert the canvas to an image and trigger the download
            const imageUrl = canvas.toDataURL({
              format: "png",
              multiplier: 2, // Adjust multiplier if you need higher resolution
            });

            // Create a download link
            const link = document.createElement("a");
            link.href = imageUrl;
            link.download = `${side}-custom-design.png`;
            link.click();
          });
        });
      }
</script>
