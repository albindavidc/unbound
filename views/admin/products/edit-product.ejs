<%- include("../../partials/admin/header") %>

<head>
  <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.css " />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
    rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
    crossorigin="anonymous"
  />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />

  <style>
    .form-container {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      flex-direction: column;
    }

    .form-wrapper {
      width: 100%;
      max-width: 600px;
      padding: 20px;
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .cropped-img-container {
      display: inline-block;
      position: relative;
      margin: 10px;
    }

    .cropped-img {
      max-width: 100px;
      max-height: 100px;
    }

    .remove-btn {
      position: absolute;
      top: 0;
      right: 0;
      background: red;
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
    }

    .imagemodal {
      display: none;
      position: fixed;
      z-index: 5;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%); /* Center the modal horizontally and vertically */
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
      margin: 10px auto; /* Center the modal horizontally */
      padding: 20px;
      background-color: #fff;
      border: 1px solid #888;
      display: flex;
      flex-direction: column; /* Ensure the content is stacked vertically */
      justify-content: center; /* Center content vertically */
      align-items: center; /* Center content horizontally */
      width: 50%;
      border-radius: 15px; /* Add rounded corners */
      box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2); /* Optional: Add a shadow for better visibility */
    }

    .img-container {
      display: flex;
      justify-content: center; /* Center the image horizontally */
      align-items: center; /* Center the image vertically */
      width: 100%;
    }

    .img-container img {
      max-width: 100%; /* Make the image responsive */
      height: auto;
      border-radius: 10px; /* Add rounded corners to the image */
    }

    .padding {
      padding: 40px 0 10px 0;
    }

    .userProfileMain {
      width: 100%;
      height: 30%;
      margin: 0 auto;
      background-color: rgb(0, 0, 0);
    }

    .userProfileH1 {
      width: 100%;
      margin: 10px;
      font-family: "Baloo", cursive;
      color: white;
      font-size: 6vw;
    }

    .breadcrumbCls {
      background-color: rgb(0, 0, 0);
    }
  </style>

  <section>
    <div class="pb-5 text-center">
      <div class="card userProfileMain rounded">
        <h1 class="userProfileH1">Edit Product</h1>
      </div>
    </div>
  </section>

  <section>
    <div class="imagemodal" id="cropImageModal" tabindex="-1" aria-labelledby="cropImageModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="cropImageModalLabel">Crop Image</h5>
            <button id="closeImageButton" style="margin: 10px" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="img-container">
              <img id="imageToCrop" src="" />
            </div>
          </div>
          <div class="modal-footer">
            <button id="closeImageButton" style="margin: 10px" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" style="margin: 10px" class="btn btn-primary" id="cropButton">Crop</button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <section class="content-main">
    <form id="addProductForm" action="/admin/edit-product/<%= product._id %>" method="POST" enctype="multipart/form-data">
      <div class="container mt-4">
        <div class="row">
          <div class="col-lg-12">
            <div class="card mb-4">
              <div class="card-body">
                <div class="mb-4">
                  <label for="product-name" class="form-label">Product Name</label>
                  <input type="text" value="<%= product.name %>" placeholder="Type here" class="form-control" name="name" id="product-name" />
                  <div id="productNameError" class="text-danger"></div>
                </div>
                <div class="mb-4">
                  <label for="status" class="form-label">Status</label>
                  <select class="form-select" id="status" name="status" aria-label="Active or Inactive">
                    <% if (product.isActive) { %>
                    <option value="true">Active</option>
                    <option value="false">Inactive</option>
                    <% } else { %>
                    <option value="false">Inactive</option>
                    <option value="true">Active</option>
                    <% } %>
                  </select>
                </div>
                <div class="mb-4">
                  <label for="product-description" class="form-label">Description</label>
                  <input placeholder="Type here" value="<%= product.description.trim() %>" id="product-description" class="form-control" name="description">
                </input>
                  <div id="productDescriptionError" class="text-danger"></div>
                </div>

                <div class="row">
                  <div class="col-lg-3">
                    <div class="mb-4">
                      <label class="form-label" for="actual-price">Actual Price</label>
                      <input
                        placeholder="Enter regular price"
                        name="actualPrice"
                        value="<%= product.actualPrice %>"
                        type="number"
                        class="form-control"
                        id="actual-price"
                      />
                    </div>
                  </div>




                  <div class="col-lg-3">
                    <div class="mb-4">
                      <label class="form-label" for="bundle-price">Bundle Price</label>
                      <input
                        placeholder="Enter bundle price"
                        name="bundlePrice"
                        value="<%= product.bundlePrice %>"
                        type="number"
                        class="form-control"
                        id="bundle-price"
                      />
                    </div>
                  </div>

                  <div class="col-lg-3">
                    <div class="mb-4">
                      <label class="form-label" for="max-bundle">Max Product in a Bundle</label>
                      <input
                        placeholder="Enter bundle price"
                        name="bundleQuantity"
                        value="<%= product.bundleQuantity %>"
                        type="number"
                        class="form-control"
                        id="max-bundle"
                      />
                    </div>
                  </div>

                  <div class="col-lg-3">
                    <div class="mb-4">
                      <label class="form-label" for="max-product">Max Product per Person</label>
                      <input
                        placeholder="Enter bundle price"
                        name="quantity"
                        value="<%= product.quantity %>"
                        type="number"
                        class="form-control"
                        id="max-product"
                      />
                    </div>
                  </div>
                 

                  <div class="col-lg-12">
                    <div class="mb-4">
                      <label class="form-label" for="selling-price">Selling Price will calculate automatically with category and product offer</label>
                      <input
                        placeholder="Enter selling price"
                        name="sellingPrice"
                        value="<%= product.sellingPrice %>"
                        type="number"
                        class="form-control"
                        id="selling-price"
                        disabled
                      />
                    </div>
                  </div>
                </div>

                <div class="row">
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label for="color" class="form-label">Color</label>
                      <select name="variants[0][color]" id="color" class="form-select">
                        <option value="<%= product.variants[0].color._id %>"><%= product.variants[0].color.name %></option>

                        <% colors.forEach(color => { %> <% if (color.name !== product.variants[0].color.name) { %>
                        <option value="<%= color._id %>"><%= color.name %></option>
                        <% } %> <% }) %>
                      </select>
                    </div>
                  </div>

                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label for="size" class="form-label">Size</label>
                      <select name="variants[0][size]" id="size" class="form-select">
                        <option value="<%= product.variants[0].size._id %>"><%= product.variants[0].size.value %></option>

                        <% sizes.forEach(size => { %> <% if (size.value !== product.variants[0].size.value) { %>
                        <option value="<%= size._id %>"><%= size.value %></option>
                        <% } %> <% }) %>
                      </select>
                    </div>
                  </div>

                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label for="stock" class="form-label">Stock</label>
                      <input
                        type="number"
                        placeholder="Enter the stock"
                        name="variants[0][stock]"
                        value="<%= product.variants[0].stock %>"
                        class="form-control"
                        id="variant-stock"
                      />
                    </div>
                  </div>

                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label" for="offer-discount-rate">Product Offer (%)</label>
                      <input
                        placeholder="Enter discount Rate(%)"
                        name="offerDiscountRate"
                        value="<%= product.offerDiscountRate %>"
                        type="number"
                        class="form-control"
                        id="offer-discount-rate"
                      />
                    </div>
                  </div>

                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label for="category" class="form-label">Categories</label>
                      <select name="category" id="category" class="form-select">
                        <option value="<%= product.category._id %>"><%= product.category.name %></option>
                        <% categories.forEach(category => { %> <% if (category.name !== product.category.name) { %>
                        <option value="<%= category._id %>"><%= category.name %></option>
                        <% } %> <% }) %>
                      </select>
                    </div>
                  </div>

                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label for="brand" class="form-label">Brand</label>
                      <select name="brand" id="brand" class="form-select">
                        <option value="<%= product.brand._id %>"><%= product.brand.name %></option>
                        <% brands.forEach(brand => { %> <% if (brand.name !== product.brand.name) { %>
                        <option value="<%= brand._id %>"><%= brand.name %></option>
                        <% } %> <% }) %>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="row">
              <!-- Primary image upload with cropping -->
              <div class="col-lg-4">
                <div class="card mb-4">
                  <div class="card-header">
                    <h4 style="font-size: 1rem">Primary Image</h4>
                  </div>
                  <div class="card-body text-center">
                    <div class="input-upload">
                      <label for="primaryImageInput" class="form-label">
                        <% if (product.primaryImages[0]) { %>
                        <img id="preview1" src="/uploads/images/<%- product.primaryImages[0].name %>" alt="" width="150px" />
                        <% } %>
                      </label>
                    </div>
                    <div class="padding">
                      <input type="file" class="form-control" id="primaryImageInput" accept="image/*" style="display: none" />
                      <button id="primaryInputButton" type="button" style="color: white" class="btn rounded font-sm btn-dark">Upload Image</button>
                      <div id="croppedPrimaryImages" style="display: none"></div>
                    </div>
                  </div>
                </div>
              </div>
              <!-- Secondary images upload -->
              <div class="col-lg-4">
                <div class="card mb-4">
                  <div class="card-header">
                    <h4 style="font-size: 1rem">Secondary Image 1</h4>
                  </div>
                  <div class="card-body text-center">
                    <div class="input-upload">
                      <label for="secondaryImageInput1" class="form-label">
                        <img
                          id="preview2"
                          src="<%= product.secondaryImages[0] ? `/uploads/images/${product.secondaryImages[0].name}` : '../../admin-assets/imgs/theme/upload.svg' %>"
                          alt=""
                          width="150px"
                        />
                      </label>
                    </div>
                    <div class="padding">
                      <input type="file" class="form-control" id="secondaryImageInput1" style="display: none" />
                      <button id="secondaryImageButton1" type="button" class="btn btn-dark" style="color: white">Upload Image</button>
                      <div id="croppedSecondaryImage1" style="display: none"></div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="card mb-4">
                  <div class="card-header">
                    <h4 style="font-size: 1rem">Secondary Image 2</h4>
                  </div>
                  <div class="card-body text-center">
                    <div class="input-upload">
                      <label for="secondaryImageInput2" class="form-label">
                        <img
                          id="preview3"
                          src="<%= product.secondaryImages[1] ? `/uploads/images/${product.secondaryImages[1].name}` : '../../admin-assets/imgs/theme/upload.svg' %>"
                          alt=""
                          width="150px"
                        />
                      </label>
                    </div>
                    <div class="padding">
                      <input type="file" class="form-control" id="secondaryImageInput2" style="display: none" />
                      <button id="secondaryImageButton2" style="color: white" type="button" class="btn btn-dark rounded font-sm">Upload Image</button>
                      <div id="croppedSecondaryImage2" style="display: none"></div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="card mb-4">
                  <div class="card-header">
                    <h4 style="font-size: 1rem">Secondary Image 3</h4>
                  </div>
                  <div class="card-body text-center">
                    <div class="input-upload">
                      <label for="secondaryImageInput3" class="form-label">
                        <img
                          id="preview4"
                          src="<%= product.secondaryImages[2] ? `/uploads/images/${product.secondaryImages[2].name}` : '../../admin-assets/imgs/theme/upload.svg' %>"
                          alt=""
                          width="150px"
                        />
                      </label>
                    </div>
                    <div class="padding">
                      <input type="file" class="form-control" id="secondaryImageInput3" style="display: none" />
                      <button id="secondaryImageButton3" style="color: white" type="button" class="btn btn-dark rounded font-sm">Upload Image</button>
                      <div id="croppedSecondaryImage3" style="display: none"></div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="card mb-4">
                  <div class="card-header">
                    <h4 style="font-size: 1rem">Secondary Image 4</h4>
                  </div>
                  <div class="card-body text-center">
                    <div class="input-upload">
                      <label for="secondaryImageInput4" class="form-label">
                        <img
                          id="preview5"
                          src="<%= product.secondaryImages[3] ? `/uploads/images/${product.secondaryImages[3].name}` : '../../admin-assets/imgs/theme/upload.svg' %>"
                          alt=""
                          width="150px"
                        />
                      </label>
                    </div>
                    <div class="padding">
                      <!-- <div class="row">
                        <div class="col-lg-6"> -->
                      <input type="file" class="form-control" id="secondaryImageInput4" style="display: none" />
                      <button id="secondaryImageButton4" style="color: white" type="button" class="btn btn-dark">Upload Image</button>
                    </div>
                    <div class="col-lg-6">
                      <!-- <button
                            onclick="deleteImage('<%- product.secondaryImages[3] ? product.secondaryImages[3].name : `` %>', '<%- product._id %>')"
                            type="button"
                            class="btn btn-md btn-danger"
                            style="background-color: red; color: white"
                          >
                            <i class="bi bi-trash"> </i>Delete
                          </button> -->

                      <div id="croppedSecondaryImage4" style="display: none"></div>
                    </div>
                    <!-- </div>
                    </div> -->
                  </div>
                </div>
              </div>
            </div>

            <div class="d-flex justify-content-center padding">
              <div class="row">
                <div class="col text-center padding">
                  <button class="btn btn-dark rounded font-sm" type="submit">Update</button>
                  <a href="/admin/products" class="btn btn-light rounded font-sm">Cancel</a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </form>
  </section>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.js"></script>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    async function deleteImage(imageId, productId) {
      try {
        // Show a confirmation dialog
        const result = await Swal.fire({
          title: "Are you sure?",
          text: "You won't be able to revert this!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, delete it!",
        });

        if (result.isConfirmed) {
          // Send a request to the server to delete the image
          const response = await fetch(`/admin/products/delete-image?productId=${productId}&imageId=${imageId}`, {
            method: "DELETE",
          });

          if (response.ok) {
            // If the image was deleted successfully, show a success message
            Swal.fire("Deleted!", "The image has been deleted.", "success").then(() => {
              location.reload();
            });
            // Optionally, remove the image from the UI here
          } else {
            // If there was an error, show an error message
            Swal.fire({
              icon: "error",
              title: "Oops...",
              text: "Something went wrong!",
            });
          }
        }
      } catch (error) {
        console.error("Error deleting image:", error);
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "Something went wrong!",
        });
      }
    }

    const cropImageModal = document.getElementById("cropImageModal");
    const cropButton = document.getElementById("cropButton");
    const closeImageButton = document.getElementById("closeImageButton");
    const imageToCrop = document.getElementById("imageToCrop");

    let cropper;
    let currentImageInputId = "";

    function setupImageCropping(inputId, previewId, croppedImagesDivId, buttonId) {
      const input = document.getElementById(inputId);
      const preview = document.getElementById(previewId);
      const croppedImagesDiv = document.getElementById(croppedImagesDivId);
      const button = document.getElementById(buttonId);

      // Handle image button click
      button.addEventListener("click", function () {
        currentImageInputId = inputId;
        input.click();
      });

      // Handle file input change event
      input.addEventListener("change", function (event) {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            openCropModal(e.target.result);
          };
          reader.readAsDataURL(file);
        }
      });

      function openCropModal(imageSrc) {
        imageToCrop.src = imageSrc;
        cropImageModal.style.display = "block";

        // Ensure Cropper is destroyed before re-initializing
        if (cropper) {
          cropper.destroy();
        }

        cropper = new Cropper(imageToCrop, {
          aspectRatio: 1, // Square aspect ratio
          viewMode: 3, // Restrict the crop box to not exceed the canvas
        });
      }

      // Crop the image and add it to the appropriate container
      cropButton.addEventListener("click", function () {
        if (!cropper) return; // Ensure Cropper is initialized

        const canvas = cropper.getCroppedCanvas();
        canvas.toBlob(function (blob) {
          const url = URL.createObjectURL(blob);

          // Update the image preview
          if (currentImageInputId === inputId) {
            preview.src = url;

            // Clear any existing cropped images
            croppedImagesDiv.innerHTML = "";

            // Create and append the new cropped image
            const imgContainer = document.createElement("div");
            imgContainer.classList.add("cropped-img-container");

            const imgElement = document.createElement("img");
            imgElement.src = url;
            imgElement.classList.add("cropped-img");
            imgElement.dataset.blob = url;

            imgContainer.appendChild(imgElement);
            croppedImagesDiv.appendChild(imgContainer);

            // Hide the modal
            cropImageModal.style.display = "none";
          }
        }, "image/png");
      });
    }

    // Setup cropping for primary image
    setupImageCropping("primaryImageInput", "preview1", "croppedPrimaryImages", "primaryInputButton");

    // Setup cropping for secondary images
    setupImageCropping("secondaryImageInput1", "preview2", "croppedSecondaryImage1", "secondaryImageButton1");
    setupImageCropping("secondaryImageInput2", "preview3", "croppedSecondaryImage2", "secondaryImageButton2");
    setupImageCropping("secondaryImageInput3", "preview4", "croppedSecondaryImage3", "secondaryImageButton3");
    setupImageCropping("secondaryImageInput4", "preview5", "croppedSecondaryImage4", "secondaryImageButton4");

    // Close the cropping modal
    closeImageButton.addEventListener("click", function () {
      cropImageModal.style.display = "none";
    });

    // // Close the cropping modal when clicking outside of it
    // window.addEventListener("click", function (event) {
    //   if (event.target === cropImageModal) {
    //     cropImageModal.style.display = "none";
    //   }
    // });

    document.getElementById("addProductForm").addEventListener("submit", async function (event) {
      event.preventDefault();

      // if (!validateForm()) {
      //   return;
      // }

      let form = document.getElementById("addProductForm");
      let formData = new FormData(form);

      // Add primary image to formData
      const primaryImage = document?.getElementById("croppedPrimaryImages")?.children[0]?.querySelector("img");
      const primaryBlobUrl = primaryImage?.dataset?.blob;

      if (primaryBlobUrl) {
        const primaryBlob = await fetch(primaryBlobUrl).then((r) => r?.blob());
        formData.append("primaryImage", primaryBlob, "primaryImage.png");
      }

      // //Add secodnary image to formData
      // const secondaryImage0 = document?.getElementById("croppedSecondaryImage1")?.children[0]?.querySelector("img");
      // const secondary0BlobUrl = secondaryImage0?.dataset?.blob;

      // if(secondary0BlobUrl) {
      //   const secondaryBlob0 = await fetch(secondary0BlobUrl).then((r) => r?.blob());
      //   formData.append("secondaryImage0", secondaryBlob0, "secondaryImage0.png");
      // }

      // const secondaryImage1 = document?.getElementById("croppedSecondaryImage2")?.children[0]?.querySelector("img");
      // const secondary1BlobUrl = secondaryImage1?.dataset?.blob;

      // if(secondary1BlobUrl) {
      //   const secondaryBlob1 = await fetch(secondary1BlobUrl).then((r) => r?.blob());
      //   formData.append("secondaryImage1", secondaryBlob1, "secondaryImage1.png");
      // }

      // const secodnaryImage2 = document?.getElementById("croppedSecondaryImage3")?.children[2]?.querySelector("img");
      // const secondary

      async function appendSecondaryImageToFormData(formData, index) {
        const secondaryImage = document?.getElementById(`croppedSecondaryImage${index + 1}`)?.children[0]?.querySelector("img");
        const secondaryBlobUrl = secondaryImage?.dataset?.blob;

        if (secondaryBlobUrl) {
          const secondaryBlob = await fetch(secondaryBlobUrl).then((r) => r?.blob());
          formData.append(`secondaryImage${index}`, secondaryBlob, `secondaryImage${index}.png`);
        }
      }

      await appendSecondaryImageToFormData(formData, 0); // For secondaryImage0
      await appendSecondaryImageToFormData(formData, 1); // For secondaryImage1
      await appendSecondaryImageToFormData(formData, 2); // For secondaryImage2
      await appendSecondaryImageToFormData(formData, 3); // For secondaryImage3

      // // Add secondary images to formData
      // const secondaryImages = [
      //   document.getElementById("croppedSecondaryImage2"),
      //   document.getElementById("croppedSecondaryImage3"),
      //   document.getElementById("croppedSecondaryImage4"),
      // ];

      // for (let i = 0; i < secondaryImages.length; i++) {
      //   if (secondaryImages[i]?.childElementCount > 0) {
      //     const blobUrl = secondaryImages[i]?.querySelector("img")?.dataset?.blob;
      //     if (blobUrl) {
      //       const blob = await fetch(blobUrl).then((r) => r?.blob());

      //       formData.append(`secondaryImage`, blob, `secondaryImage${i + 1}.png`);
      //     }
      //   }
      // }

      const result = await Swal.fire({
        title: "Are you sure ? ",
        text: "Do you want to update the product ?",
        icon: "warning",
        showCancelButton: true,
        cancelButtonColor: "#d33",
        cancelButtonText: "Cancel",
        confirmButtonColor: "#3085d6",
        confirmButtonText: "Yes, update it!",
      });

      if (result.isConfirmed) {
        try {

          let isNameValid = checkName(),
        isDesciptionValid = checkDescription(),
        isActualPriceValid = checkActualPrice(),
        isBundlePriceValid = checkBundlePrice(),
        isStockValid = checkVariantStock(),
        isMaxProduct = checkMaxProduct(),
        isMaxBundle = checkBundleMaxQuantity(),
        isColor = checkColor(),
        isSize = checkSize(),
        isDiscountRate = checkOfferDiscountRate(),
        isBrand = checkBrand(),
        isCategory = checkCategory();

      let isFormValid =
        isNameValid &&
        isDesciptionValid &&
        isActualPriceValid &&
        isBundlePriceValid &&
        isStockValid &&
        isMaxProduct &&
        isMaxBundle &&
        isColor &&
        isSize &&
        isDiscountRate &&
        isBrand &&
        isCategory;

      if (!isFormValid) {
        throw new Error("Form is not valid");
      }


          const response = await fetch(form.action, {
            method: "POST",
            body: formData,
          });
          const data = await response.json();

          if (data.isvalid) {
            Swal.fire({
              icon: "success",
              title: "Success",
              text: "Product update successfully!",
            }).then(() => {
              window.location.replace("/admin/products");
            });
          } else {
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "Product updating failed...!",
            });
          }
        } catch (error) {
          console.error(error);
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "An error occurred while updating the product.",
          });
        }
      }
    });

    const form = document.getElementById("addProductForm");

    const checkName = () => {
      const nameEl = document.querySelector("#product-name");

      const name = nameEl.value.trim();

      if (!isRequired(name)) {
        showError(nameEl, "Full name cannot be blank.");
      } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        showError(nameEl, "Full name should not contain numbers.");
      } else {
        showSuccess(nameEl);
        isValid = true;
      }
      return isValid;
    };

    const checkDescription = () => {
      const descriptionEl = document.querySelector("#product-description");
      const description = descriptionEl.value.trim();

      if (!isRequired(description)) {
        showError(descriptionEl, "Description cannot be blank.");
      }
      // else if (!/^[a-zA-Z\s]+$/.test(description)) {
      //   showError(descriptionEl, "Description should not contain numbers.");
      // }
      else {
        showSuccess(descriptionEl);
        isValid = true;
      }
      return isValid;
    };

    const checkActualPrice = () => {
      const acutalPriceEl = document.querySelector("#actual-price");
      const acutalPrice = acutalPriceEl.value;

      if (!isRequired(acutalPrice)) {
        showError(acutalPriceEl, "Actual price cannot be blank");
      } else if (parseFloat(acutalPrice) <= 0) {
        showError(acutalPriceEl, "Actual price cannot be zero");
      } else {
        showSuccess(acutalPriceEl);
        isValid = true;
      }
      return isValid;
    };


    const checkBundlePrice = () => {
      const bundlePriceEl = document.querySelector("#bundle-price");
      const bundlePrice = bundlePriceEl.value;

      if (!isRequired(bundlePrice)) {
        showError(bundlePriceEl, "Bundle price cannot be blank");
      } else if (parseFloat(bundlePrice) <= 0) {
        showError(bundlePriceEl, "Bundle Price cannot be zero");
      } else {
        showSuccess(bundlePriceEl);
        isValid = true;
      }
      return isValid;
    };

    const checkVariantStock = () => {
      const variantStockEl = document.querySelector("#variant-stock");
      const variantStock = variantStockEl.value;

      if (!isRequired(variantStock)) {
        showError(variantStockEl, "Stock cannot be blank");
      } else if (parseFloat(variantStock) <= 0) {
        showError(variantStockEl, "Stock cannot be zero");
      } else {
        showSuccess(variantStockEl);
        isValid = true;
      }
      return isValid;
    };

    const checkMaxProduct = () => {
      const maxProductPerPersonEl = document.querySelector("#max-product");
      const maxProductPerPerson = maxProductPerPersonEl.value;

      if (!isRequired(maxProductPerPerson)) {
        showError(maxProductPerPersonEl, "Max product cannot be blank");
      } else if (parseFloat(maxProductPerPerson) <= 0) {
        showError(maxProductPerPersonEl, "Max product cannot be Zero");
      } else {
        showSuccess(maxProductPerPersonEl);
        isValid = true;
      }
      return isValid;
    };

    const checkBundleMaxQuantity = () => {
      const maxProductPerPersonEl = document.querySelector("#max-bundle");
      const maxProductPerPerson = maxProductPerPersonEl.value;

      if (!isRequired(maxProductPerPerson)) {
        showError(maxProductPerPersonEl, "Max product cannot be blank");
      } else if (parseFloat(maxProductPerPerson) <= 0) {
        showError(maxProductPerPersonEl, "Max product cannot be Zero");
      } else {
        showSuccess(maxProductPerPersonEl);
        isValid = true;
      }
      return isValid;
    };

    const checkColor = () => {
      const colorEl = document.querySelector("#color");
      const color = colorEl.value;

      if (color === "selectColor") {
        showError(colorEl, "Select a color");
      } else {
        showSuccess(colorEl);
        isValid = true;
      }
      return isValid;
    };

    const checkSize = () => {
      const sizeEl = document.querySelector("#size");
      const size = sizeEl.value;

      if (size === "selectSize") {
        showError(sizeEl, "Select a size");
      } else {
        showSuccess(sizeEl);
        isValid = true;
      }
      return isValid;
    };

   

    const checkOfferDiscountRate = () => {
      const offerDiscountRateEl = document.querySelector("#offer-discount-rate");
      const offerDiscountRate = offerDiscountRateEl.value;

      if (!isRequired(offerDiscountRate)) {
        showError(offerDiscountRateEl, "Offer discount rate cannot be blank");
      } else if (parseFloat(offerDiscountRate) <= 0) {
        showError(offerDiscountRateEl, "Offer discount cannot be zero or less");
      } else {
        showSuccess(offerDiscountRateEl);
        isValid = true;
      }
      return isValid;
    };

    const checkBrand = () => {
      const brandEl = document.querySelector("#brand");
      const brand = brandEl.value;

      if (brand === "selectBrand") {
        showError(brandEl, "Select a brand");
      } else {
        showSuccess(brandEl);
        isValid = true;
      }
      return isValid;
    };

    const checkCategory = () => {
      const categoryEl = document.querySelector("#category");
      const category = categoryEl.value;

      if (category === "selectCategory") {
        showError(categoryEl, "Select a category");
      } else {
        showSuccess(categoryEl);
        isValid = true;
      }
      return isValid;
    };

    const isRequired = (value) => (value === "" ? false : true);

    const showError = (input, message) => {
      const formField = input.parentElement;
      formField.classList.remove("success", "is-valid");
      input.classList.remove("success", "is-valid");
      formField.classList.add("error", "is-invalid");
      input.classList.add("error", "is-invalid");
      const error = formField.querySelector("small");
      error.textContent = message;
    };

    const showSuccess = (input) => {
      const formField = input.parentElement;
      formField.classList.remove("error", "is-invalid");
      input.classList.remove("error", "is-invalid");
      formField.classList.add("success", "is-valid");
      input.classList.add("success", "is-valid");
      const error = formField.querySelector("small");
      if (error) {
        error.textContent = "";
      }
    };

    const debounce = (fn, delay = 500) => {
      let timeoutId;
      return (...args) => {
        // cancel the previous timer
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        // setup a new timer
        timeoutId = setTimeout(() => {
          fn.apply(null, args);
        }, delay);
      };
    };

    form.addEventListener(
      "input",
      debounce(function (e) {
        switch (e.target.id) {
          case "product-name": // Assuming this is the full name field
            checkName();
            break;
          case "product-description":
            checkDescription();
            break;
          case "actual-price":
            checkActualPrice();
            break;

          case "bundle-price":
            checkBundlePrice();
            break;
          case "variant-stock":
            checkVariantStock();
            break;
          case "max-product":
            checkMaxProduct();
            break;
          case "max-bundle":
            checkBundleMaxQuantity();
            break;
          case "color":
            checkColor();
            break;
          case "size":
            checkSize();
            break;

          case "offer-discount-rate":
            checkOfferDiscountRate();
            break;
          case "brand":
            checkBrand();
            break;
          case "category":
            checkCategory();
            break;
          
        }
      })
    );

    form.addEventListener(
      "change",
      debounce(function (e) {
        switch (e.target.id) {
          case "product-name": // Assuming this is the full name field
            checkName();
            break;
          case "product-description":
            checkDescription();
            break;
          case "actual-price":
            checkActualPrice();
            break;
     
          case "bundle-price":
            checkBundlePrice();
            break;
          case "variant-stock":
            checkVariantStock();
            break;
          case "max-product":
            checkMaxProduct();
            break;
          case "max-bundle":
            checkBundleMaxQuantity();
            break;
        
          case "color":
            checkColor();
            break;
          case "size":
            checkSize();
            break;
     
          case "offer-discount-rate":
            checkOfferDiscountRate();
            break;
          case "brand":
            checkBrand();
            break;
          case "category":
            checkCategory();
            break;
        }
      })
    );

    function validateForm() {
      let isValid = false;

      form.addEventListener("submit", function (e) {
        e.preventDefault();

        let isNameValid = checkName(),
          isDesciptionValid = checkDescription(),
          isActualPriceValid = checkActualPrice(),
          isBundlePriceValid = checkBundlePrice(),
          isStockValid = checkVariantStock(),
          isMaxProduct = checkMaxProduct(),
          isMaxBundle = checkBundleMaxQuantity(),
          isColor = checkColor(),
          isSize = checkSize(),
          isDiscountRate = checkOfferDiscountRate(),
          isBrand = checkBrand(),
          isCategory = checkCategory();

        let isFormValid =
          isNameValid &&
          isDesciptionValid &&
          isActualPriceValid &&
          isBundlePriceValid &&
          isStockValid &&
          isMaxProduct &&
          isMaxBundle &&
          isColor &&
          isSize &&
          isDiscountRate &&
          isBrand &&
          isCategory;

        // if (isFormValid) {
        //   // form.submit();
        // }
        return isFormValid;
      });

      // // Validate price
      // const priceElement = document.getElementById("priceError");
      // const price = document.querySelector('input[name="price"]').value;
      // if (isNaN(price) || price < 0) {
      //   if (priceElement) priceElement.innerText = "Price must be a number greater than or equal to 0.";
      //   isValid = false;
      // } else {
      //   if (priceElement) priceElement.innerText = "";
      // }

      // // Validate quantity
      // const quantityElement = document.getElementById("quantityError");
      // const quantity = document.querySelector('input[name="quantity"]').value;
      // if (isNaN(quantity) || quantity <= 0) {
      //   if (quantityElement) quantityElement.innerText = "Quantity must be a number greater than 0.";
      //   isValid = false;
      // } else {
      //   if (quantityElement) quantityElement.innerText = "";
      // }

      // // Validate product name
      // const productNameElement = document.getElementById("productNameError");
      // const productName = document.querySelector('input[name="name"]').value;
      // if (productName.trim() === "") {
      //   if (productNameElement) productNameElement.innerText = "Product name is required.";
      //   isValid = false;
      // } else {
      //   if (productNameElement) productNameElement.innerText = "";
      // }

      // // Validate product description
      // const productDescriptionElement = document.getElementById("productDescriptionError");
      // const productDescription = document.querySelector('textarea[name="description"]').value;
      // if (productDescription.trim() === "") {
      //   if (productDescriptionElement) productDescriptionElement.innerText = "Product description is required.";
      //   isValid = false;
      // } else {
      //   if (productDescriptionElement) productDescriptionElement.innerText = "";
      // }

      // Validate file inputs
      const allowedExtensions = ["jpg", "jpeg", "png", "gif"];
      const fileInputs = document.querySelectorAll('input[type="file"]');
      fileInputs.forEach((fileInput, index) => {
        const filePath = fileInput.value;
        const fileExtension = filePath.split(".").pop().toLowerCase();

        if (filePath && !allowedExtensions.includes(fileExtension)) {
          Swal.fire({
            icon: "error",
            title: "Invalid File Type",
            text: `File ${index + 1} is not an image. Please upload a file with one of the following extensions: ${allowedExtensions.join(", ")}.`,
          });
          isValid = false;
        }
      });

      return isValid;
    }
  </script>
  <%- include("../../partials/admin/footer") %>
</head>
