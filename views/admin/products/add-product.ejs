<%- include("../../partials/admin/header") %>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link
    href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
    rel="stylesheet"
  />
  <link rel="stylesheet" href="/css/admin_panel.css" />
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.css "
  />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

  <title>Unbound</title>
  <style>
    .form-container {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      flex-direction: column;
    }

    .form-wrapper {
      width: 100%;
      max-width: 600px;
      padding: 20px;
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .cropped-img-container {
      display: inline-block;
      position: relative;
      margin: 10px;
    }

    .cropped-img {
      max-width: 100px;
      max-height: 100px;
    }

    .remove-btn {
      position: absolute;
      top: 0;
      right: 0;
      background: red;
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
    }
    /* 
    .imagemodal {
      display: none; 
    } */

    .imagemodal {
      display: none;
      position: fixed;
      z-index: 1;
      padding-top: 100px;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgb(0, 0, 0);
      background-color: rgba(0, 0, 0, 0.4);
    }
    .modal-content {
      margin: auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
    }
  </style>
</head>

<body>
  <div
    class="imagemodal"
    id="cropImageModal"
    tabindex="-1"
    aria-labelledby="cropImageModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cropImageModalLabel">Crop Image</h5>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"
          ></button>
        </div>
        <div class="modal-body">
          <div class="img-container">
            <img id="imageToCrop" src="/images/hero.jpg" />
          </div>
        </div>
        <div class="modal-footer">
          <button
            id="closeImageButton"
            type="button"
            class="btn btn-secondary"
            data-bs-dismiss="modal"
          >
            Cancel
          </button>
          <button type="button" class="btn btn-primary" id="cropButton">
            Crop
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="content">
    <main>
      <div class="bottom-data">
        <div class="orders">
          <div class="header">
            <h3 style="padding: 70px">Add Product</h3>
          </div>
          <div class="form-container">
            <div class="form-wrapper">
              <form
                id="addProductForm"
                action="/admin/add-product"
                method="POST"
                enctype="multipart/form-data"
                onsubmit="addproduct(event)"
              >
                <div>
                  <button
                    type="button"
                    class="btn btn-primary"
                    id="addPrimaryImageButton"
                  >
                    Add Primary Image
                  </button>
                  <input
                    type="file"
                    id="primaryInput"
                    accept="image/*"
                    style="display: none"
                  />
                  <div id="croppedPrimaryImages"></div>
                </div>

                <hr />

                <div>
                  <button
                    type="button"
                    class="btn btn-primary"
                    id="addSecondaryImageButton"
                  >
                    Add Secondary Image
                  </button>
                  <input
                    type="file"
                    id="imageInput"
                    accept="image/*"
                    style="display: none"
                  />
                  <div id="croppedImages"></div>
                  <div id="secondaryImageError" class="error-div"></div>
                </div>

                <hr />
                <div class="margin-custom">
                  <label for="productName" class="form-label">Name</label>
                  <input
                    type="text"
                    name="productName"
                    id="productName"
                    placeholder="Product name"
                    class="form-control border"
                    required
                  />
                  <div id="productNameError" class="error-div"></div>
                </div>
                <div class="mb-4 mt-5">
                  <label class="form-label">Description of Product</label>
                  <textarea
                    name="productdescription"
                    id="productdescription"
                    class="form-control border"
                    required
                  ></textarea>
                  <div id="productdescriptionError" class="error-div"></div>
                </div>
                <div class="mb-4 mt-5">
                  <div class="row">
                    <div class="col-lg-4">
                      <div class="mb-4">
                        <label class="form-label">Price of Product</label>
                        <input
                          placeholder="$"
                          name="price"
                          type="text"
                          class="form-control border"
                        />
                        <div
                          id="price-error"
                          class="error-message error-div"
                        ></div>
                      </div>
                    </div>
                    <div class="col-lg-4">
                      <div class="mb-4">
                        <label class="form-label">Quantity of Product</label>
                        <input
                          placeholder="Quantity"
                          name="quantity"
                          type="text"
                          class="form-control border"
                        />
                        <div
                          id="quantity-error"
                          class="error-message error-div"
                        ></div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="mb-4 mt-5">
                  <div class="row">
                    <div class="col-lg-4">
                      <div class="mb-4">
                        <label class="form-label">Max Product/Person</label>
                        <input
                          placeholder="Volume"
                          name="volume"
                          type="text"
                          class="form-control border"
                        />
                      </div>
                    </div>
                    <div class="col-lg-4">
                      <div class="mb-4">
                        <label class="form-label">Color of Product</label>
                        <input
                          placeholder="Color"
                          name="color"
                          type="text"
                          class="form-control border"
                        />
                      </div>
                    </div>
                  </div>
                </div>
                <div class="form-group mb-3">
                  <label for="brand" class="form-label">Brand Name</label>
                  <% const customBrands = [ { _id: "custom1", name: "Nike" }, {
                  _id: "custom2", name: "Puma" }, { _id: "custom3", name:
                  "Woodland" }, { _id: "custom4", name: "American Tourister" },
                  { _id: "custom5", name: "Adidas" }, { _id: "custom6", name:
                  "Reebok" }, { _id: "custom7", name: "Louis Vuitton" }, { _id:
                  "custom8", name: "Prada" }, { _id: "custom9", name: "Gucci" },
                  { _id: "custom10", name: "Saint Laurent" }, { _id: "custom11",
                  name: "Marc Jacobs" }, { _id: "custom12", name: "Versace" }, {
                  _id: "custom13", name: "Ralph Lauren" }, { _id: "custom14",
                  name: "Hermes" }, { _id: "custom15", name: "Chanel" } ]; %>
                  <select
                    class="form-control border"
                    name="brand"
                    id="brand"
                    required
                  >
                    <option value="">Select Brand</option>
                    <% customBrands.forEach((brand) => { %>
                    <option value="<%= brand._id %>"><%= brand.name %></option>
                    <% }); %>
                  </select>
                  <div id="brandError" class="error-div"></div>
                </div>
                <div class="form-group mb-3">
                  <label for="category" class="form-label">Category Name</label>
                  <select
                    class="form-control border"
                    name="category"
                    id="category"
                    required
                  >
                    <option value="">Select Category</option>
                    <% categories.forEach((category) => { %>
                    <option value="<%= category._id %>">
                      <%= category.name %>
                    </option>
                    <% }); %>
                  </select>
                  <div id="categoryError" class="error-div"></div>
                </div>
                <div
                  class="d-flex justify-content-center mt-5"
                  style="padding: 40px"
                >
                  <div class="d-grid col-md-5">
                    <button class="btn btn-primary" type="submit">
                      Add Product
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script src="/javascript/admin_panel.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.js
    "></script>

  <script>
    const cropImageModal = document.getElementById("cropImageModal");
    const primaryInput = document.getElementById("primaryInput");
    const secondaryInput = document.getElementById("imageInput");
    const addPrimaryImageButton = document.getElementById(
      "addPrimaryImageButton"
    );
    const addSecondaryImageButton = document.getElementById(
      "addSecondaryImageButton"
    );
    const cropButton = document.getElementById("cropButton");
    const closeImageButton = document.getElementById("closeImageButton");
    const imageToCrop = document.getElementById("imageToCrop");
    const croppedPrimaryImagesDiv = document.getElementById(
      "croppedPrimaryImages"
    );
    const croppedSecondaryImagesDiv = document.getElementById("croppedImages");
    let cropper;
    let croppingPrimary = false;
    const maxSecondaryImages = 4;
    let currentSecondaryImages = 0;

    // Handle primary and secondary image button clicks
    addPrimaryImageButton.addEventListener("click", function () {
      croppingPrimary = true;
      primaryInput.click();
    });

    addSecondaryImageButton.addEventListener("click", function () {
      if (currentSecondaryImages < maxSecondaryImages) {
        croppingPrimary = false;
        secondaryInput.click();
      } else {
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "You can only upload up to 4 secondary images in total!",
        });
      }
    });

    // Handle file input change event
    function handleFileInputChange(event) {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          openCropModal(e.target.result);
        };
        reader.readAsDataURL(file);
      }
    }

    primaryInput.addEventListener("change", handleFileInputChange);
    secondaryInput.addEventListener("change", handleFileInputChange);

    // Open the cropping modal
    function openCropModal(imageSrc) {
      imageToCrop.src = imageSrc;
      cropImageModal.style.display = "block";

      if (cropper) {
        cropper.destroy();
      }

      cropper = new Cropper(imageToCrop, {
        aspectRatio: 1,
        viewMode: 3,
      });
    }

    // Crop the image and add it to the appropriate container
    cropButton.addEventListener("click", function () {
      const canvas = cropper.getCroppedCanvas();
      canvas.toBlob(function (blob) {
        const imgContainer = document.createElement("div");
        imgContainer.classList.add("cropped-img-container");

        const imgElement = document.createElement("img");
        const url = URL.createObjectURL(blob);
        imgElement.src = url;
        imgElement.classList.add("cropped-img");
        imgElement.dataset.blob = url;

        const removeButton = document.createElement("button");
        removeButton.classList.add("remove-btn");
        removeButton.innerHTML = "X";
        removeButton.addEventListener("click", function () {
          imgContainer.remove();
          if (!croppingPrimary) {
            currentSecondaryImages--;
          }
        });

        imgContainer.appendChild(imgElement);
        imgContainer.appendChild(removeButton);

        if (croppingPrimary) {
          croppedPrimaryImagesDiv.innerHTML = "";
          croppedPrimaryImagesDiv.appendChild(imgContainer);
        } else {
          croppedSecondaryImagesDiv.appendChild(imgContainer);
          currentSecondaryImages++;
        }

        cropImageModal.style.display = "none";
      }, "image/png");
    });

    // Close the cropping modal
    closeImageButton.addEventListener("click", function () {
      cropImageModal.style.display = "none";
    });

    // Close the cropping modal when clicking outside of it
    window.addEventListener("click", function (event) {
      if (event.target === cropImageModal) {
        cropImageModal.style.display = "none";
      }
    });

    // Add product function
    async function addproduct(event) {
      event.preventDefault();

      if (!validateForm()) {
        return;
      }

      if (croppedPrimaryImagesDiv.childElementCount === 0) {
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "Please add a primary image before submitting.",
        });
        return;
      }

      if (croppedSecondaryImagesDiv.childElementCount === 0) {
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "Please add at least one secondary image before submitting.",
        });
        return;
      }

      let form = document.getElementById("addProductForm");

      var formData = new FormData(form);

      // Add primary image to formData
      const primaryImage =
        croppedPrimaryImagesDiv.children[0].querySelector("img");
      const primaryBlobUrl = primaryImage.dataset.blob;
      const primaryBlob = await fetch(primaryBlobUrl).then((r) => r.blob());
      formData.append("primaryImage", primaryBlob, "primaryImage.png");

      // Add secondary images to formData
      const secondaryImages = croppedSecondaryImagesDiv.children;
      for (let i = 0; i < secondaryImages.length; i++) {
        const blobUrl = secondaryImages[i].querySelector("img").dataset.blob;
        const blob = await fetch(blobUrl).then((r) => r.blob());
        formData.append("secondaryImage", blob, `secondaryImage${i}.png`);
      }

      try {
        console.log(formData.entries());

        const response = await fetch("/admin/add-product", {
          method: "POST",
          body: formData,
        });
        const data = await response.json();

        if (data.isvalid) {
          const API_BASE_URL = `${window.location.protocol}//${window.location.hostname}:${window.location.port}`;
          window.location.href = `${API_BASE_URL}/admin/products`;
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Product adding failed...!",
          });
        }
      } catch (error) {
        console.error(error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "An error occurred while adding the product.",
        });
      }
    }

    function validateForm() {
      let isValid = true;

      // Validate price
      const price = document.querySelector('input[name="price"]').value;
      if (isNaN(price) || price < 0) {
        document.getElementById("price-error").innerText =
          "Price must be a number greater than or equal to 0.";
        isValid = false;
      } else {
        document.getElementById("price-error").innerText = "";
      }

      // Validate quantity
      const quantity = document.querySelector('input[name="quantity"]').value;
      if (isNaN(quantity) || quantity <= 0) {
        document.getElementById("quantity-error").innerText =
          "Quantity must be a number greater than 0.";
        isValid = false;
      } else {
        document.getElementById("quantity-error").innerText = "";
      }

      // Validate product name
      const productName = document.querySelector(
        'input[name="productName"]'
      ).value;
      if (productName.trim() === "") {
        document.getElementById("productNameError").innerText =
          "Product name is required.";
        isValid = false;
      } else {
        document.getElementById("productNameError").innerText = "";
      }

      // Validate product description
      const productDescription = document.querySelector(
        'textarea[name="productdescription"]'
      ).value;
      if (productDescription.trim() === "") {
        document.getElementById("productdescriptionError").innerText =
          "Product description is required.";
        isValid = false;
      } else {
        document.getElementById("productdescriptionError").innerText = "";
      }

      // Validate file inputs
      const allowedExtensions = ["jpg", "jpeg", "png", "gif"];
      const fileInputs = document.querySelectorAll('input[type="file"]');
      fileInputs.forEach((fileInput, index) => {
        const filePath = fileInput.value;
        const fileExtension = filePath.split(".").pop().toLowerCase();

        if (filePath && !allowedExtensions.includes(fileExtension)) {
          Swal.fire({
            icon: "error",
            title: "Invalid File Type",
            text: `File ${
              index + 1
            } is not an image. Please upload a file with one of the following extensions: ${allowedExtensions.join(
              ", "
            )}.`,
          });
          isValid = false;
        }
      });

      return isValid;
    }
  </script>
</body>

<%- include("../../partials/admin/footer") %>
