<%- include("../../partials/admin/header") %>

<link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
<link rel="stylesheet" href="/css/admin_panel.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.css " />
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
  rel="stylesheet"
  integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
  crossorigin="anonymous"
/>

<title>Unbound</title>
<style>
  .form-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    flex-direction: column;
  }

  .form-wrapper {
    width: 100%;
    max-width: 600px;
    padding: 20px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  .cropped-img-container {
    display: inline-block;
    position: relative;
    margin: 10px;
  }

  .cropped-img {
    max-width: 100px;
    max-height: 100px;
  }

  .remove-btn {
    position: absolute;
    top: 0;
    right: 0;
    background: red;
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
  }
  /* 
    .imagemodal {
      display: none; 
    } */

  .imagemodal {
    display: none;
    position: fixed;
    z-index: 5;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); /* Center the modal horizontally and vertically */
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
  }

  .modal-content {
    margin: 10px auto; /* Center the modal horizontally */
    padding: 20px;
    background-color: #fff;
    border: 1px solid #888;
    display: flex;
    flex-direction: column; /* Ensure the content is stacked vertically */
    justify-content: center; /* Center content vertically */
    align-items: center; /* Center content horizontally */
    width: 50%;
    border-radius: 15px; /* Add rounded corners */
    box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2); /* Optional: Add a shadow for better visibility */
  }

  .img-container {
    display: flex;
    justify-content: center; /* Center the image horizontally */
    align-items: center; /* Center the image vertically */
    width: 100%;
  }

  .img-container img {
    max-width: 100%; /* Make the image responsive */
    height: auto;
    border-radius: 10px; /* Add rounded corners to the image */
  }

  .padding {
    padding: 40px 0 10px 0;
  }
</style>

<section>
  <div class="imagemodal" id="cropImageModal" tabindex="-1" aria-labelledby="cropImageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cropImageModalLabel">Crop Image</h5>
          <button id="closeImageButton" style="margin: 10px" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="img-container">
            <img id="imageToCrop" src="" />
          </div>
        </div>
        <div class="modal-footer">
          <button id="closeImageButton" style="margin: 10px" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" style="margin: 10px" class="btn btn-primary" id="cropButton">Crop</button>
        </div>
      </div>
    </div>
  </div>

  <div class="content">
    <main>
      <div class="bottom-data">
        <div class="orders">
          <div class="header">
            <h3 style="padding: 70px">Add Product</h3>
          </div>
          <div class="form-container">
            <div class="form-wrapper">
              <form id="addProductForm" action="/admin/add-product" method="POST" enctype="multipart/form-data" onsubmit="addproduct(event)">
                <div>
                  <button type="button" class="btn btn-primary" id="addPrimaryImageButton">Add Primary Image</button>
                  <input type="file" id="primaryInput" accept="image/*" style="display: none" />
                  <div id="croppedPrimaryImages"></div>
                  <!-- <div id="primary-image-error" class="error-div"></div> -->
                </div>

                <hr />

                <div>
                  <button type="button" class="btn btn-primary" id="addSecondaryImageButton">Add Secondary Image</button>
                  <input type="file" id="imageInput" accept="image/*" style="display: none" />
                  <div id="croppedImages"></div>
                  <div id="secondaryImageError" class="error-div"></div>
                </div>

                <hr />
                <div class="margin-custom form-group">
                  <label for="product-name" class="form-label">Name</label>
                  <input type="text" name="productName" id="product-name" placeholder="Product name" class="form-control" required />
                  <!-- <div id="product-name-error" class="error-div"></div> -->
                  <small></small>
                </div>
                <div class="mb-4 mt-5">
                  <label class="form-label">Description of Product</label>
                  <textarea
                    placeholder="Add a small description about the product"
                    name="productDescription"
                    id="product-description"
                    class="form-control"
                    required
                  ></textarea>
                  <small></small>
                  <!-- <div id="product-description-error" class="error-div"></div> -->
                </div>
                <div class="mb-4 mt-5">
                  <div class="row">
                    <div class="col-lg-4">
                      <div class="mb-4">
                        <label class="form-label" for="actual-price">Actual Price</label>
                        <input placeholder="₹" name="actualPrice" type="number" id="actual-price" class="form-control" required />
                        <small></small>
                        <!-- <div id="actual-price-error" class="error-message error-div"></div> -->
                      </div>
                    </div>
                    <div class="col-lg-4">
                      <div class="mb-4">
                        <label class="form-label">Selling Price</label>
                        <input placeholder="₹" id="selling-price" name="sellingPrice" type="number" class="form-control" required />
                        <!-- <div id="selling-price-error" class="error-message error-div"></div> -->
                        <small></small>
                      </div>
                    </div>
                    <div class="col-lg-4">
                      <div class="mb-4">
                        <label class="form-label">Bundle Price </label>
                        <input placeholder="(5/Bundle)" id="bundle-price" name="bundlePrice" type="number" class="form-control" required />
                        <!-- <div id="bundle-price-error" class="error-message error-div"></div> -->
                        <small></small>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="mb-4 mt-5">
                  <div class="row">
                    <div class="col-lg-6">
                      <div class="mb-4">
                        <label for="variant-stock" class="form-label">Stock of Product</label>
                        <input placeholder="Stock" id="variant-stock" name="variants[0][stock]" type="number" class="form-control" required />
                        <!-- <div id="stock-error" class="error-message error-div"></div> -->
                        <small></small>
                      </div>
                    </div>
                    <div class="col-lg-6">
                      <div class="mb-4">
                        <label class="form-label">Max Product/Person</label>
                        <input placeholder="Quantity" id="max-product" name="quantity" type="number" class="form-control" required />
                        <small></small>
                      </div>

                      <!-- <div id="quantity-error" class="error-div"></div> -->
                    </div>
                  </div>
                </div>

                <div class="mb-4 mt-5">
                  <div class="row">
                    <div class="col-lg-6">
                      <div class="mb-4">
                        <label for="color" class="form-label">Color</label>
                        <select class="form-control" name="variants[0][color]" id="color" required>
                          <option value="selectColor">Select Color</option>
                          <% color.forEach((color) => { %>
                          <option value="<%= color._id %>"><%= color.name %></option>
                          <% }); %>
                        </select>
                        <!-- <div id="color-error" class="error-div"></div> -->
                        <small></small>
                      </div>
                    </div>

                    <div class="col-lg-6">
                      <div class="mb-4">
                        <label for="size" class="form-label">Size</label>
                        <select class="form-control" name="variants[0][size]" id="size" required>
                          <option value="selectSize">Select Size</option>
                          <% size.forEach((size) => { %>
                          <option value="<%= size._id %>"><%= size.value %></option>
                          <% }); %>
                        </select>
                        <!-- <div id="size-error" class="error-div"></div> -->
                        <small></small>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="mb-4 mt-5">
                  <div class="row">
                    <div class="col-lg-4">
                      <div class="mb-4">
                        <label class="form-label" for="on-offer">On Offer</label>
                        <select class="form-control" name="offer" id="on-offer" required>
                          <option value="selectOffer">Select offer status</option>
                          <option value="Yes">Yes</option>
                          <option value="No">No</option>
                        </select>
                        <small></small>
                      </div>
                    </div>

                    <div class="col-lg-4">
                      <div class="mb-4">
                        <label class="form-label" for="offer-discount-price">Offer Discount Price</label>
                        <input placeholder="₹" name="offerDiscountPrice" type="number" class="form-control" id="offer-discount-price" required />
                        <!-- <div id="offer-discount-price-error" class="error-message error-div"></div> -->
                        <small></small>
                      </div>
                    </div>

                    <div class="col-lg-4">
                      <div class="mb-4">
                        <label class="form-label" for="offer-discount-rate">Offer Discount Rate</label>
                        <input placeholder="%" name="offerDiscountRate" type="number" class="form-control" id="offer-discount-rate" required />
                        <!-- <div id="offer-discount-rate-error" class="error-message error-div"></div> -->
                        <small></small>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="form-group mb-3">
                  <label for="brand" class="form-label">Brand Name</label>

                  <select class="form-control" name="brand" id="brand" required>
                    <option value="selectBrand">Select Brand</option>
                    <% brand.forEach((brand) => { %>
                    <option value="<%= brand._id %>"><%= brand.name %></option>
                    <% }); %>
                  </select>
                  <small></small>
                  <!-- <div id="brandError" class="error-div"></div> -->
                </div>
                <div class="form-group mb-3">
                  <label for="category" class="form-label">Category Name</label>
                  <select class="form-control" name="category" id="category" required>
                    <option value="selectCategory">Select Category</option>
                    <% categories.forEach((category) => { %>
                    <option value="<%= category._id %>"><%= category.name %></option>
                    <% }); %>
                  </select>
                  <small></small>
                  <!-- <div id="categoryError" class="error-div"></div> -->
                </div>
                <div class="d-flex justify-content-center mt-5" style="padding: 40px">
                  <div class="d-grid col-md-5">
                    <button class="btn btn-primary" type="submit">Add Product</button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</section>
<%- include("../../partials/admin/footer") %>

<script src="/javascript/admin_panel.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

<script
  src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
  integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
  crossorigin="anonymous"
></script>
<script
  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
  integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
  crossorigin="anonymous"
></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.js
    "></script>

<script>
  const cropImageModal = document.getElementById("cropImageModal");
  const primaryInput = document.getElementById("primaryInput");
  const secondaryInput = document.getElementById("imageInput");
  const addPrimaryImageButton = document.getElementById("addPrimaryImageButton");
  const addSecondaryImageButton = document.getElementById("addSecondaryImageButton");
  const cropButton = document.getElementById("cropButton");
  const closeImageButton = document.getElementById("closeImageButton");
  const imageToCrop = document.getElementById("imageToCrop");
  const croppedPrimaryImagesDiv = document.getElementById("croppedPrimaryImages");
  const croppedSecondaryImagesDiv = document.getElementById("croppedImages");
  let cropper;
  let croppingPrimary = false;
  const maxSecondaryImages = 4;
  let currentSecondaryImages = 0;

  // Handle primary and secondary image button clicks
  addPrimaryImageButton.addEventListener("click", function () {
    croppingPrimary = true;
    primaryInput.click();
  });

  addSecondaryImageButton.addEventListener("click", function () {
    if (currentSecondaryImages < maxSecondaryImages) {
      croppingPrimary = false;
      secondaryInput.click();
    } else {
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: "You can only upload up to 4 secondary images in total!",
      });
    }
  });

  // Handle file input change event
  function handleFileInputChange(event) {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function (e) {
        openCropModal(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  }

  primaryInput.addEventListener("change", handleFileInputChange);
  secondaryInput.addEventListener("change", handleFileInputChange);

  // Open the cropping modal
  function openCropModal(imageSrc) {
    imageToCrop.src = imageSrc;
    cropImageModal.style.display = "block";

    if (cropper) {
      cropper.destroy();
    }

    cropper = new Cropper(imageToCrop, {
      aspectRatio: 1,
      viewMode: 3,
    });
  }

  // Crop the image and add it to the appropriate container
  cropButton.addEventListener("click", function () {
    const canvas = cropper.getCroppedCanvas();
    canvas.toBlob(function (blob) {
      const imgContainer = document.createElement("div");
      imgContainer.classList.add("cropped-img-container");

      const imgElement = document.createElement("img");
      const url = URL.createObjectURL(blob);
      imgElement.src = url;
      imgElement.classList.add("cropped-img");
      imgElement.dataset.blob = url;

      const removeButton = document.createElement("button");
      removeButton.classList.add("remove-btn");
      removeButton.innerHTML = "X";
      removeButton.addEventListener("click", function () {
        imgContainer.remove();
        if (!croppingPrimary) {
          currentSecondaryImages--;
        }
      });

      imgContainer.appendChild(imgElement);
      imgContainer.appendChild(removeButton);

      if (croppingPrimary) {
        croppedPrimaryImagesDiv.innerHTML = "";
        croppedPrimaryImagesDiv.appendChild(imgContainer);
      } else {
        croppedSecondaryImagesDiv.appendChild(imgContainer);
        currentSecondaryImages++;
      }

      cropImageModal.style.display = "none";
    }, "image/png");
  });

  // Close the cropping modal
  closeImageButton.addEventListener("click", function () {
    cropImageModal.style.display = "none";
  });

  // Close the cropping modal when clicking outside of it
  window.addEventListener("click", function (event) {
    if (event.target === cropImageModal) {
      cropImageModal.style.display = "none";
    }
  });

  // Add product function
  async function addproduct(event) {
    event.preventDefault();

    // if (!validateForm()) {
    //   return;
    // }

    if (croppedPrimaryImagesDiv.childElementCount === 0) {
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: "Please add a primary image before submitting.",
      });
      return;
    }

    if (croppedSecondaryImagesDiv.childElementCount === 0) {
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: "Please add at least one secondary image before submitting.",
      });
      return;
    }

    let form = document.getElementById("addProductForm");

    var formData = new FormData(form);

    // Add primary image to formData
    const primaryImage = croppedPrimaryImagesDiv.children[0].querySelector("img");
    const primaryBlobUrl = primaryImage.dataset.blob;
    const primaryBlob = await fetch(primaryBlobUrl).then((r) => r.blob());
    formData.append("primaryImage", primaryBlob, "primaryImage.png");

    // Add secondary images to formData
    const secondaryImages = croppedSecondaryImagesDiv.children;
    for (let i = 0; i < secondaryImages.length; i++) {
      const blobUrl = secondaryImages[i].querySelector("img").dataset.blob;
      const blob = await fetch(blobUrl).then((r) => r.blob());
      formData.append("secondaryImage", blob, `secondaryImage${i}.png`);
    }

    console.log(formData.entries());

    //   // Collect variants
    //   const variants = [];
    //   document.querySelectorAll(".variant").forEach((variant) => {
    //     const color = variant.querySelector(".variant-color").value;
    //     const size = variant.querySelector(".variant-size").value;
    //     const stock = variant.querySelector(".variant-stock").value;
    // variants.push({ color, size, stock: parseInt(stock, 10) }); // Ensure stock is a number
    //   });
    //   formData.append("variants", JSON.stringify(variants));

    try {
      let isNameValid = checkName(),
        isDesciptionValid = checkDescription(),
        isActualPriceValid = checkActualPrice(),
        isSellingPriceValid = checkSellingPrice(),
        isBundlePriceValid = checkBundlePrice(),
        isStockValid = checkVariantStock(),
        isMaxProduct = checkMaxProduct(),
        isColor = checkColor(),
        isSize = checkSize(),
        isOffer = checkOnOffer(),
        isDiscountPrice = checkOfferDiscountPrice(),
        isDiscountRate = checkOfferDiscountRate(),
        isBrand = checkBrand(),
        isCategory = checkCategory();

      let isFormValid =
        isNameValid &&
        isDesciptionValid &&
        isActualPriceValid &&
        isSellingPriceValid &&
        isBundlePriceValid &&
        isStockValid &&
        isMaxProduct &&
        isColor &&
        isSize &&
        isOffer &&
        isDiscountPrice &&
        isDiscountRate &&
        isBrand &&
        isCategory;

      if (!isFormValid) {
        throw new Error("Form is not valid");
      }

      console.log(formData.entries());

      const response = await fetch("/admin/add-product", {
        method: "POST",
        body: formData,
      });
      const data = await response.json();

      if (data.isvalid) {
        const API_BASE_URL = `${window.location.protocol}//${window.location.hostname}:${window.location.port}`;
        window.location.href = `${API_BASE_URL}/admin/products`;
      } else {
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "Product adding failed...!",
        });
      }
    } catch (error) {
      console.error(error);
      Swal.fire({
        icon: "error",
        title: "Error",
        text: "An error occurred while adding the product.",
      });
    }
  }

  const form = document.getElementById("addProductForm");

  const checkName = () => {
    const nameEl = document.querySelector("#product-name");

    const name = nameEl.value.trim();

    if (!isRequired(name)) {
      showError(nameEl, "Full name cannot be blank.");
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
      showError(nameEl, "Full name should not contain numbers.");
    } else {
      showSuccess(nameEl);
      isValid = true;
    }
    return isValid;
  };

  const checkDescription = () => {
    const descriptionEl = document.querySelector("#product-description");
    const description = descriptionEl.value.trim();

    if (!isRequired(description)) {
      showError(descriptionEl, "Description cannot be blank.");
    } else if (!/^[a-zA-Z\s]+$/.test(description)) {
      showError(descriptionEl, "Description should not contain numbers.");
    } else {
      showSuccess(descriptionEl);
      isValid = true;
    }
    return isValid;
  };

  const checkActualPrice = () => {
    const acutalPriceEl = document.querySelector("#actual-price");
    const acutalPrice = acutalPriceEl.value;

    if (!isRequired(acutalPrice)) {
      showError(acutalPriceEl, "Actual price cannot be blank");
    } else if (parseFloat(acutalPrice) <= 0) {
      showError(acutalPriceEl, "Actual price cannot be zero");
    } else {
      showSuccess(acutalPriceEl);
      isValid = true;
    }
    return isValid;
  };

  const checkSellingPrice = () => {
    const sellingPriceEl = document.querySelector("#selling-price");
    const sellingPrice = sellingPriceEl.value;

    if (!isRequired(sellingPrice)) {
      showError(sellingPriceEl, "Selling price cannot be blank");
    } else if (parseFloat(sellingPrice) <= 0) {
      showError(sellingPriceEl, "Selling price cannot be zero");
    } else {
      showSuccess(sellingPriceEl);
      isValid = true;
    }
    return isValid;
  };

  const checkBundlePrice = () => {
    const bundlePriceEl = document.querySelector("#bundle-price");
    const bundlePrice = bundlePriceEl.value;

    if (!isRequired(bundlePrice)) {
      showError(bundlePriceEl, "Bundle price cannot be blank");
    } else if (parseFloat(bundlePrice) <= 0) {
      showError(bundlePriceEl, "Bundle Price cannot be zero");
    } else {
      showSuccess(bundlePriceEl);
      isValid = true;
    }
    return isValid;
  };

  const checkVariantStock = () => {
    const variantStockEl = document.querySelector("#variant-stock");
    const variantStock = variantStockEl.value;

    if (!isRequired(variantStock)) {
      showError(variantStockEl, "Stock cannot be blank");
    } else if (parseFloat(variantStock) <= 0) {
      showError(variantStockEl, "Stock cannot be zero");
    } else {
      showSuccess(variantStockEl);
      isValid = true;
    }
    return isValid;
  };

  const checkMaxProduct = () => {
    const maxProductPerPersonEl = document.querySelector("#max-product");
    const maxProductPerPerson = maxProductPerPersonEl.value;

    if (!isRequired(maxProductPerPerson)) {
      showError(maxProductPerPersonEl, "Max product cannot be blank");
    } else if (parseFloat(maxProductPerPerson) <= 0) {
      showError(maxProductPerPersonEl, "Max product cannot be Zero");
    } else {
      showSuccess(maxProductPerPersonEl);
      isValid = true;
    }
    return isValid;
  };

  const checkColor = () => {
    const colorEl = document.querySelector("#color");
    const color = colorEl.value;

    if (color === "selectColor") {
      showError(colorEl, "Select a color");
    } else {
      showSuccess(colorEl);
      isValid = true;
    }
    return isValid;
  };

  const checkSize = () => {
    const sizeEl = document.querySelector("#size");
    const size = sizeEl.value;

    if (size === "selectSize") {
      showError(sizeEl, "Select a size");
    } else {
      showSuccess(sizeEl);
      isValid = true;
    }
    return isValid;
  };

  const checkOnOffer = () => {
    const onOfferEl = document.querySelector("#on-offer");
    const onOffer = onOfferEl.value;

    if (onOffer === "selectOffer") {
      showError(onOfferEl, "Select Yes or No");
    } else {
      showSuccess(onOfferEl);
      isValid = true;
    }
    return isValid;
  };

  const checkOfferDiscountPrice = () => {
    const offerDiscountPriceEl = document.querySelector("#offer-discount-price");
    const offerDiscountPrice = offerDiscountPriceEl.value;

    if (!isRequired(offerDiscountPrice)) {
      showError(offerDiscountPriceEl, "Offer discount cannot be blank");
    } else if (parseFloat(offerDiscountPrice) <= 0) {
      showError(offerDiscountPriceEl, "Offer discount cannot be zero or less");
    } else {
      showSuccess(offerDiscountPriceEl);
      isValid = true;
    }
    return isValid;
  };

  const checkOfferDiscountRate = () => {
    const offerDiscountRateEl = document.querySelector("#offer-discount-rate");
    const offerDiscountRate = offerDiscountRateEl.value;

    if (!isRequired(offerDiscountRate)) {
      showError(offerDiscountRateEl, "Offer discount rate cannot be blank");
    } else if (parseFloat(offerDiscountRate) <= 0) {
      showError(offerDiscountRateEl, "Offer discount cannot be zero or less");
    } else {
      showSuccess(offerDiscountRateEl);
      isValid = true;
    }
    return isValid;
  };

  const checkBrand = () => {
    const brandEl = document.querySelector("#brand");
    const brand = brandEl.value;

    if (brand === "selectBrand") {
      showError(brandEl, "Select a brand");
    } else {
      showSuccess(brandEl);
      isValid = true;
    }
    return isValid;
  };

  const checkCategory = () => {
    const categoryEl = document.querySelector("#category");
    const category = categoryEl.value;

    if (category === "selectCategory") {
      showError(categoryEl, "Select a category");
    } else {
      showSuccess(categoryEl);
      isValid = true;
    }
    return isValid;
  };

  const isRequired = (value) => (value === "" ? false : true);

  const showError = (input, message) => {
    const formField = input.parentElement;
    formField.classList.remove("success", "is-valid");
    input.classList.remove("success", "is-valid");
    formField.classList.add("error", "is-invalid");
    input.classList.add("error", "is-invalid");
    const error = formField.querySelector("small");
    error.textContent = message;
  };

  const showSuccess = (input) => {
    const formField = input.parentElement;
    formField.classList.remove("error", "is-invalid");
    input.classList.remove("error", "is-invalid");
    formField.classList.add("success", "is-valid");
    input.classList.add("success", "is-valid");
    const error = formField.querySelector("small");
    if (error) {
      error.textContent = "";
    }
  };

  const debounce = (fn, delay = 500) => {
    let timeoutId;
    return (...args) => {
      // cancel the previous timer
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      // setup a new timer
      timeoutId = setTimeout(() => {
        fn.apply(null, args);
      }, delay);
    };
  };

  form.addEventListener(
    "input",
    debounce(function (e) {
      switch (e.target.id) {
        case "product-name": // Assuming this is the full name field
          checkName();
          break;
        case "product-description":
          checkDescription();
          break;
        case "actual-price":
          checkActualPrice();
          break;
        case "selling-price":
          checkSellingPrice();
          break;
        case "bundle-price":
          checkBundlePrice();
          break;
        case "variant-stock":
          checkVariantStock();
          break;
        case "max-product":
          checkMaxProduct();
          break;
        case "color":
          checkColor();
          break;
        case "size":
          checkSize();
          break;
        case "on-offer":
          checkOnOffer();
          break;
        case "offer-discount-price":
          checkOfferDiscountPrice();
          break;
        case "offer-discount-rate":
          checkOfferDiscountRate();
          break;
        case "brand":
          checkBrand();
          break;
        case "category":
          checkCategory();
          break;
      }
    })
  );

  form.addEventListener(
    "change",
    debounce(function (e) {
      switch (e.target.id) {
        case "product-name": // Assuming this is the full name field
          checkName();
          break;
        case "product-description":
          checkDescription();
          break;
        case "actual-price":
          checkActualPrice();
          break;
        case "selling-price":
          checkSellingPrice();
          break;
        case "bundle-price":
          checkBundlePrice();
          break;
        case "variant-stock":
          checkVariantStock();
          break;
        case "max-product":
          checkMaxProduct();
          break;
        case "color":
          checkColor();
          break;
        case "size":
          checkSize();
          break;
        case "on-offer":
          checkOnOffer();
          break;
        case "offer-discount-price":
          checkOfferDiscountPrice();
          break;
        case "offer-discount-rate":
          checkOfferDiscountRate();
          break;
        case "brand":
          checkBrand();
          break;
        case "category":
          checkCategory();
          break;
      }
    })
  );

  function validateForm() {
    let isValid = false;

    form.addEventListener("submit", function (e) {
      e.preventDefault();

      let isNameValid = checkName(),
        isDesciptionValid = checkDescription(),
        isActualPriceValid = checkActualPrice(),
        isSellingPriceValid = checkSellingPrice(),
        isBundlePriceValid = checkBundlePrice(),
        isStockValid = checkVariantStock(),
        isMaxProduct = checkMaxProduct(),
        isColor = checkColor(),
        isSize = checkSize(),
        isOffer = checkOnOffer(),
        isDiscountPrice = checkOfferDiscountPrice(),
        isDiscountRate = checkOfferDiscountRate(),
        isBrand = checkBrand(),
        isCategory = checkCategory();

      let isFormValid =
        isNameValid &&
        isDesciptionValid &&
        isActualPriceValid &&
        isSellingPriceValid &&
        isBundlePriceValid &&
        isStockValid &&
        isMaxProduct &&
        isColor &&
        isSize &&
        isOffer &&
        isDiscountPrice &&
        isDiscountRate &&
        isBrand &&
        isCategory;

      // if (isFormValid) {
      //   // form.submit();
      // }
      return isFormValid;
    });

    // // Validate price
    // const price = document.querySelector('input[name="price"]').value;
    // if (isNaN(price) || price < 0) {
    //   document.getElementById("price-error").innerText = "Price must be a number greater than or equal to 0.";
    //   isValid = true;
    // } else {
    //   document.getElementById("price-error").innerText = "";
    // }

    // // Validate product name
    // const productName = document.querySelector('input[name="productName"]').value;
    // if (productName.trim() === "") {
    //   document.getElementById("product-name-error").innerText = "Product name is required.";
    //   isValid = true;
    // } else {
    //   document.getElementById("product-name-error").innerText = "";
    // }

    // // Validate product description
    // const productDescription = document.querySelector('textarea[name="productdescription"]').value;
    // if (productDescription.trim() === "") {
    //   document.getElementById("product-description-error").innerText = "Product description is required.";
    //   isValid = true;
    // } else {
    //   document.getElementById("product-description-error").innerText = "";
    // }

    // Validate file inputs
    const allowedExtensions = ["jpg", "jpeg", "png", "gif"];
    const fileInputs = document.querySelectorAll('input[type="file"]');
    fileInputs.forEach((fileInput, index) => {
      const filePath = fileInput.value;
      const fileExtension = filePath.split(".").pop().toLowerCase();

      if (filePath && !allowedExtensions.includes(fileExtension)) {
        Swal.fire({
          icon: "error",
          title: "Invalid File Type",
          text: `File ${index + 1} is not an image. Please upload a file with one of the following extensions: ${allowedExtensions.join(", ")}.`,
        });
        isValid = false;
      }
    });

    return isValid;
  }
</script>
